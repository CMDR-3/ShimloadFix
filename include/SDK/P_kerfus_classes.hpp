#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: P_kerfus

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "Prop_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass p_kerfus.p_kerfus_C
// 0x0130 (0x0488 - 0x0358)
class AP_kerfus_C : public AProp_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_P_kerfus_C;                         // 0x0358(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNavigationInvokerComponent*            NavigationInvoker;                                 // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    CordRoot;                                          // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Cam;                                               // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        DoorStuck;                                         // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Wheel;                                             // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Roll;                                              // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Meow;                                              // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            PhysicsConstraint;                                 // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    bodyCOmponent;                                     // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Target_0;                                          // 0x03B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    WheelComponent;                                    // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         P;                                                 // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         S;                                                 // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Dirr;                                              // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DC[0x4];                                      // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 MoveTo;                                            // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DoingTask;                                         // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AServerBox_C*                           ServFix;                                           // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Active;                                            // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F9[0x3];                                      // 0x03F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PowUpright;                                        // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Wall;                                              // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_401[0x7];                                      // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AKerfusPawn_C*                          Pawn;                                              // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Searching;                                         // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_411[0x7];                                      // 0x0411(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AKerfusFace_C*                          Face;                                              // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WheelTorque;                                       // 0x0420(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42C[0x4];                                      // 0x042C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AProp_camera_good_C*                    Camera;                                            // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Type;                                              // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PossessLoc;                                        // 0x043C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Pets;                                              // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MeowPitch;                                         // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACord_C*                                ObjCord;                                           // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Energy;                                            // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Charging;                                          // 0x045C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RemoteControl;                                     // 0x045D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45E[0x2];                                      // 0x045E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RC_vector;                                         // 0x0460(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          backup;                                            // 0x046C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46D[0x3];                                      // 0x046D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WheelSPeed;                                        // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Jump_h;                                            // 0x0474(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Jump_f;                                            // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsJumping;                                         // 0x0484(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_p_kerfus(int32 EntryPoint);
	void CheckJump();
	void Jump();
	void PossessTimer();
	void CordUnplugged(class ACord_C* Cord, class ACordSocket_C* Socket);
	void CordPlugged(class ACord_C* Cord, class ACordSocket_C* Socket);
	void RunTrigger(class AActor* Owner_0, int32 Index_0);
	void Set_ignoreSave_trigger(bool NewParam);
	void MeowAnim();
	void SetActiveTrigger(class AActor* SentFrom, bool Active_0);
	void ActionOptionIndex(class AMainPlayer_C* Player, const struct FHitResult& Hit_0, Enum_interactionActions Action);
	void ReceiveTick(float DeltaSeconds);
	void Task();
	void OnCompleted_B4D86F6844FB2B9300F777A94A2F493A(class FName NotifyName);
	void OnBlendOut_B4D86F6844FB2B9300F777A94A2F493A(class FName NotifyName);
	void OnInterrupted_B4D86F6844FB2B9300F777A94A2F493A(class FName NotifyName);
	void OnNotifyBegin_B4D86F6844FB2B9300F777A94A2F493A(class FName NotifyName);
	void OnNotifyEnd_B4D86F6844FB2B9300F777A94A2F493A(class FName NotifyName);
	void OnSuccess_5969D59A41F71A16D1989893F49E8CE4(EPathFollowingResult MovementResult);
	void OnFail_5969D59A41F71A16D1989893F49E8CE4(EPathFollowingResult MovementResult);
	class AActor* TargetActor(struct FVector* PossessLoc_0);
	void FindBrokenServer();
	void SettingsApplied(const struct FStruct_settings& Settings);
	void ReceiveDestroyed();
	void GamemodeBeginPlay();
	void ReceiveBeginPlay();
	void Upd(bool SkipFace);
	void Possess(const struct FVector& PossessLoc_0);
	struct FVector Loccccccc();
	float Dtime();
	void IgnoreSave_trigger(bool* Ignore);
	void LoadTriggerData(const struct FStruct_triggerSave& Data, bool* Return);
	void GetTriggerData(struct FStruct_triggerSave* Data);
	void GatherDataFromKeyT(bool* Gather);
	void Crafted();
	void ActionName(class AMainPlayer_C* Player, const struct FHitResult& Hit_0, const class FString& Name_0);
	void IgnoreSave(bool* Param_IgnoreSave_0);
	void LoadData(const struct FStruct_save& Data, bool* Return);
	void GetData(struct FStruct_save* Data);
	void CanBePutInContainer(bool* Return);
	void AsProp(class AProp_C** Return);
	void CanPickup(bool* Return);
	void NoRespawn(bool Param_NoRespawn_0, bool* Return);
	void LookAt(class AMainPlayer_C* Player, const struct FHitResult& Hit_0, bool* Return, class FString* Text, class UPrimitiveComponent** boundObjectReplace, uint8* Number);
	void IsButtonUsed(bool* Failed);
	void CanBeUsedHold(bool* Return);
	void GetKey(class FString* Key_0);
	void ToolboxFix(class AProp_toolbox_C* Toolbox, bool* Return);
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);
	void GetActionOptions(class AMainPlayer_C* Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay, uint8* Number);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"p_kerfus_C">();
	}
	static class AP_kerfus_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AP_kerfus_C>();
	}
};
static_assert(alignof(AP_kerfus_C) == 0x000008, "Wrong alignment on AP_kerfus_C");
static_assert(sizeof(AP_kerfus_C) == 0x000488, "Wrong size on AP_kerfus_C");
static_assert(offsetof(AP_kerfus_C, UberGraphFrame_P_kerfus_C) == 0x000358, "Member 'AP_kerfus_C::UberGraphFrame_P_kerfus_C' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, NavigationInvoker) == 0x000360, "Member 'AP_kerfus_C::NavigationInvoker' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, CordRoot) == 0x000368, "Member 'AP_kerfus_C::CordRoot' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, Cam) == 0x000370, "Member 'AP_kerfus_C::Cam' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, DoorStuck) == 0x000378, "Member 'AP_kerfus_C::DoorStuck' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, Wheel) == 0x000380, "Member 'AP_kerfus_C::Wheel' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, SkeletalMesh) == 0x000388, "Member 'AP_kerfus_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, Roll) == 0x000390, "Member 'AP_kerfus_C::Roll' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, Meow) == 0x000398, "Member 'AP_kerfus_C::Meow' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, Billboard) == 0x0003A0, "Member 'AP_kerfus_C::Billboard' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, PhysicsConstraint) == 0x0003A8, "Member 'AP_kerfus_C::PhysicsConstraint' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, bodyCOmponent) == 0x0003B0, "Member 'AP_kerfus_C::bodyCOmponent' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, Target_0) == 0x0003B8, "Member 'AP_kerfus_C::Target_0' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, WheelComponent) == 0x0003C8, "Member 'AP_kerfus_C::WheelComponent' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, P) == 0x0003D0, "Member 'AP_kerfus_C::P' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, S) == 0x0003D4, "Member 'AP_kerfus_C::S' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, Dirr) == 0x0003D8, "Member 'AP_kerfus_C::Dirr' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, MoveTo) == 0x0003E0, "Member 'AP_kerfus_C::MoveTo' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, DoingTask) == 0x0003E8, "Member 'AP_kerfus_C::DoingTask' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, ServFix) == 0x0003F0, "Member 'AP_kerfus_C::ServFix' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, Active) == 0x0003F8, "Member 'AP_kerfus_C::Active' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, PowUpright) == 0x0003FC, "Member 'AP_kerfus_C::PowUpright' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, Wall) == 0x000400, "Member 'AP_kerfus_C::Wall' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, Pawn) == 0x000408, "Member 'AP_kerfus_C::Pawn' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, Searching) == 0x000410, "Member 'AP_kerfus_C::Searching' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, Face) == 0x000418, "Member 'AP_kerfus_C::Face' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, WheelTorque) == 0x000420, "Member 'AP_kerfus_C::WheelTorque' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, Camera) == 0x000430, "Member 'AP_kerfus_C::Camera' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, Type) == 0x000438, "Member 'AP_kerfus_C::Type' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, PossessLoc) == 0x00043C, "Member 'AP_kerfus_C::PossessLoc' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, Pets) == 0x000448, "Member 'AP_kerfus_C::Pets' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, MeowPitch) == 0x00044C, "Member 'AP_kerfus_C::MeowPitch' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, ObjCord) == 0x000450, "Member 'AP_kerfus_C::ObjCord' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, Energy) == 0x000458, "Member 'AP_kerfus_C::Energy' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, Charging) == 0x00045C, "Member 'AP_kerfus_C::Charging' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, RemoteControl) == 0x00045D, "Member 'AP_kerfus_C::RemoteControl' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, RC_vector) == 0x000460, "Member 'AP_kerfus_C::RC_vector' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, backup) == 0x00046C, "Member 'AP_kerfus_C::backup' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, WheelSPeed) == 0x000470, "Member 'AP_kerfus_C::WheelSPeed' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, Jump_h) == 0x000474, "Member 'AP_kerfus_C::Jump_h' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, Jump_f) == 0x000480, "Member 'AP_kerfus_C::Jump_f' has a wrong offset!");
static_assert(offsetof(AP_kerfus_C, IsJumping) == 0x000484, "Member 'AP_kerfus_C::IsJumping' has a wrong offset!");

}

