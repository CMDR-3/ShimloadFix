#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Panel_signal

#include "Basic.hpp"

#include "Enum_interactionActions_structs.hpp"
#include "Struct_save_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Struct_signalDataDynamic_structs.hpp"


namespace SDK::Params
{

// Function panel_signal.panel_signal_C.ExecuteUbergraph_panel_signal
// 0x04A0 (0x04A0 - 0x0000)
struct Panel_signal_C_ExecuteUbergraph_panel_signal final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        CallFunc_getMainGamemode_AsMain_Gamemode;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0028(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0060(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AProp_drive_C*                          K2Node_DynamicCast_AsProp_Drive;                   // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0xF];                                       // 0x00F1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0100(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x0154(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x01DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1DD[0x3];                                      // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x01E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x01F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class USoundWave*                       K2Node_CustomEvent_PlayingSoundWave;               // 0x0208(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_PlaybackPercent;                // 0x0210(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          CallFunc_getMainPlayer_AsMain_Player;              // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_3;    // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_4;    // 0x0221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_222[0x2];                                      // 0x0222(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_5;    // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0229(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x022A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22B[0x1];                                      // 0x022B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class USoundWave* PlayingSoundWave, float PlaybackPercent)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x022C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class AActor* DestroyedActor)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x023C(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x024C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24D[0x3];                                      // 0x024D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x0258(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x02E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x02E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x02E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakHitResult_Time;                      // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x02EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x02F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0304(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0310(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0330(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x034C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0358(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x0364(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_DestroyedActor;                 // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_381[0x3];                                      // 0x0381(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x0384(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0394(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_395[0x3];                                      // 0x0395(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_6;            // 0x0398(0x0010)(ZeroConstructor, NoDestructor)
	struct FStruct_signalDataDynamic              CallFunc_Array_Get_Item;                           // 0x03A8(0x0070)(HasGetValueTypeHash)
	bool                                          CallFunc_saveSignal_succ;                          // 0x0418(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_419[0x7];                                      // 0x0419(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_signalDataDynamic              CallFunc_Array_Get_Item_1;                         // 0x0420(0x0070)(HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0490(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0491(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0492(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Panel_signal_C_ExecuteUbergraph_panel_signal) == 0x000010, "Wrong alignment on Panel_signal_C_ExecuteUbergraph_panel_signal");
static_assert(sizeof(Panel_signal_C_ExecuteUbergraph_panel_signal) == 0x0004A0, "Wrong size on Panel_signal_C_ExecuteUbergraph_panel_signal");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, EntryPoint) == 0x000000, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::EntryPoint' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_getMainGamemode_AsMain_Gamemode) == 0x000008, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_getMainGamemode_AsMain_Gamemode' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000020, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000021, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x000022, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, K2Node_CreateDelegate_OutputDelegate_1) == 0x000028, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_Subtract_IntInt_ReturnValue) == 0x000038, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000040, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000048, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000050, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000058, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, K2Node_ComponentBoundEvent_bFromSweep) == 0x00005C, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, K2Node_ComponentBoundEvent_SweepResult) == 0x000060, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, K2Node_DynamicCast_AsProp_Drive) == 0x0000E8, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::K2Node_DynamicCast_AsProp_Drive' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, K2Node_DynamicCast_bSuccess) == 0x0000F0, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000100, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_BreakTransform_Location) == 0x000130, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_BreakTransform_Rotation) == 0x00013C, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_BreakTransform_Scale) == 0x000148, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x000154, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x0001DC, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x0001E0, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, K2Node_ComponentBoundEvent_OtherActor) == 0x0001E8, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, K2Node_ComponentBoundEvent_OtherComp) == 0x0001F0, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0001F8, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, Temp_int_Variable) == 0x0001FC, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_IsValid_ReturnValue) == 0x000200, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, K2Node_CustomEvent_PlayingSoundWave) == 0x000208, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::K2Node_CustomEvent_PlayingSoundWave' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, K2Node_CustomEvent_PlaybackPercent) == 0x000210, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::K2Node_CustomEvent_PlaybackPercent' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_getMainPlayer_AsMain_Player) == 0x000218, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_getMainPlayer_AsMain_Player' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_EqualEqual_ObjectObject_ReturnValue_3) == 0x000220, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_EqualEqual_ObjectObject_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_EqualEqual_ObjectObject_ReturnValue_4) == 0x000221, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_EqualEqual_ObjectObject_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, Temp_int_Variable_1) == 0x000224, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_EqualEqual_ObjectObject_ReturnValue_5) == 0x000228, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_EqualEqual_ObjectObject_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_Not_PreBool_ReturnValue) == 0x000229, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_IsPlaying_ReturnValue) == 0x00022A, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, K2Node_CreateDelegate_OutputDelegate_2) == 0x00022C, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, K2Node_CreateDelegate_OutputDelegate_3) == 0x00023C, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00024C, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, K2Node_Event_player) == 0x000250, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, K2Node_Event_hit) == 0x000258, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, K2Node_Event_action) == 0x0002E0, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, K2Node_SwitchEnum_CmpSuccess) == 0x0002E1, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_BreakHitResult_bBlockingHit) == 0x0002E2, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_BreakHitResult_bInitialOverlap) == 0x0002E3, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_BreakHitResult_Time) == 0x0002E4, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_BreakHitResult_Distance) == 0x0002E8, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_BreakHitResult_Location) == 0x0002EC, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_BreakHitResult_ImpactPoint) == 0x0002F8, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_BreakHitResult_Normal) == 0x000304, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_BreakHitResult_ImpactNormal) == 0x000310, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_BreakHitResult_PhysMat) == 0x000320, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_BreakHitResult_HitActor) == 0x000328, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_BreakHitResult_HitComponent) == 0x000330, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_BreakHitResult_HitBoneName) == 0x000338, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_BreakHitResult_HitItem) == 0x000340, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_BreakHitResult_ElementIndex) == 0x000344, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_BreakHitResult_FaceIndex) == 0x000348, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_BreakHitResult_TraceStart) == 0x00034C, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_BreakHitResult_TraceEnd) == 0x000358, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, K2Node_CreateDelegate_OutputDelegate_4) == 0x000364, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, K2Node_CustomEvent_DestroyedActor) == 0x000378, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::K2Node_CustomEvent_DestroyedActor' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_IsValid_ReturnValue_1) == 0x000380, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, K2Node_CreateDelegate_OutputDelegate_5) == 0x000384, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_IsValid_ReturnValue_2) == 0x000394, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, K2Node_CreateDelegate_OutputDelegate_6) == 0x000398, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_Array_Get_Item) == 0x0003A8, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_saveSignal_succ) == 0x000418, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_saveSignal_succ' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_Array_Get_Item_1) == 0x000420, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000490, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000491, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ExecuteUbergraph_panel_signal, CallFunc_BooleanAND_ReturnValue) == 0x000492, "Member 'Panel_signal_C_ExecuteUbergraph_panel_signal::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function panel_signal.panel_signal_C.Dest
// 0x0008 (0x0008 - 0x0000)
struct Panel_signal_C_Dest final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Panel_signal_C_Dest) == 0x000008, "Wrong alignment on Panel_signal_C_Dest");
static_assert(sizeof(Panel_signal_C_Dest) == 0x000008, "Wrong size on Panel_signal_C_Dest");
static_assert(offsetof(Panel_signal_C_Dest, DestroyedActor) == 0x000000, "Member 'Panel_signal_C_Dest::DestroyedActor' has a wrong offset!");

// Function panel_signal.panel_signal_C.playback
// 0x0010 (0x0010 - 0x0000)
struct Panel_signal_C_Playback final
{
public:
	const class USoundWave*                       PlayingSoundWave;                                  // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlaybackPercent;                                   // 0x0008(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Panel_signal_C_Playback) == 0x000008, "Wrong alignment on Panel_signal_C_Playback");
static_assert(sizeof(Panel_signal_C_Playback) == 0x000010, "Wrong size on Panel_signal_C_Playback");
static_assert(offsetof(Panel_signal_C_Playback, PlayingSoundWave) == 0x000000, "Member 'Panel_signal_C_Playback::PlayingSoundWave' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_Playback, PlaybackPercent) == 0x000008, "Member 'Panel_signal_C_Playback::PlaybackPercent' has a wrong offset!");

// Function panel_signal.panel_signal_C.BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function panel_signal.panel_signal_C.BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'Panel_signal_C_BndEvt__drivePort_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function panel_signal.panel_signal_C.addParams
// 0x0014 (0x0014 - 0x0000)
struct Panel_signal_C_AddParams final
{
public:
	int32                                         Add;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_VictoryIntPlusEquals_IntOut;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Panel_signal_C_AddParams) == 0x000004, "Wrong alignment on Panel_signal_C_AddParams");
static_assert(sizeof(Panel_signal_C_AddParams) == 0x000014, "Wrong size on Panel_signal_C_AddParams");
static_assert(offsetof(Panel_signal_C_AddParams, Add) == 0x000000, "Member 'Panel_signal_C_AddParams::Add' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_AddParams, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000004, "Member 'Panel_signal_C_AddParams::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_AddParams, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000008, "Member 'Panel_signal_C_AddParams::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_AddParams, CallFunc_VictoryIntPlusEquals_IntOut) == 0x00000C, "Member 'Panel_signal_C_AddParams::CallFunc_VictoryIntPlusEquals_IntOut' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_AddParams, CallFunc_Clamp_ReturnValue) == 0x000010, "Member 'Panel_signal_C_AddParams::CallFunc_Clamp_ReturnValue' has a wrong offset!");

// Function panel_signal.panel_signal_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct Panel_signal_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       Action;                                            // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Panel_signal_C_ActionOptionIndex) == 0x000008, "Wrong alignment on Panel_signal_C_ActionOptionIndex");
static_assert(sizeof(Panel_signal_C_ActionOptionIndex) == 0x000098, "Wrong size on Panel_signal_C_ActionOptionIndex");
static_assert(offsetof(Panel_signal_C_ActionOptionIndex, Player) == 0x000000, "Member 'Panel_signal_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ActionOptionIndex, Hit) == 0x000008, "Member 'Panel_signal_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_ActionOptionIndex, Action) == 0x000090, "Member 'Panel_signal_C_ActionOptionIndex::Action' has a wrong offset!");

// Function panel_signal.panel_signal_C.isButtonUsed
// 0x0001 (0x0001 - 0x0000)
struct Panel_signal_C_IsButtonUsed final
{
public:
	bool                                          Failed;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Panel_signal_C_IsButtonUsed) == 0x000001, "Wrong alignment on Panel_signal_C_IsButtonUsed");
static_assert(sizeof(Panel_signal_C_IsButtonUsed) == 0x000001, "Wrong size on Panel_signal_C_IsButtonUsed");
static_assert(offsetof(Panel_signal_C_IsButtonUsed, Failed) == 0x000000, "Member 'Panel_signal_C_IsButtonUsed::Failed' has a wrong offset!");

// Function panel_signal.panel_signal_C.lookAt
// 0x0188 (0x0188 - 0x0000)
struct Panel_signal_C_LookAt final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Return;                                            // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    boundObjectReplace;                                // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Number;                                            // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B3[0x1];                                       // 0x00B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0100(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           K2Node_MakeArray_Array;                            // 0x0138(0x0010)(ConstParm, ReferenceParm)
	TArray<class UPrimitiveComponent*>            K2Node_MakeArray_Array_1;                          // 0x0148(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15D[0x3];                                      // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Array_Get_Item;                           // 0x0160(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0178(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Panel_signal_C_LookAt) == 0x000008, "Wrong alignment on Panel_signal_C_LookAt");
static_assert(sizeof(Panel_signal_C_LookAt) == 0x000188, "Wrong size on Panel_signal_C_LookAt");
static_assert(offsetof(Panel_signal_C_LookAt, Player) == 0x000000, "Member 'Panel_signal_C_LookAt::Player' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, Hit) == 0x000008, "Member 'Panel_signal_C_LookAt::Hit' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, Return) == 0x000090, "Member 'Panel_signal_C_LookAt::Return' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, Text) == 0x000098, "Member 'Panel_signal_C_LookAt::Text' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, boundObjectReplace) == 0x0000A8, "Member 'Panel_signal_C_LookAt::boundObjectReplace' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, Number) == 0x0000B0, "Member 'Panel_signal_C_LookAt::Number' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, CallFunc_BreakHitResult_bBlockingHit) == 0x0000B1, "Member 'Panel_signal_C_LookAt::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000B2, "Member 'Panel_signal_C_LookAt::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, CallFunc_BreakHitResult_Time) == 0x0000B4, "Member 'Panel_signal_C_LookAt::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, CallFunc_BreakHitResult_Distance) == 0x0000B8, "Member 'Panel_signal_C_LookAt::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, CallFunc_BreakHitResult_Location) == 0x0000BC, "Member 'Panel_signal_C_LookAt::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, CallFunc_BreakHitResult_ImpactPoint) == 0x0000C8, "Member 'Panel_signal_C_LookAt::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, CallFunc_BreakHitResult_Normal) == 0x0000D4, "Member 'Panel_signal_C_LookAt::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, CallFunc_BreakHitResult_ImpactNormal) == 0x0000E0, "Member 'Panel_signal_C_LookAt::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, CallFunc_BreakHitResult_PhysMat) == 0x0000F0, "Member 'Panel_signal_C_LookAt::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, CallFunc_BreakHitResult_HitActor) == 0x0000F8, "Member 'Panel_signal_C_LookAt::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, CallFunc_BreakHitResult_HitComponent) == 0x000100, "Member 'Panel_signal_C_LookAt::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, CallFunc_BreakHitResult_HitBoneName) == 0x000108, "Member 'Panel_signal_C_LookAt::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, CallFunc_BreakHitResult_HitItem) == 0x000110, "Member 'Panel_signal_C_LookAt::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, CallFunc_BreakHitResult_ElementIndex) == 0x000114, "Member 'Panel_signal_C_LookAt::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, CallFunc_BreakHitResult_FaceIndex) == 0x000118, "Member 'Panel_signal_C_LookAt::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, CallFunc_BreakHitResult_TraceStart) == 0x00011C, "Member 'Panel_signal_C_LookAt::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, CallFunc_BreakHitResult_TraceEnd) == 0x000128, "Member 'Panel_signal_C_LookAt::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, K2Node_MakeArray_Array) == 0x000138, "Member 'Panel_signal_C_LookAt::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, K2Node_MakeArray_Array_1) == 0x000148, "Member 'Panel_signal_C_LookAt::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, CallFunc_Array_Find_ReturnValue) == 0x000158, "Member 'Panel_signal_C_LookAt::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00015C, "Member 'Panel_signal_C_LookAt::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, CallFunc_Array_Get_Item) == 0x000160, "Member 'Panel_signal_C_LookAt::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_LookAt, CallFunc_Conv_TextToString_ReturnValue) == 0x000178, "Member 'Panel_signal_C_LookAt::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function panel_signal.panel_signal_C.dreamInv
// 0x0018 (0x0018 - 0x0000)
struct Panel_signal_C_DreamInv final
{
public:
	TArray<struct FStruct_save>                   Invv;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class ADreamBase_C*                           Base;                                              // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Panel_signal_C_DreamInv) == 0x000008, "Wrong alignment on Panel_signal_C_DreamInv");
static_assert(sizeof(Panel_signal_C_DreamInv) == 0x000018, "Wrong size on Panel_signal_C_DreamInv");
static_assert(offsetof(Panel_signal_C_DreamInv, Invv) == 0x000000, "Member 'Panel_signal_C_DreamInv::Invv' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_DreamInv, Base) == 0x000010, "Member 'Panel_signal_C_DreamInv::Base' has a wrong offset!");

// Function panel_signal.panel_signal_C.getActionOptions
// 0x0060 (0x0060 - 0x0000)
struct Panel_signal_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	uint8                                         Number;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<Enum_interactionActions>               K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ReferenceParm)
};
static_assert(alignof(Panel_signal_C_GetActionOptions) == 0x000008, "Wrong alignment on Panel_signal_C_GetActionOptions");
static_assert(sizeof(Panel_signal_C_GetActionOptions) == 0x000060, "Wrong size on Panel_signal_C_GetActionOptions");
static_assert(offsetof(Panel_signal_C_GetActionOptions, Player) == 0x000000, "Member 'Panel_signal_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_GetActionOptions, Component) == 0x000008, "Member 'Panel_signal_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_GetActionOptions, Actor) == 0x000010, "Member 'Panel_signal_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_GetActionOptions, Options) == 0x000018, "Member 'Panel_signal_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_GetActionOptions, Options_enum) == 0x000028, "Member 'Panel_signal_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'Panel_signal_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_GetActionOptions, Number) == 0x000048, "Member 'Panel_signal_C_GetActionOptions::Number' has a wrong offset!");
static_assert(offsetof(Panel_signal_C_GetActionOptions, K2Node_MakeArray_Array) == 0x000050, "Member 'Panel_signal_C_GetActionOptions::K2Node_MakeArray_Array' has a wrong offset!");

}

