#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Prop_shower

#include "Basic.hpp"

#include "Struct_mFloat_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "Struct_save_structs.hpp"


namespace SDK::Params
{

// Function prop_shower.prop_shower_C.isButtonUsed
// 0x0001 (0x0001 - 0x0000)
struct Prop_shower_C_IsButtonUsed final
{
public:
	bool                                          Failed;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Prop_shower_C_IsButtonUsed) == 0x000001, "Wrong alignment on Prop_shower_C_IsButtonUsed");
static_assert(sizeof(Prop_shower_C_IsButtonUsed) == 0x000001, "Wrong size on Prop_shower_C_IsButtonUsed");
static_assert(offsetof(Prop_shower_C_IsButtonUsed, Failed) == 0x000000, "Member 'Prop_shower_C_IsButtonUsed::Failed' has a wrong offset!");

// Function prop_shower.prop_shower_C.lookAt
// 0x0138 (0x0138 - 0x0000)
struct Prop_shower_C_LookAt final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Return;                                            // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    boundObjectReplace;                                // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Number;                                            // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B3[0x1];                                       // 0x00B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0100(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Prop_shower_C_LookAt) == 0x000008, "Wrong alignment on Prop_shower_C_LookAt");
static_assert(sizeof(Prop_shower_C_LookAt) == 0x000138, "Wrong size on Prop_shower_C_LookAt");
static_assert(offsetof(Prop_shower_C_LookAt, Player) == 0x000000, "Member 'Prop_shower_C_LookAt::Player' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LookAt, Hit) == 0x000008, "Member 'Prop_shower_C_LookAt::Hit' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LookAt, Return) == 0x000090, "Member 'Prop_shower_C_LookAt::Return' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LookAt, Text) == 0x000098, "Member 'Prop_shower_C_LookAt::Text' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LookAt, boundObjectReplace) == 0x0000A8, "Member 'Prop_shower_C_LookAt::boundObjectReplace' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LookAt, Number) == 0x0000B0, "Member 'Prop_shower_C_LookAt::Number' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LookAt, CallFunc_BreakHitResult_bBlockingHit) == 0x0000B1, "Member 'Prop_shower_C_LookAt::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LookAt, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000B2, "Member 'Prop_shower_C_LookAt::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LookAt, CallFunc_BreakHitResult_Time) == 0x0000B4, "Member 'Prop_shower_C_LookAt::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LookAt, CallFunc_BreakHitResult_Distance) == 0x0000B8, "Member 'Prop_shower_C_LookAt::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LookAt, CallFunc_BreakHitResult_Location) == 0x0000BC, "Member 'Prop_shower_C_LookAt::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LookAt, CallFunc_BreakHitResult_ImpactPoint) == 0x0000C8, "Member 'Prop_shower_C_LookAt::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LookAt, CallFunc_BreakHitResult_Normal) == 0x0000D4, "Member 'Prop_shower_C_LookAt::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LookAt, CallFunc_BreakHitResult_ImpactNormal) == 0x0000E0, "Member 'Prop_shower_C_LookAt::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LookAt, CallFunc_BreakHitResult_PhysMat) == 0x0000F0, "Member 'Prop_shower_C_LookAt::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LookAt, CallFunc_BreakHitResult_HitActor) == 0x0000F8, "Member 'Prop_shower_C_LookAt::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LookAt, CallFunc_BreakHitResult_HitComponent) == 0x000100, "Member 'Prop_shower_C_LookAt::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LookAt, CallFunc_BreakHitResult_HitBoneName) == 0x000108, "Member 'Prop_shower_C_LookAt::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LookAt, CallFunc_BreakHitResult_HitItem) == 0x000110, "Member 'Prop_shower_C_LookAt::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LookAt, CallFunc_BreakHitResult_ElementIndex) == 0x000114, "Member 'Prop_shower_C_LookAt::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LookAt, CallFunc_BreakHitResult_FaceIndex) == 0x000118, "Member 'Prop_shower_C_LookAt::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LookAt, CallFunc_BreakHitResult_TraceStart) == 0x00011C, "Member 'Prop_shower_C_LookAt::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LookAt, CallFunc_BreakHitResult_TraceEnd) == 0x000128, "Member 'Prop_shower_C_LookAt::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LookAt, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000134, "Member 'Prop_shower_C_LookAt::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function prop_shower.prop_shower_C.noRespawn
// 0x0002 (0x0002 - 0x0000)
struct Prop_shower_C_NoRespawn final
{
public:
	bool                                          NoRespawn_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Prop_shower_C_NoRespawn) == 0x000001, "Wrong alignment on Prop_shower_C_NoRespawn");
static_assert(sizeof(Prop_shower_C_NoRespawn) == 0x000002, "Wrong size on Prop_shower_C_NoRespawn");
static_assert(offsetof(Prop_shower_C_NoRespawn, NoRespawn_0) == 0x000000, "Member 'Prop_shower_C_NoRespawn::NoRespawn_0' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_NoRespawn, Return) == 0x000001, "Member 'Prop_shower_C_NoRespawn::Return' has a wrong offset!");

// Function prop_shower.prop_shower_C.canPickup
// 0x0001 (0x0001 - 0x0000)
struct Prop_shower_C_CanPickup final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Prop_shower_C_CanPickup) == 0x000001, "Wrong alignment on Prop_shower_C_CanPickup");
static_assert(sizeof(Prop_shower_C_CanPickup) == 0x000001, "Wrong size on Prop_shower_C_CanPickup");
static_assert(offsetof(Prop_shower_C_CanPickup, Return) == 0x000000, "Member 'Prop_shower_C_CanPickup::Return' has a wrong offset!");

// Function prop_shower.prop_shower_C.asProp
// 0x0008 (0x0008 - 0x0000)
struct Prop_shower_C_AsProp final
{
public:
	class AProp_C*                                Return;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_shower_C_AsProp) == 0x000008, "Wrong alignment on Prop_shower_C_AsProp");
static_assert(sizeof(Prop_shower_C_AsProp) == 0x000008, "Wrong size on Prop_shower_C_AsProp");
static_assert(offsetof(Prop_shower_C_AsProp, Return) == 0x000000, "Member 'Prop_shower_C_AsProp::Return' has a wrong offset!");

// Function prop_shower.prop_shower_C.canBePutInContainer
// 0x0001 (0x0001 - 0x0000)
struct Prop_shower_C_CanBePutInContainer final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Prop_shower_C_CanBePutInContainer) == 0x000001, "Wrong alignment on Prop_shower_C_CanBePutInContainer");
static_assert(sizeof(Prop_shower_C_CanBePutInContainer) == 0x000001, "Wrong size on Prop_shower_C_CanBePutInContainer");
static_assert(offsetof(Prop_shower_C_CanBePutInContainer, Return) == 0x000000, "Member 'Prop_shower_C_CanBePutInContainer::Return' has a wrong offset!");

// Function prop_shower.prop_shower_C.landedOn
// 0x0010 (0x0010 - 0x0000)
struct Prop_shower_C_LandedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreFallDamage;                                  // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Prop_shower_C_LandedOn) == 0x000008, "Wrong alignment on Prop_shower_C_LandedOn");
static_assert(sizeof(Prop_shower_C_LandedOn) == 0x000010, "Wrong size on Prop_shower_C_LandedOn");
static_assert(offsetof(Prop_shower_C_LandedOn, Player) == 0x000000, "Member 'Prop_shower_C_LandedOn::Player' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LandedOn, IgnoreFallDamage) == 0x000008, "Member 'Prop_shower_C_LandedOn::IgnoreFallDamage' has a wrong offset!");

// Function prop_shower.prop_shower_C.getActionOptions
// 0x0060 (0x0060 - 0x0000)
struct Prop_shower_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	uint8                                         Number;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<Enum_interactionActions>               K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ReferenceParm)
};
static_assert(alignof(Prop_shower_C_GetActionOptions) == 0x000008, "Wrong alignment on Prop_shower_C_GetActionOptions");
static_assert(sizeof(Prop_shower_C_GetActionOptions) == 0x000060, "Wrong size on Prop_shower_C_GetActionOptions");
static_assert(offsetof(Prop_shower_C_GetActionOptions, Player) == 0x000000, "Member 'Prop_shower_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_GetActionOptions, Component) == 0x000008, "Member 'Prop_shower_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_GetActionOptions, Actor) == 0x000010, "Member 'Prop_shower_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_GetActionOptions, Options) == 0x000018, "Member 'Prop_shower_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_GetActionOptions, Options_enum) == 0x000028, "Member 'Prop_shower_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'Prop_shower_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_GetActionOptions, Number) == 0x000048, "Member 'Prop_shower_C_GetActionOptions::Number' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_GetActionOptions, K2Node_MakeArray_Array) == 0x000050, "Member 'Prop_shower_C_GetActionOptions::K2Node_MakeArray_Array' has a wrong offset!");

// Function prop_shower.prop_shower_C.getData
// 0x0270 (0x0270 - 0x0000)
struct Prop_shower_C_GetData final
{
public:
	struct FStruct_save                           Data;                                              // 0x0000(0x00C0)(Parm, OutParm, HasGetValueTypeHash)
	struct FStruct_save                           CallFunc_getData_data;                             // 0x00C0(0x00C0)(HasGetValueTypeHash)
	TArray<float>                                 K2Node_MakeArray_Array;                            // 0x0180(0x0010)(ReferenceParm)
	struct FStruct_mFloat                         K2Node_MakeStruct_struct_mFloat;                   // 0x0190(0x0010)(HasGetValueTypeHash)
	TArray<struct FStruct_mFloat>                 K2Node_MakeArray_Array_1;                          // 0x01A0(0x0010)(ReferenceParm)
	struct FStruct_save                           K2Node_SetFieldsInStruct_StructOut;                // 0x01B0(0x00C0)(HasGetValueTypeHash)
};
static_assert(alignof(Prop_shower_C_GetData) == 0x000010, "Wrong alignment on Prop_shower_C_GetData");
static_assert(sizeof(Prop_shower_C_GetData) == 0x000270, "Wrong size on Prop_shower_C_GetData");
static_assert(offsetof(Prop_shower_C_GetData, Data) == 0x000000, "Member 'Prop_shower_C_GetData::Data' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_GetData, CallFunc_getData_data) == 0x0000C0, "Member 'Prop_shower_C_GetData::CallFunc_getData_data' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_GetData, K2Node_MakeArray_Array) == 0x000180, "Member 'Prop_shower_C_GetData::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_GetData, K2Node_MakeStruct_struct_mFloat) == 0x000190, "Member 'Prop_shower_C_GetData::K2Node_MakeStruct_struct_mFloat' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_GetData, K2Node_MakeArray_Array_1) == 0x0001A0, "Member 'Prop_shower_C_GetData::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_GetData, K2Node_SetFieldsInStruct_StructOut) == 0x0001B0, "Member 'Prop_shower_C_GetData::K2Node_SetFieldsInStruct_StructOut' has a wrong offset!");

// Function prop_shower.prop_shower_C.loadData
// 0x00E0 (0x00E0 - 0x0000)
struct Prop_shower_C_LoadData final
{
public:
	struct FStruct_save                           Data;                                              // 0x0000(0x00C0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_loadData_return;                          // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_mFloat                         CallFunc_Array_Get_Item;                           // 0x00C8(0x0010)(HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_1;                         // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_shower_C_LoadData) == 0x000010, "Wrong alignment on Prop_shower_C_LoadData");
static_assert(sizeof(Prop_shower_C_LoadData) == 0x0000E0, "Wrong size on Prop_shower_C_LoadData");
static_assert(offsetof(Prop_shower_C_LoadData, Data) == 0x000000, "Member 'Prop_shower_C_LoadData::Data' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LoadData, Return) == 0x0000C0, "Member 'Prop_shower_C_LoadData::Return' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LoadData, CallFunc_loadData_return) == 0x0000C1, "Member 'Prop_shower_C_LoadData::CallFunc_loadData_return' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LoadData, CallFunc_Array_Get_Item) == 0x0000C8, "Member 'Prop_shower_C_LoadData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_LoadData, CallFunc_Array_Get_Item_1) == 0x0000D8, "Member 'Prop_shower_C_LoadData::CallFunc_Array_Get_Item_1' has a wrong offset!");

// Function prop_shower.prop_shower_C.gatherDataFromKey
// 0x0001 (0x0001 - 0x0000)
struct Prop_shower_C_GatherDataFromKey final
{
public:
	bool                                          Gather;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Prop_shower_C_GatherDataFromKey) == 0x000001, "Wrong alignment on Prop_shower_C_GatherDataFromKey");
static_assert(sizeof(Prop_shower_C_GatherDataFromKey) == 0x000001, "Wrong size on Prop_shower_C_GatherDataFromKey");
static_assert(offsetof(Prop_shower_C_GatherDataFromKey, Gather) == 0x000000, "Member 'Prop_shower_C_GatherDataFromKey::Gather' has a wrong offset!");

// Function prop_shower.prop_shower_C.upd
// 0x0004 (0x0004 - 0x0000)
struct Prop_shower_C_Upd final
{
public:
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_shower_C_Upd) == 0x000004, "Wrong alignment on Prop_shower_C_Upd");
static_assert(sizeof(Prop_shower_C_Upd) == 0x000004, "Wrong size on Prop_shower_C_Upd");
static_assert(offsetof(Prop_shower_C_Upd, CallFunc_FClamp_ReturnValue) == 0x000000, "Member 'Prop_shower_C_Upd::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function prop_shower.prop_shower_C.player_use
// 0x0090 (0x0090 - 0x0000)
struct Prop_shower_C_Player_use final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Prop_shower_C_Player_use) == 0x000008, "Wrong alignment on Prop_shower_C_Player_use");
static_assert(sizeof(Prop_shower_C_Player_use) == 0x000090, "Wrong size on Prop_shower_C_Player_use");
static_assert(offsetof(Prop_shower_C_Player_use, Player) == 0x000000, "Member 'Prop_shower_C_Player_use::Player' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_Player_use, Hit) == 0x000008, "Member 'Prop_shower_C_Player_use::Hit' has a wrong offset!");

// Function prop_shower.prop_shower_C.kicked
// 0x0001 (0x0001 - 0x0000)
struct Prop_shower_C_Kicked final
{
public:
	bool                                          Kick;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Prop_shower_C_Kicked) == 0x000001, "Wrong alignment on Prop_shower_C_Kicked");
static_assert(sizeof(Prop_shower_C_Kicked) == 0x000001, "Wrong size on Prop_shower_C_Kicked");
static_assert(offsetof(Prop_shower_C_Kicked, Kick) == 0x000000, "Member 'Prop_shower_C_Kicked::Kick' has a wrong offset!");

// Function prop_shower.prop_shower_C.sendName
// 0x0008 (0x0008 - 0x0000)
struct Prop_shower_C_SendName final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_shower_C_SendName) == 0x000004, "Wrong alignment on Prop_shower_C_SendName");
static_assert(sizeof(Prop_shower_C_SendName) == 0x000008, "Wrong size on Prop_shower_C_SendName");
static_assert(offsetof(Prop_shower_C_SendName, Name_0) == 0x000000, "Member 'Prop_shower_C_SendName::Name_0' has a wrong offset!");

// Function prop_shower.prop_shower_C.thrown
// 0x0008 (0x0008 - 0x0000)
struct Prop_shower_C_Thrown final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_shower_C_Thrown) == 0x000008, "Wrong alignment on Prop_shower_C_Thrown");
static_assert(sizeof(Prop_shower_C_Thrown) == 0x000008, "Wrong size on Prop_shower_C_Thrown");
static_assert(offsetof(Prop_shower_C_Thrown, Player) == 0x000000, "Member 'Prop_shower_C_Thrown::Player' has a wrong offset!");

// Function prop_shower.prop_shower_C.damageByPlayer
// 0x0098 (0x0098 - 0x0000)
struct Prop_shower_C_DamageByPlayer final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         Damage;                                            // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_shower_C_DamageByPlayer) == 0x000008, "Wrong alignment on Prop_shower_C_DamageByPlayer");
static_assert(sizeof(Prop_shower_C_DamageByPlayer) == 0x000098, "Wrong size on Prop_shower_C_DamageByPlayer");
static_assert(offsetof(Prop_shower_C_DamageByPlayer, Player) == 0x000000, "Member 'Prop_shower_C_DamageByPlayer::Player' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_DamageByPlayer, Hit) == 0x000008, "Member 'Prop_shower_C_DamageByPlayer::Hit' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_DamageByPlayer, Damage) == 0x000090, "Member 'Prop_shower_C_DamageByPlayer::Damage' has a wrong offset!");

// Function prop_shower.prop_shower_C.playerUnequip
// 0x0008 (0x0008 - 0x0000)
struct Prop_shower_C_PlayerUnequip final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_shower_C_PlayerUnequip) == 0x000008, "Wrong alignment on Prop_shower_C_PlayerUnequip");
static_assert(sizeof(Prop_shower_C_PlayerUnequip) == 0x000008, "Wrong size on Prop_shower_C_PlayerUnequip");
static_assert(offsetof(Prop_shower_C_PlayerUnequip, Player) == 0x000000, "Member 'Prop_shower_C_PlayerUnequip::Player' has a wrong offset!");

// Function prop_shower.prop_shower_C.playerHold
// 0x0008 (0x0008 - 0x0000)
struct Prop_shower_C_PlayerHold final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_shower_C_PlayerHold) == 0x000008, "Wrong alignment on Prop_shower_C_PlayerHold");
static_assert(sizeof(Prop_shower_C_PlayerHold) == 0x000008, "Wrong size on Prop_shower_C_PlayerHold");
static_assert(offsetof(Prop_shower_C_PlayerHold, Player) == 0x000000, "Member 'Prop_shower_C_PlayerHold::Player' has a wrong offset!");

// Function prop_shower.prop_shower_C.playerR
// 0x0008 (0x0008 - 0x0000)
struct Prop_shower_C_PlayerR final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_shower_C_PlayerR) == 0x000008, "Wrong alignment on Prop_shower_C_PlayerR");
static_assert(sizeof(Prop_shower_C_PlayerR) == 0x000008, "Wrong size on Prop_shower_C_PlayerR");
static_assert(offsetof(Prop_shower_C_PlayerR, Player) == 0x000000, "Member 'Prop_shower_C_PlayerR::Player' has a wrong offset!");

// Function prop_shower.prop_shower_C.cleanSponge
// 0x0010 (0x0010 - 0x0000)
struct Prop_shower_C_CleanSponge final
{
public:
	float                                         Clean_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          Player;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_shower_C_CleanSponge) == 0x000008, "Wrong alignment on Prop_shower_C_CleanSponge");
static_assert(sizeof(Prop_shower_C_CleanSponge) == 0x000010, "Wrong size on Prop_shower_C_CleanSponge");
static_assert(offsetof(Prop_shower_C_CleanSponge, Clean_0) == 0x000000, "Member 'Prop_shower_C_CleanSponge::Clean_0' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_CleanSponge, Player) == 0x000008, "Member 'Prop_shower_C_CleanSponge::Player' has a wrong offset!");

// Function prop_shower.prop_shower_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct Prop_shower_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       Action;                                            // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_shower_C_ActionOptionIndex) == 0x000008, "Wrong alignment on Prop_shower_C_ActionOptionIndex");
static_assert(sizeof(Prop_shower_C_ActionOptionIndex) == 0x000098, "Wrong size on Prop_shower_C_ActionOptionIndex");
static_assert(offsetof(Prop_shower_C_ActionOptionIndex, Player) == 0x000000, "Member 'Prop_shower_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ActionOptionIndex, Hit) == 0x000008, "Member 'Prop_shower_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ActionOptionIndex, Action) == 0x000090, "Member 'Prop_shower_C_ActionOptionIndex::Action' has a wrong offset!");

// Function prop_shower.prop_shower_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Prop_shower_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_shower_C_ReceiveTick) == 0x000004, "Wrong alignment on Prop_shower_C_ReceiveTick");
static_assert(sizeof(Prop_shower_C_ReceiveTick) == 0x000004, "Wrong size on Prop_shower_C_ReceiveTick");
static_assert(offsetof(Prop_shower_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Prop_shower_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function prop_shower.prop_shower_C.ExecuteUbergraph_prop_shower
// 0x04A8 (0x04A8 - 0x0000)
struct Prop_shower_C_ExecuteUbergraph_prop_shower final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_4;                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_clean;                                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_5;                             // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x00D0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_damage;                               // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatPlusEquals_FloatOut;          // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_progressAdvancement_finished;             // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_progressAdvancement_name;                 // 0x0164(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16D[0x3];                                      // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x0188(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0211(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0212(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0213(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x021C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0228(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_6;                             // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RandomUnitVector_ReturnValue;             // 0x0240(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RandomUnitVector_ReturnValue_1;           // 0x024C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0258(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0264(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0270(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x027C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0288(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0294(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VictoryFloatPlusEquals_FloatOut_1;        // 0x02A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      CallFunc_obj_physPawn_obj;                         // 0x02A8(0x0010)(ReferenceParm)
	class FName                                   K2Node_Event_name;                                 // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_kick;                                 // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_7;                             // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x02D0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0358(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0368(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x03F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x03F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F3[0x1];                                      // 0x03F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x03F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x03FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x0408(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x0414(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0420(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42C[0x4];                                      // 0x042C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x0430(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0438(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0440(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x0448(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x0450(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x0454(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x0458(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x045C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x0468(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_474[0x4];                                      // 0x0474(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AProp_bucket_C*                         K2Node_DynamicCast_AsProp_Bucket;                  // 0x0478(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0480(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_481[0x7];                                      // 0x0481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0488(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsMain_Player;             // 0x0490(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_499[0x3];                                      // 0x0499(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VictoryFloatPlusEquals_FloatOut_2;        // 0x049C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_LowEntry_LocalVariable_Value__Object;       // 0x04A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_shower_C_ExecuteUbergraph_prop_shower) == 0x000008, "Wrong alignment on Prop_shower_C_ExecuteUbergraph_prop_shower");
static_assert(sizeof(Prop_shower_C_ExecuteUbergraph_prop_shower) == 0x0004A8, "Wrong size on Prop_shower_C_ExecuteUbergraph_prop_shower");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, EntryPoint) == 0x000000, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::EntryPoint' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, K2Node_Event_player_4) == 0x000008, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::K2Node_Event_player_4' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, K2Node_Event_player_3) == 0x000010, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, K2Node_Event_player_2) == 0x000018, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, K2Node_Event_clean) == 0x000020, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::K2Node_Event_clean' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, K2Node_Event_player_1) == 0x000028, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_Less_FloatFloat_ReturnValue) == 0x000030, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_bBlockingHit) == 0x000031, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_bInitialOverlap) == 0x000032, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_Time) == 0x000034, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_Distance) == 0x000038, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_Location) == 0x00003C, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_ImpactPoint) == 0x000048, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_Normal) == 0x000054, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_ImpactNormal) == 0x000060, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_PhysMat) == 0x000070, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_HitActor) == 0x000078, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_HitComponent) == 0x000080, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_HitBoneName) == 0x000088, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_HitItem) == 0x000090, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_ElementIndex) == 0x000094, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_FaceIndex) == 0x000098, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_TraceStart) == 0x00009C, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_TraceEnd) == 0x0000A8, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000B4, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x0000B8, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_VLerp_ReturnValue) == 0x0000BC, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, K2Node_Event_player_5) == 0x0000C8, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::K2Node_Event_player_5' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, K2Node_Event_hit_1) == 0x0000D0, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, K2Node_Event_damage) == 0x000158, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_VictoryFloatPlusEquals_FloatOut) == 0x00015C, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_VictoryFloatPlusEquals_FloatOut' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_progressAdvancement_finished) == 0x000160, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_progressAdvancement_finished' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_progressAdvancement_name) == 0x000164, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_progressAdvancement_name' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00016C, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000170, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, K2Node_Event_player) == 0x000180, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, K2Node_Event_hit) == 0x000188, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, K2Node_Event_action) == 0x000210, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, K2Node_SwitchEnum_CmpSuccess) == 0x000211, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000212, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_Not_PreBool_ReturnValue) == 0x000213, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, K2Node_Event_DeltaSeconds) == 0x000214, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000218, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00021C, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_GetForwardVector_ReturnValue) == 0x000228, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000234, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, K2Node_Event_player_6) == 0x000238, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::K2Node_Event_player_6' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_RandomUnitVector_ReturnValue) == 0x000240, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_RandomUnitVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_RandomUnitVector_ReturnValue_1) == 0x00024C, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_RandomUnitVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000258, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000264, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_Add_VectorVector_ReturnValue) == 0x000270, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_Add_VectorVector_ReturnValue_1) == 0x00027C, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000288, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000294, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x0002A0, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_VictoryFloatPlusEquals_FloatOut_1) == 0x0002A4, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_VictoryFloatPlusEquals_FloatOut_1' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_obj_physPawn_obj) == 0x0002A8, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_obj_physPawn_obj' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, K2Node_Event_name) == 0x0002B8, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, K2Node_Event_kick) == 0x0002C0, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::K2Node_Event_kick' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, K2Node_Event_player_7) == 0x0002C8, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::K2Node_Event_player_7' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, K2Node_Event_hit_2) == 0x0002D0, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, Temp_object_Variable) == 0x000358, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000368, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x0003F0, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_bBlockingHit_1) == 0x0003F1, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x0003F2, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_Time_1) == 0x0003F4, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_Distance_1) == 0x0003F8, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_Location_1) == 0x0003FC, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_ImpactPoint_1) == 0x000408, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_Normal_1) == 0x000414, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000420, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_PhysMat_1) == 0x000430, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_HitActor_1) == 0x000438, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_HitComponent_1) == 0x000440, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_HitBoneName_1) == 0x000448, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_HitItem_1) == 0x000450, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_ElementIndex_1) == 0x000454, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_FaceIndex_1) == 0x000458, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_TraceStart_1) == 0x00045C, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_BreakHitResult_TraceEnd_1) == 0x000468, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, K2Node_DynamicCast_AsProp_Bucket) == 0x000478, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::K2Node_DynamicCast_AsProp_Bucket' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, K2Node_DynamicCast_bSuccess) == 0x000480, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_GetObjectClass_ReturnValue) == 0x000488, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, K2Node_ClassDynamicCast_AsMain_Player) == 0x000490, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::K2Node_ClassDynamicCast_AsMain_Player' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, K2Node_ClassDynamicCast_bSuccess) == 0x000498, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, CallFunc_VictoryFloatPlusEquals_FloatOut_2) == 0x00049C, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::CallFunc_VictoryFloatPlusEquals_FloatOut_2' has a wrong offset!");
static_assert(offsetof(Prop_shower_C_ExecuteUbergraph_prop_shower, K2Node_LowEntry_LocalVariable_Value__Object) == 0x0004A0, "Member 'Prop_shower_C_ExecuteUbergraph_prop_shower::K2Node_LowEntry_LocalVariable_Value__Object' has a wrong offset!");

}

