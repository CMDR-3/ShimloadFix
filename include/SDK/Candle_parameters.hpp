#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Candle

#include "Basic.hpp"

#include "Struct_mFloat_structs.hpp"
#include "Engine_structs.hpp"
#include "Struct_save_structs.hpp"
#include "Struct_mString_structs.hpp"
#include "Struct_mInt_structs.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function candle.candle_C.ExecuteUbergraph_candle
// 0x0440 (0x0440 - 0x0000)
struct Candle_C_ExecuteUbergraph_candle final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AActor* DestroyedActor)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0018(0x0010)(ConstParm, ReferenceParm)
	int32                                         Temp_int_Variable;                                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable_1;                            // 0x0030(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_6;                             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x0058(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_Event_kick;                                 // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_name;                                 // 0x00E4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_5;                             // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_4;                             // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x0100(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_damage;                               // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x01B0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0240(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AProp_candle_C*                         CallFunc_FinishSpawningActor_ReturnValue;          // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_MakeHitResult_ReturnValue;                // 0x0280(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AActor*                                 K2Node_CustomEvent_DestroyedActor;                 // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x0310(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AProp_candle_C*                         CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatMinusEquals_FloatOut;         // 0x0354(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      CallFunc_obj_dynPhys_obj;                          // 0x0358(0x0010)(ReferenceParm)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x036C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_SphereOverlapActors_OutActors;            // 0x0378(0x0010)(ReferenceParm)
	bool                                          CallFunc_SphereOverlapActors_ReturnValue;          // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0398(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IInt_objects_C>        K2Node_DynamicCast_AsInt_Objects;                  // 0x03A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B9[0x3];                                      // 0x03B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x03BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      CallFunc_obj_trigger_obj;                          // 0x03C8(0x0010)(ReferenceParm)
	TArray<class AActor*>                         CallFunc_SphereOverlapActors_OutActors_1;          // 0x03D8(0x0010)(ReferenceParm)
	bool                                          CallFunc_SphereOverlapActors_ReturnValue_1;        // 0x03E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_LowEntry_LocalVariable_Value__Object;       // 0x03F0(0x0010)(ReferenceParm)
	float                                         K2Node_Event_fuel;                                 // 0x0400(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_404[0x4];                                      // 0x0404(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x0408(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0410(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_414[0x4];                                      // 0x0414(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IInt_objects_C>        K2Node_DynamicCast_AsInt_Objects_1;                // 0x0418(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0428(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0429(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42A[0x2];                                      // 0x042A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FMax_ReturnValue;                         // 0x042C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_RandomBoolWithWeight_ReturnValue;         // 0x0431(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Candle_C_ExecuteUbergraph_candle) == 0x000010, "Wrong alignment on Candle_C_ExecuteUbergraph_candle");
static_assert(sizeof(Candle_C_ExecuteUbergraph_candle) == 0x000440, "Wrong size on Candle_C_ExecuteUbergraph_candle");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, EntryPoint) == 0x000000, "Member 'Candle_C_ExecuteUbergraph_candle::EntryPoint' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000004, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'Candle_C_ExecuteUbergraph_candle::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, Temp_object_Variable) == 0x000018, "Member 'Candle_C_ExecuteUbergraph_candle::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, Temp_int_Variable) == 0x000028, "Member 'Candle_C_ExecuteUbergraph_candle::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, Temp_object_Variable_1) == 0x000030, "Member 'Candle_C_ExecuteUbergraph_candle::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, Temp_int_Variable_1) == 0x000044, "Member 'Candle_C_ExecuteUbergraph_candle::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_Add_IntInt_ReturnValue_1) == 0x000048, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, K2Node_Event_player_6) == 0x000050, "Member 'Candle_C_ExecuteUbergraph_candle::K2Node_Event_player_6' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, K2Node_Event_hit_2) == 0x000058, "Member 'Candle_C_ExecuteUbergraph_candle::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, K2Node_Event_kick) == 0x0000E0, "Member 'Candle_C_ExecuteUbergraph_candle::K2Node_Event_kick' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, K2Node_Event_name) == 0x0000E4, "Member 'Candle_C_ExecuteUbergraph_candle::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, K2Node_Event_player_5) == 0x0000F0, "Member 'Candle_C_ExecuteUbergraph_candle::K2Node_Event_player_5' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, K2Node_Event_player_4) == 0x0000F8, "Member 'Candle_C_ExecuteUbergraph_candle::K2Node_Event_player_4' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, K2Node_Event_hit_1) == 0x000100, "Member 'Candle_C_ExecuteUbergraph_candle::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, K2Node_Event_damage) == 0x000188, "Member 'Candle_C_ExecuteUbergraph_candle::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, K2Node_Event_player_3) == 0x000190, "Member 'Candle_C_ExecuteUbergraph_candle::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, K2Node_Event_player_2) == 0x000198, "Member 'Candle_C_ExecuteUbergraph_candle::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, K2Node_Event_player_1) == 0x0001A0, "Member 'Candle_C_ExecuteUbergraph_candle::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, K2Node_Event_player) == 0x0001A8, "Member 'Candle_C_ExecuteUbergraph_candle::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, K2Node_Event_hit) == 0x0001B0, "Member 'Candle_C_ExecuteUbergraph_candle::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, K2Node_Event_action) == 0x000238, "Member 'Candle_C_ExecuteUbergraph_candle::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_GetTransform_ReturnValue) == 0x000240, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000270, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_FinishSpawningActor_ReturnValue) == 0x000278, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_MakeHitResult_ReturnValue) == 0x000280, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_MakeHitResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, K2Node_CustomEvent_DestroyedActor) == 0x000308, "Member 'Candle_C_ExecuteUbergraph_candle::K2Node_CustomEvent_DestroyedActor' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_GetTransform_ReturnValue_1) == 0x000310, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x000340, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x000348, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, K2Node_Event_DeltaSeconds) == 0x000350, "Member 'Candle_C_ExecuteUbergraph_candle::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_VictoryFloatMinusEquals_FloatOut) == 0x000354, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_VictoryFloatMinusEquals_FloatOut' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_obj_dynPhys_obj) == 0x000358, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_obj_dynPhys_obj' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_RandomFloatInRange_ReturnValue) == 0x000368, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00036C, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_SphereOverlapActors_OutActors) == 0x000378, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_SphereOverlapActors_OutActors' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_SphereOverlapActors_ReturnValue) == 0x000388, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_SphereOverlapActors_ReturnValue' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_Array_Get_Item) == 0x000390, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000398, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, K2Node_DynamicCast_AsInt_Objects) == 0x0003A8, "Member 'Candle_C_ExecuteUbergraph_candle::K2Node_DynamicCast_AsInt_Objects' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, K2Node_DynamicCast_bSuccess) == 0x0003B8, "Member 'Candle_C_ExecuteUbergraph_candle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_Array_Length_ReturnValue) == 0x0003BC, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_Less_IntInt_ReturnValue) == 0x0003C0, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_obj_trigger_obj) == 0x0003C8, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_obj_trigger_obj' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_SphereOverlapActors_OutActors_1) == 0x0003D8, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_SphereOverlapActors_OutActors_1' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_SphereOverlapActors_ReturnValue_1) == 0x0003E8, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_SphereOverlapActors_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, K2Node_LowEntry_LocalVariable_Value__Object) == 0x0003F0, "Member 'Candle_C_ExecuteUbergraph_candle::K2Node_LowEntry_LocalVariable_Value__Object' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, K2Node_Event_fuel) == 0x000400, "Member 'Candle_C_ExecuteUbergraph_candle::K2Node_Event_fuel' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_Array_Get_Item_1) == 0x000408, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_Array_Length_ReturnValue_1) == 0x000410, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, K2Node_DynamicCast_AsInt_Objects_1) == 0x000418, "Member 'Candle_C_ExecuteUbergraph_candle::K2Node_DynamicCast_AsInt_Objects_1' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, K2Node_DynamicCast_bSuccess_1) == 0x000428, "Member 'Candle_C_ExecuteUbergraph_candle::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_Less_IntInt_ReturnValue_1) == 0x000429, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_FMax_ReturnValue) == 0x00042C, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_Array_RemoveItem_ReturnValue) == 0x000430, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(Candle_C_ExecuteUbergraph_candle, CallFunc_RandomBoolWithWeight_ReturnValue) == 0x000431, "Member 'Candle_C_ExecuteUbergraph_candle::CallFunc_RandomBoolWithWeight_ReturnValue' has a wrong offset!");

// Function candle.candle_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Candle_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Candle_C_ReceiveTick) == 0x000004, "Wrong alignment on Candle_C_ReceiveTick");
static_assert(sizeof(Candle_C_ReceiveTick) == 0x000004, "Wrong size on Candle_C_ReceiveTick");
static_assert(offsetof(Candle_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Candle_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function candle.candle_C.Dest
// 0x0008 (0x0008 - 0x0000)
struct Candle_C_Dest final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Candle_C_Dest) == 0x000008, "Wrong alignment on Candle_C_Dest");
static_assert(sizeof(Candle_C_Dest) == 0x000008, "Wrong size on Candle_C_Dest");
static_assert(offsetof(Candle_C_Dest, DestroyedActor) == 0x000000, "Member 'Candle_C_Dest::DestroyedActor' has a wrong offset!");

// Function candle.candle_C.playerR
// 0x0008 (0x0008 - 0x0000)
struct Candle_C_PlayerR final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Candle_C_PlayerR) == 0x000008, "Wrong alignment on Candle_C_PlayerR");
static_assert(sizeof(Candle_C_PlayerR) == 0x000008, "Wrong size on Candle_C_PlayerR");
static_assert(offsetof(Candle_C_PlayerR, Player) == 0x000000, "Member 'Candle_C_PlayerR::Player' has a wrong offset!");

// Function candle.candle_C.playerHold
// 0x0008 (0x0008 - 0x0000)
struct Candle_C_PlayerHold final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Candle_C_PlayerHold) == 0x000008, "Wrong alignment on Candle_C_PlayerHold");
static_assert(sizeof(Candle_C_PlayerHold) == 0x000008, "Wrong size on Candle_C_PlayerHold");
static_assert(offsetof(Candle_C_PlayerHold, Player) == 0x000000, "Member 'Candle_C_PlayerHold::Player' has a wrong offset!");

// Function candle.candle_C.playerUnequip
// 0x0008 (0x0008 - 0x0000)
struct Candle_C_PlayerUnequip final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Candle_C_PlayerUnequip) == 0x000008, "Wrong alignment on Candle_C_PlayerUnequip");
static_assert(sizeof(Candle_C_PlayerUnequip) == 0x000008, "Wrong size on Candle_C_PlayerUnequip");
static_assert(offsetof(Candle_C_PlayerUnequip, Player) == 0x000000, "Member 'Candle_C_PlayerUnequip::Player' has a wrong offset!");

// Function candle.candle_C.damageByPlayer
// 0x0098 (0x0098 - 0x0000)
struct Candle_C_DamageByPlayer final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         Damage;                                            // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Candle_C_DamageByPlayer) == 0x000008, "Wrong alignment on Candle_C_DamageByPlayer");
static_assert(sizeof(Candle_C_DamageByPlayer) == 0x000098, "Wrong size on Candle_C_DamageByPlayer");
static_assert(offsetof(Candle_C_DamageByPlayer, Player) == 0x000000, "Member 'Candle_C_DamageByPlayer::Player' has a wrong offset!");
static_assert(offsetof(Candle_C_DamageByPlayer, Hit) == 0x000008, "Member 'Candle_C_DamageByPlayer::Hit' has a wrong offset!");
static_assert(offsetof(Candle_C_DamageByPlayer, Damage) == 0x000090, "Member 'Candle_C_DamageByPlayer::Damage' has a wrong offset!");

// Function candle.candle_C.thrown
// 0x0008 (0x0008 - 0x0000)
struct Candle_C_Thrown final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Candle_C_Thrown) == 0x000008, "Wrong alignment on Candle_C_Thrown");
static_assert(sizeof(Candle_C_Thrown) == 0x000008, "Wrong size on Candle_C_Thrown");
static_assert(offsetof(Candle_C_Thrown, Player) == 0x000000, "Member 'Candle_C_Thrown::Player' has a wrong offset!");

// Function candle.candle_C.sendName
// 0x0008 (0x0008 - 0x0000)
struct Candle_C_SendName final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Candle_C_SendName) == 0x000004, "Wrong alignment on Candle_C_SendName");
static_assert(sizeof(Candle_C_SendName) == 0x000008, "Wrong size on Candle_C_SendName");
static_assert(offsetof(Candle_C_SendName, Name_0) == 0x000000, "Member 'Candle_C_SendName::Name_0' has a wrong offset!");

// Function candle.candle_C.kicked
// 0x0001 (0x0001 - 0x0000)
struct Candle_C_Kicked final
{
public:
	bool                                          Kick;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Candle_C_Kicked) == 0x000001, "Wrong alignment on Candle_C_Kicked");
static_assert(sizeof(Candle_C_Kicked) == 0x000001, "Wrong size on Candle_C_Kicked");
static_assert(offsetof(Candle_C_Kicked, Kick) == 0x000000, "Member 'Candle_C_Kicked::Kick' has a wrong offset!");

// Function candle.candle_C.player_use
// 0x0090 (0x0090 - 0x0000)
struct Candle_C_Player_use final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Candle_C_Player_use) == 0x000008, "Wrong alignment on Candle_C_Player_use");
static_assert(sizeof(Candle_C_Player_use) == 0x000090, "Wrong size on Candle_C_Player_use");
static_assert(offsetof(Candle_C_Player_use, Player) == 0x000000, "Member 'Candle_C_Player_use::Player' has a wrong offset!");
static_assert(offsetof(Candle_C_Player_use, Hit) == 0x000008, "Member 'Candle_C_Player_use::Hit' has a wrong offset!");

// Function candle.candle_C.Init
// 0x0108 (0x0108 - 0x0000)
struct Candle_C_Init final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Temp_object_Variable_3;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Temp_object_Variable_4;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Temp_object_Variable_5;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoxSphereBounds                       CallFunc_GetBounds_ReturnValue;                    // 0x0044(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0080(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Candle_C_Init) == 0x000008, "Wrong alignment on Candle_C_Init");
static_assert(sizeof(Candle_C_Init) == 0x000108, "Wrong size on Candle_C_Init");
static_assert(offsetof(Candle_C_Init, Temp_int_Variable) == 0x000000, "Member 'Candle_C_Init::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Candle_C_Init, Temp_object_Variable) == 0x000008, "Member 'Candle_C_Init::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Candle_C_Init, Temp_object_Variable_1) == 0x000010, "Member 'Candle_C_Init::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(Candle_C_Init, Temp_object_Variable_2) == 0x000018, "Member 'Candle_C_Init::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(Candle_C_Init, Temp_object_Variable_3) == 0x000020, "Member 'Candle_C_Init::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(Candle_C_Init, Temp_object_Variable_4) == 0x000028, "Member 'Candle_C_Init::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(Candle_C_Init, Temp_object_Variable_5) == 0x000030, "Member 'Candle_C_Init::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(Candle_C_Init, K2Node_Select_Default) == 0x000038, "Member 'Candle_C_Init::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Candle_C_Init, CallFunc_SetStaticMesh_ReturnValue) == 0x000040, "Member 'Candle_C_Init::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(Candle_C_Init, CallFunc_GetBounds_ReturnValue) == 0x000044, "Member 'Candle_C_Init::CallFunc_GetBounds_ReturnValue' has a wrong offset!");
static_assert(offsetof(Candle_C_Init, CallFunc_BreakVector_X) == 0x000060, "Member 'Candle_C_Init::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(Candle_C_Init, CallFunc_BreakVector_Y) == 0x000064, "Member 'Candle_C_Init::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(Candle_C_Init, CallFunc_BreakVector_Z) == 0x000068, "Member 'Candle_C_Init::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(Candle_C_Init, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00006C, "Member 'Candle_C_Init::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Candle_C_Init, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000070, "Member 'Candle_C_Init::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Candle_C_Init, CallFunc_MakeVector_ReturnValue) == 0x000074, "Member 'Candle_C_Init::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Candle_C_Init, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000080, "Member 'Candle_C_Init::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");

// Function candle.candle_C.attach
// 0x0008 (0x0008 - 0x0000)
struct Candle_C_Attach final
{
public:
	class AActor*                                 Attach_object_0;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Candle_C_Attach) == 0x000008, "Wrong alignment on Candle_C_Attach");
static_assert(sizeof(Candle_C_Attach) == 0x000008, "Wrong size on Candle_C_Attach");
static_assert(offsetof(Candle_C_Attach, Attach_object_0) == 0x000000, "Member 'Candle_C_Attach::Attach_object_0' has a wrong offset!");

// Function candle.candle_C.upd
// 0x0002 (0x0002 - 0x0000)
struct Candle_C_Upd final
{
public:
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Candle_C_Upd) == 0x000001, "Wrong alignment on Candle_C_Upd");
static_assert(sizeof(Candle_C_Upd) == 0x000002, "Wrong size on Candle_C_Upd");
static_assert(offsetof(Candle_C_Upd, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000000, "Member 'Candle_C_Upd::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Candle_C_Upd, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000001, "Member 'Candle_C_Upd::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function candle.candle_C.landedOn
// 0x0010 (0x0010 - 0x0000)
struct Candle_C_LandedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreFallDamage;                                  // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Candle_C_LandedOn) == 0x000008, "Wrong alignment on Candle_C_LandedOn");
static_assert(sizeof(Candle_C_LandedOn) == 0x000010, "Wrong size on Candle_C_LandedOn");
static_assert(offsetof(Candle_C_LandedOn, Player) == 0x000000, "Member 'Candle_C_LandedOn::Player' has a wrong offset!");
static_assert(offsetof(Candle_C_LandedOn, IgnoreFallDamage) == 0x000008, "Member 'Candle_C_LandedOn::IgnoreFallDamage' has a wrong offset!");

// Function candle.candle_C.canBePutInContainer
// 0x0001 (0x0001 - 0x0000)
struct Candle_C_CanBePutInContainer final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Candle_C_CanBePutInContainer) == 0x000001, "Wrong alignment on Candle_C_CanBePutInContainer");
static_assert(sizeof(Candle_C_CanBePutInContainer) == 0x000001, "Wrong size on Candle_C_CanBePutInContainer");
static_assert(offsetof(Candle_C_CanBePutInContainer, Return) == 0x000000, "Member 'Candle_C_CanBePutInContainer::Return' has a wrong offset!");

// Function candle.candle_C.asProp
// 0x0008 (0x0008 - 0x0000)
struct Candle_C_AsProp final
{
public:
	class AProp_C*                                Return;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Candle_C_AsProp) == 0x000008, "Wrong alignment on Candle_C_AsProp");
static_assert(sizeof(Candle_C_AsProp) == 0x000008, "Wrong size on Candle_C_AsProp");
static_assert(offsetof(Candle_C_AsProp, Return) == 0x000000, "Member 'Candle_C_AsProp::Return' has a wrong offset!");

// Function candle.candle_C.canPickup
// 0x0001 (0x0001 - 0x0000)
struct Candle_C_CanPickup final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Candle_C_CanPickup) == 0x000001, "Wrong alignment on Candle_C_CanPickup");
static_assert(sizeof(Candle_C_CanPickup) == 0x000001, "Wrong size on Candle_C_CanPickup");
static_assert(offsetof(Candle_C_CanPickup, Return) == 0x000000, "Member 'Candle_C_CanPickup::Return' has a wrong offset!");

// Function candle.candle_C.noRespawn
// 0x0002 (0x0002 - 0x0000)
struct Candle_C_NoRespawn final
{
public:
	bool                                          NoRespawn_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Candle_C_NoRespawn) == 0x000001, "Wrong alignment on Candle_C_NoRespawn");
static_assert(sizeof(Candle_C_NoRespawn) == 0x000002, "Wrong size on Candle_C_NoRespawn");
static_assert(offsetof(Candle_C_NoRespawn, NoRespawn_0) == 0x000000, "Member 'Candle_C_NoRespawn::NoRespawn_0' has a wrong offset!");
static_assert(offsetof(Candle_C_NoRespawn, Return) == 0x000001, "Member 'Candle_C_NoRespawn::Return' has a wrong offset!");

// Function candle.candle_C.lookAt
// 0x00B8 (0x00B8 - 0x0000)
struct Candle_C_LookAt final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Return;                                            // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    boundObjectReplace;                                // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Number;                                            // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Candle_C_LookAt) == 0x000008, "Wrong alignment on Candle_C_LookAt");
static_assert(sizeof(Candle_C_LookAt) == 0x0000B8, "Wrong size on Candle_C_LookAt");
static_assert(offsetof(Candle_C_LookAt, Player) == 0x000000, "Member 'Candle_C_LookAt::Player' has a wrong offset!");
static_assert(offsetof(Candle_C_LookAt, Hit) == 0x000008, "Member 'Candle_C_LookAt::Hit' has a wrong offset!");
static_assert(offsetof(Candle_C_LookAt, Return) == 0x000090, "Member 'Candle_C_LookAt::Return' has a wrong offset!");
static_assert(offsetof(Candle_C_LookAt, Text) == 0x000098, "Member 'Candle_C_LookAt::Text' has a wrong offset!");
static_assert(offsetof(Candle_C_LookAt, boundObjectReplace) == 0x0000A8, "Member 'Candle_C_LookAt::boundObjectReplace' has a wrong offset!");
static_assert(offsetof(Candle_C_LookAt, Number) == 0x0000B0, "Member 'Candle_C_LookAt::Number' has a wrong offset!");

// Function candle.candle_C.isButtonUsed
// 0x0001 (0x0001 - 0x0000)
struct Candle_C_IsButtonUsed final
{
public:
	bool                                          Failed;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Candle_C_IsButtonUsed) == 0x000001, "Wrong alignment on Candle_C_IsButtonUsed");
static_assert(sizeof(Candle_C_IsButtonUsed) == 0x000001, "Wrong size on Candle_C_IsButtonUsed");
static_assert(offsetof(Candle_C_IsButtonUsed, Failed) == 0x000000, "Member 'Candle_C_IsButtonUsed::Failed' has a wrong offset!");

// Function candle.candle_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct Candle_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       Action;                                            // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Candle_C_ActionOptionIndex) == 0x000008, "Wrong alignment on Candle_C_ActionOptionIndex");
static_assert(sizeof(Candle_C_ActionOptionIndex) == 0x000098, "Wrong size on Candle_C_ActionOptionIndex");
static_assert(offsetof(Candle_C_ActionOptionIndex, Player) == 0x000000, "Member 'Candle_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(Candle_C_ActionOptionIndex, Hit) == 0x000008, "Member 'Candle_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(Candle_C_ActionOptionIndex, Action) == 0x000090, "Member 'Candle_C_ActionOptionIndex::Action' has a wrong offset!");

// Function candle.candle_C.ignite
// 0x0004 (0x0004 - 0x0000)
struct Candle_C_Ignite final
{
public:
	float                                         Fuel;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Candle_C_Ignite) == 0x000004, "Wrong alignment on Candle_C_Ignite");
static_assert(sizeof(Candle_C_Ignite) == 0x000004, "Wrong size on Candle_C_Ignite");
static_assert(offsetof(Candle_C_Ignite, Fuel) == 0x000000, "Member 'Candle_C_Ignite::Fuel' has a wrong offset!");

// Function candle.candle_C.getActionOptions
// 0x0060 (0x0060 - 0x0000)
struct Candle_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	uint8                                         Number;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<Enum_interactionActions>               K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ReferenceParm)
};
static_assert(alignof(Candle_C_GetActionOptions) == 0x000008, "Wrong alignment on Candle_C_GetActionOptions");
static_assert(sizeof(Candle_C_GetActionOptions) == 0x000060, "Wrong size on Candle_C_GetActionOptions");
static_assert(offsetof(Candle_C_GetActionOptions, Player) == 0x000000, "Member 'Candle_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(Candle_C_GetActionOptions, Component) == 0x000008, "Member 'Candle_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(Candle_C_GetActionOptions, Actor) == 0x000010, "Member 'Candle_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(Candle_C_GetActionOptions, Options) == 0x000018, "Member 'Candle_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(Candle_C_GetActionOptions, Options_enum) == 0x000028, "Member 'Candle_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(Candle_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'Candle_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(Candle_C_GetActionOptions, Number) == 0x000048, "Member 'Candle_C_GetActionOptions::Number' has a wrong offset!");
static_assert(offsetof(Candle_C_GetActionOptions, K2Node_MakeArray_Array) == 0x000050, "Member 'Candle_C_GetActionOptions::K2Node_MakeArray_Array' has a wrong offset!");

// Function candle.candle_C.loadData
// 0x0120 (0x0120 - 0x0000)
struct Candle_C_LoadData final
{
public:
	struct FStruct_save                           Data;                                              // 0x0000(0x00C0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_loadData_return;                          // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_mString                        CallFunc_Array_Get_Item;                           // 0x00C8(0x0010)(HasGetValueTypeHash)
	struct FStruct_mInt                           CallFunc_Array_Get_Item_1;                         // 0x00D8(0x0010)(HasGetValueTypeHash)
	class FString                                 CallFunc_Array_Get_Item_2;                         // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_3;                         // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_mFloat                         CallFunc_Array_Get_Item_4;                         // 0x0100(0x0010)(HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_5;                         // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Candle_C_LoadData) == 0x000010, "Wrong alignment on Candle_C_LoadData");
static_assert(sizeof(Candle_C_LoadData) == 0x000120, "Wrong size on Candle_C_LoadData");
static_assert(offsetof(Candle_C_LoadData, Data) == 0x000000, "Member 'Candle_C_LoadData::Data' has a wrong offset!");
static_assert(offsetof(Candle_C_LoadData, Return) == 0x0000C0, "Member 'Candle_C_LoadData::Return' has a wrong offset!");
static_assert(offsetof(Candle_C_LoadData, CallFunc_loadData_return) == 0x0000C1, "Member 'Candle_C_LoadData::CallFunc_loadData_return' has a wrong offset!");
static_assert(offsetof(Candle_C_LoadData, CallFunc_Array_Get_Item) == 0x0000C8, "Member 'Candle_C_LoadData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Candle_C_LoadData, CallFunc_Array_Get_Item_1) == 0x0000D8, "Member 'Candle_C_LoadData::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Candle_C_LoadData, CallFunc_Array_Get_Item_2) == 0x0000E8, "Member 'Candle_C_LoadData::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(Candle_C_LoadData, CallFunc_Array_Get_Item_3) == 0x0000F8, "Member 'Candle_C_LoadData::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(Candle_C_LoadData, CallFunc_Array_Get_Item_4) == 0x000100, "Member 'Candle_C_LoadData::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(Candle_C_LoadData, CallFunc_Array_Get_Item_5) == 0x000110, "Member 'Candle_C_LoadData::CallFunc_Array_Get_Item_5' has a wrong offset!");

// Function candle.candle_C.processKeys
// 0x0018 (0x0018 - 0x0000)
struct Candle_C_ProcessKeys final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_getObjectFromKey_Output;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_processKeys_return;                       // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Candle_C_ProcessKeys) == 0x000008, "Wrong alignment on Candle_C_ProcessKeys");
static_assert(sizeof(Candle_C_ProcessKeys) == 0x000018, "Wrong size on Candle_C_ProcessKeys");
static_assert(offsetof(Candle_C_ProcessKeys, Return) == 0x000000, "Member 'Candle_C_ProcessKeys::Return' has a wrong offset!");
static_assert(offsetof(Candle_C_ProcessKeys, CallFunc_getObjectFromKey_Output) == 0x000008, "Member 'Candle_C_ProcessKeys::CallFunc_getObjectFromKey_Output' has a wrong offset!");
static_assert(offsetof(Candle_C_ProcessKeys, CallFunc_IsEmpty_ReturnValue) == 0x000010, "Member 'Candle_C_ProcessKeys::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(Candle_C_ProcessKeys, CallFunc_processKeys_return) == 0x000011, "Member 'Candle_C_ProcessKeys::CallFunc_processKeys_return' has a wrong offset!");

// Function candle.candle_C.getData
// 0x0300 (0x0300 - 0x0000)
struct Candle_C_GetData final
{
public:
	struct FStruct_save                           Data;                                              // 0x0000(0x00C0)(Parm, OutParm, HasGetValueTypeHash)
	TScriptInterface<class IInt_objects_C>        K2Node_DynamicCast_AsInt_Objects;                  // 0x00C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 K2Node_MakeArray_Array;                            // 0x00D8(0x0010)(ReferenceParm)
	class FString                                 CallFunc_getKey_key;                               // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FStruct_mFloat                         K2Node_MakeStruct_struct_mFloat;                   // 0x00F8(0x0010)(HasGetValueTypeHash)
	TArray<struct FStruct_mFloat>                 K2Node_MakeArray_Array_1;                          // 0x0108(0x0010)(ReferenceParm)
	TArray<class FString>                         K2Node_MakeArray_Array_2;                          // 0x0118(0x0010)(ReferenceParm)
	struct FStruct_mString                        K2Node_MakeStruct_struct_mString;                  // 0x0128(0x0010)(HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array_3;                          // 0x0138(0x0010)(ReferenceParm)
	TArray<struct FStruct_mString>                K2Node_MakeArray_Array_4;                          // 0x0148(0x0010)(ReferenceParm)
	struct FStruct_mInt                           K2Node_MakeStruct_struct_mInt;                     // 0x0158(0x0010)(HasGetValueTypeHash)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_save                           CallFunc_getData_data;                             // 0x0170(0x00C0)(HasGetValueTypeHash)
	TArray<struct FStruct_mInt>                   K2Node_MakeArray_Array_5;                          // 0x0230(0x0010)(ReferenceParm)
	struct FStruct_save                           K2Node_SetFieldsInStruct_StructOut;                // 0x0240(0x00C0)(HasGetValueTypeHash)
};
static_assert(alignof(Candle_C_GetData) == 0x000010, "Wrong alignment on Candle_C_GetData");
static_assert(sizeof(Candle_C_GetData) == 0x000300, "Wrong size on Candle_C_GetData");
static_assert(offsetof(Candle_C_GetData, Data) == 0x000000, "Member 'Candle_C_GetData::Data' has a wrong offset!");
static_assert(offsetof(Candle_C_GetData, K2Node_DynamicCast_AsInt_Objects) == 0x0000C0, "Member 'Candle_C_GetData::K2Node_DynamicCast_AsInt_Objects' has a wrong offset!");
static_assert(offsetof(Candle_C_GetData, K2Node_DynamicCast_bSuccess) == 0x0000D0, "Member 'Candle_C_GetData::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Candle_C_GetData, K2Node_MakeArray_Array) == 0x0000D8, "Member 'Candle_C_GetData::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Candle_C_GetData, CallFunc_getKey_key) == 0x0000E8, "Member 'Candle_C_GetData::CallFunc_getKey_key' has a wrong offset!");
static_assert(offsetof(Candle_C_GetData, K2Node_MakeStruct_struct_mFloat) == 0x0000F8, "Member 'Candle_C_GetData::K2Node_MakeStruct_struct_mFloat' has a wrong offset!");
static_assert(offsetof(Candle_C_GetData, K2Node_MakeArray_Array_1) == 0x000108, "Member 'Candle_C_GetData::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Candle_C_GetData, K2Node_MakeArray_Array_2) == 0x000118, "Member 'Candle_C_GetData::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(Candle_C_GetData, K2Node_MakeStruct_struct_mString) == 0x000128, "Member 'Candle_C_GetData::K2Node_MakeStruct_struct_mString' has a wrong offset!");
static_assert(offsetof(Candle_C_GetData, K2Node_MakeArray_Array_3) == 0x000138, "Member 'Candle_C_GetData::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(Candle_C_GetData, K2Node_MakeArray_Array_4) == 0x000148, "Member 'Candle_C_GetData::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(Candle_C_GetData, K2Node_MakeStruct_struct_mInt) == 0x000158, "Member 'Candle_C_GetData::K2Node_MakeStruct_struct_mInt' has a wrong offset!");
static_assert(offsetof(Candle_C_GetData, CallFunc_getData_data) == 0x000170, "Member 'Candle_C_GetData::CallFunc_getData_data' has a wrong offset!");
static_assert(offsetof(Candle_C_GetData, K2Node_MakeArray_Array_5) == 0x000230, "Member 'Candle_C_GetData::K2Node_MakeArray_Array_5' has a wrong offset!");
static_assert(offsetof(Candle_C_GetData, K2Node_SetFieldsInStruct_StructOut) == 0x000240, "Member 'Candle_C_GetData::K2Node_SetFieldsInStruct_StructOut' has a wrong offset!");

}

