#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ModActor

#include "Basic.hpp"

#include "ModActor_0_classes.hpp"
#include "ModActor_0_parameters.hpp"


namespace SDK
{

// Function ModActor.ModActor_C.SetPlayerPos
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PlayerID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Pos                                                    (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FRotator                         Rot                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AddendumActor::AddendumActor_C::SetPlayerPos(int32 PlayerID, const struct FTransform& Pos, const struct FRotator& Rot, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModActor_C", "SetPlayerPos");

	Params::ModActor_C_SetPlayerPos Parms{};

	Parms.PlayerID = PlayerID;
	Parms.Pos = std::move(Pos);
	Parms.Rot = std::move(Rot);

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function ModActor.ModActor_C.RemovePlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PlayerID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AddendumActor::AddendumActor_C::RemovePlayer(int32 PlayerID, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModActor_C", "RemovePlayer");

	Params::ModActor_C_RemovePlayer Parms{};

	Parms.PlayerID = PlayerID;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function ModActor.ModActor_C.SpawnPlayer
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           PlayerName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// int32                                   NewPlayerId                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AddendumActor::AddendumActor_C::SpawnPlayer(const class FString& PlayerName, const struct FTransform& Transform, int32* NewPlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModActor_C", "SpawnPlayer");

	Params::ModActor_C_SpawnPlayer Parms{};

	Parms.PlayerName = std::move(PlayerName);
	Parms.Transform = std::move(Transform);

	UObject::ProcessEvent(Func, &Parms);

	if (NewPlayerId != nullptr)
		*NewPlayerId = Parms.NewPlayerId;
}


// Function ModActor.ModActor_C.Lua_ModInit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ModName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class AddendumActor::AddendumActor_C*            ModActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ModFullName                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void AddendumActor::AddendumActor_C::Lua_ModInit(const class FString& ModName, class AddendumActor::AddendumActor_C** ModActor, class FString* ModFullName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModActor_C", "Lua_ModInit");

	Params::ModActor_C_Lua_ModInit Parms{};

	Parms.ModName = std::move(ModName);

	UObject::ProcessEvent(Func, &Parms);

	if (ModActor != nullptr)
		*ModActor = Parms.ModActor;

	if (ModFullName != nullptr)
		*ModFullName = std::move(Parms.ModFullName);
}


// Function ModActor.ModActor_C.Lua_RegisterHook
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           FunctionName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class AActor*                           FromActor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AddendumActor::AddendumActor_C::Lua_RegisterHook(const class FString& FunctionName, class AActor* FromActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModActor_C", "Lua_RegisterHook");

	Params::ModActor_C_Lua_RegisterHook Parms{};

	Parms.FunctionName = std::move(FunctionName);
	Parms.FromActor = FromActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ModActor.ModActor_C.InitializeMod
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AddendumActor::AddendumActor_C::InitializeMod()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModActor_C", "InitializeMod");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ModActor.ModActor_C.Lua_OnHook
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           FromActor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           FuncName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AddendumActor::AddendumActor_C::Lua_OnHook(class AActor* FromActor, const class FString& FuncName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModActor_C", "Lua_OnHook");

	Params::ModActor_C_Lua_OnHook Parms{};

	Parms.FromActor = FromActor;
	Parms.FuncName = std::move(FuncName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ModActor.ModActor_C.ExecuteUbergraph_ModActor
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AddendumActor::AddendumActor_C::ExecuteUbergraph_ModActor(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModActor_C", "ExecuteUbergraph_ModActor");

	Params::ModActor_C_ExecuteUbergraph_ModActor Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

