#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GroundHose

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "Actor_save_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass groundHose.groundHose_C
// 0x00E0 (0x0330 - 0x0250)
class AGroundHose_C final : public AActor_save_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_GroundHose_C;                       // 0x0250(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               Eff_waterHit;                                      // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Eff_water;                                         // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio;                                             // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Collect;                                           // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Pickup;                                            // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Points;                                            // 0x0288(0x0010)(Edit, BlueprintVisible)
	TArray<class USplineMeshComponent*>           SplineSegments;                                    // 0x0298(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	class AMainPlayer_C*                          Player;                                            // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Len;                                               // 0x02B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Lastloc;                                           // 0x02BC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Path;                                              // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max;                                               // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Connect;                                           // 0x02D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineMeshComponent*                   Endpart;                                           // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          DoCollect;                                         // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IgnoreFirstSpawn;                                  // 0x02E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_2EA[0x6];                                      // 0x02EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AFaucet_C*                              Faucet;                                            // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Moving;                                            // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AProp_sprinkler_C*                      Sprinkler;                                         // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ConnToFauc;                                        // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Faucet_key;                                        // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Sprinkler_key;                                     // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_groundHose(int32 EntryPoint);
	void GamemodePostKeys();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void PlayerR(class AMainPlayer_C* Player_0);
	void PlayerHold(class AMainPlayer_C* Player_0);
	void PlayerUnequip(class AMainPlayer_C* Player_0);
	void UpdateStrAgl();
	void DamageByPlayer(class AMainPlayer_C* Player_0, const struct FHitResult& Hit, float Damage);
	void Thrown(class AMainPlayer_C* Player_0);
	void broken_fire();
	void broken();
	void SendName(class FName Name_0);
	void Kicked(bool Kick);
	void Player_use(class AMainPlayer_C* Player_0, const struct FHitResult& Hit);
	void DriveDetached();
	void NewFunction_3();
	void NewFunction_2();
	void TexturePickerApply(class UUmg_texturePicker_C* Picker, class UTexture2D* Texture, int32 Index_0);
	void ApplyColor(const struct FLinearColor& Color);
	void PropRenderer_finishProps();
	void GamemodeMakeKeys();
	void AnyKey(const struct FKey& Key_0, bool Pressed);
	void GamemodePreLoad();
	void Unfocused();
	void SettingsApplied(const struct FStruct_settings& Settings);
	void Unfoc();
	void StuffUpgraded(class AMainGamemode_C* GameMode_0);
	void GamemodeBeginPlay();
	void SignalSaved();
	void SignalDeleted();
	void Gen();
	void AddPoint(bool Manual, const struct FVector& Point, bool Gen);
	void Finish();
	void Resume(class AProp_hose_C* Hose);
	void UpdEffect();
	void DetachSprinkler();
	void LandedOn(class AMainPlayer_C* Player_0, bool* IgnoreFallDamage);
	void CanBePutInContainer(bool* Return);
	void AsProp(class AProp_C** Return);
	void CanPickup(bool* Return);
	void NoRespawn(bool NoRespawn_0, bool* Return);
	void LookAt(class AMainPlayer_C* Player_0, const struct FHitResult& Hit, bool* Return, class FString* Text, class UPrimitiveComponent** boundObjectReplace, uint8* Number);
	void IsButtonUsed(bool* Failed);
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);
	void ActionOptionIndex(class AMainPlayer_C* Player_0, const struct FHitResult& Hit, Enum_interactionActions Action);
	void UserConstructionScript();
	void LoadData(const struct FStruct_save& Data, bool* Return);
	void GetData(struct FStruct_save* Data);
	void ProcessKeys(bool* Return);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"groundHose_C">();
	}
	static class AGroundHose_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGroundHose_C>();
	}
};
static_assert(alignof(AGroundHose_C) == 0x000008, "Wrong alignment on AGroundHose_C");
static_assert(sizeof(AGroundHose_C) == 0x000330, "Wrong size on AGroundHose_C");
static_assert(offsetof(AGroundHose_C, UberGraphFrame_GroundHose_C) == 0x000250, "Member 'AGroundHose_C::UberGraphFrame_GroundHose_C' has a wrong offset!");
static_assert(offsetof(AGroundHose_C, Eff_waterHit) == 0x000258, "Member 'AGroundHose_C::Eff_waterHit' has a wrong offset!");
static_assert(offsetof(AGroundHose_C, Eff_water) == 0x000260, "Member 'AGroundHose_C::Eff_water' has a wrong offset!");
static_assert(offsetof(AGroundHose_C, Audio) == 0x000268, "Member 'AGroundHose_C::Audio' has a wrong offset!");
static_assert(offsetof(AGroundHose_C, Collect) == 0x000270, "Member 'AGroundHose_C::Collect' has a wrong offset!");
static_assert(offsetof(AGroundHose_C, Pickup) == 0x000278, "Member 'AGroundHose_C::Pickup' has a wrong offset!");
static_assert(offsetof(AGroundHose_C, Spline) == 0x000280, "Member 'AGroundHose_C::Spline' has a wrong offset!");
static_assert(offsetof(AGroundHose_C, Points) == 0x000288, "Member 'AGroundHose_C::Points' has a wrong offset!");
static_assert(offsetof(AGroundHose_C, SplineSegments) == 0x000298, "Member 'AGroundHose_C::SplineSegments' has a wrong offset!");
static_assert(offsetof(AGroundHose_C, Player) == 0x0002A8, "Member 'AGroundHose_C::Player' has a wrong offset!");
static_assert(offsetof(AGroundHose_C, Len) == 0x0002B0, "Member 'AGroundHose_C::Len' has a wrong offset!");
static_assert(offsetof(AGroundHose_C, Lastloc) == 0x0002BC, "Member 'AGroundHose_C::Lastloc' has a wrong offset!");
static_assert(offsetof(AGroundHose_C, Path) == 0x0002C8, "Member 'AGroundHose_C::Path' has a wrong offset!");
static_assert(offsetof(AGroundHose_C, Max) == 0x0002CC, "Member 'AGroundHose_C::Max' has a wrong offset!");
static_assert(offsetof(AGroundHose_C, Connect) == 0x0002D0, "Member 'AGroundHose_C::Connect' has a wrong offset!");
static_assert(offsetof(AGroundHose_C, Endpart) == 0x0002E0, "Member 'AGroundHose_C::Endpart' has a wrong offset!");
static_assert(offsetof(AGroundHose_C, DoCollect) == 0x0002E8, "Member 'AGroundHose_C::DoCollect' has a wrong offset!");
static_assert(offsetof(AGroundHose_C, IgnoreFirstSpawn) == 0x0002E9, "Member 'AGroundHose_C::IgnoreFirstSpawn' has a wrong offset!");
static_assert(offsetof(AGroundHose_C, Faucet) == 0x0002F0, "Member 'AGroundHose_C::Faucet' has a wrong offset!");
static_assert(offsetof(AGroundHose_C, Moving) == 0x0002F8, "Member 'AGroundHose_C::Moving' has a wrong offset!");
static_assert(offsetof(AGroundHose_C, Sprinkler) == 0x000300, "Member 'AGroundHose_C::Sprinkler' has a wrong offset!");
static_assert(offsetof(AGroundHose_C, ConnToFauc) == 0x000308, "Member 'AGroundHose_C::ConnToFauc' has a wrong offset!");
static_assert(offsetof(AGroundHose_C, Faucet_key) == 0x000310, "Member 'AGroundHose_C::Faucet_key' has a wrong offset!");
static_assert(offsetof(AGroundHose_C, Sprinkler_key) == 0x000320, "Member 'AGroundHose_C::Sprinkler_key' has a wrong offset!");

}

