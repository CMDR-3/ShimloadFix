#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JSONParser

#include "Basic.hpp"

#include "JSONParser_classes.hpp"
#include "JSONParser_parameters.hpp"


namespace SDK
{

// Function JSONParser.JSONParserAsyncObjectToString.JsonObjectToFileAsync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FSJsonObject                     MainObject                                             (Parm, NativeAccessSpecifierPublic)
// EJSONDirectoryType                      DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    RemoveLineBreaks                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AddPadding                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UJSONParserAsyncObjectToString*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UJSONParserAsyncObjectToString* UJSONParserAsyncObjectToString::JsonObjectToFileAsync(const struct FSJsonObject& MainObject, EJSONDirectoryType DirectoryType, const class FString& FilePath, bool RemoveLineBreaks, bool AddPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserAsyncObjectToString", "JsonObjectToFileAsync");

	Params::JSONParserAsyncObjectToString_JsonObjectToFileAsync Parms{};

	Parms.MainObject = std::move(MainObject);
	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);
	Parms.RemoveLineBreaks = RemoveLineBreaks;
	Parms.AddPadding = AddPadding;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserAsyncObjectToString.JsonObjectToStringAsync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FSJsonObject                     MainObject                                             (Parm, NativeAccessSpecifierPublic)
// bool                                    RemoveLineBreaks                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AddPadding                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UJSONParserAsyncObjectToString*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UJSONParserAsyncObjectToString* UJSONParserAsyncObjectToString::JsonObjectToStringAsync(const struct FSJsonObject& MainObject, bool RemoveLineBreaks, bool AddPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserAsyncObjectToString", "JsonObjectToStringAsync");

	Params::JSONParserAsyncObjectToString_JsonObjectToStringAsync Parms{};

	Parms.MainObject = std::move(MainObject);
	Parms.RemoveLineBreaks = RemoveLineBreaks;
	Parms.AddPadding = AddPadding;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserAsyncStringToObject.JsonFileToObjectAsync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EJSONDirectoryType                      DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    RemoveAndSavePadding                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UJSONParserAsyncStringToObject*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UJSONParserAsyncStringToObject* UJSONParserAsyncStringToObject::JsonFileToObjectAsync(EJSONDirectoryType DirectoryType, const class FString& FilePath, bool RemoveAndSavePadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserAsyncStringToObject", "JsonFileToObjectAsync");

	Params::JSONParserAsyncStringToObject_JsonFileToObjectAsync Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);
	Parms.RemoveAndSavePadding = RemoveAndSavePadding;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserAsyncStringToObject.JsonStringToObjectAsync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Json                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    RemoveAndSavePadding                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UJSONParserAsyncStringToObject*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UJSONParserAsyncStringToObject* UJSONParserAsyncStringToObject::JsonStringToObjectAsync(const class FString& Json, bool RemoveAndSavePadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserAsyncStringToObject", "JsonStringToObjectAsync");

	Params::JSONParserAsyncStringToObject_JsonStringToObjectAsync Parms{};

	Parms.Json = std::move(Json);
	Parms.RemoveAndSavePadding = RemoveAndSavePadding;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.AddMapBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<class FString, bool>               Map                                                    (Parm, NativeAccessSpecifierPublic)
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, bool>               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, bool> UJSONParserBPLibrary::AddMapBool(const TMap<class FString, bool>& Map, const class FString& Key, bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "AddMapBool");

	Params::JSONParserBPLibrary_AddMapBool Parms{};

	Parms.Map = std::move(Map);
	Parms.Key = std::move(Key);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.AddMapNumber
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<class FString, float>              Map                                                    (Parm, NativeAccessSpecifierPublic)
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, float>              ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, float> UJSONParserBPLibrary::AddMapNumber(const TMap<class FString, float>& Map, const class FString& Key, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "AddMapNumber");

	Params::JSONParserBPLibrary_AddMapNumber Parms{};

	Parms.Map = std::move(Map);
	Parms.Key = std::move(Key);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.AddMapObject
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<class FString, struct FSJsonObject>Map                                                    (Parm, NativeAccessSpecifierPublic)
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSJsonObject                     Value                                                  (Parm, NativeAccessSpecifierPublic)
// TMap<class FString, struct FSJsonObject>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, struct FSJsonObject> UJSONParserBPLibrary::AddMapObject(const TMap<class FString, struct FSJsonObject>& Map, const class FString& Key, const struct FSJsonObject& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "AddMapObject");

	Params::JSONParserBPLibrary_AddMapObject Parms{};

	Parms.Map = std::move(Map);
	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.AddMapString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<class FString, class FString>      Map                                                    (Parm, NativeAccessSpecifierPublic)
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, class FString> UJSONParserBPLibrary::AddMapString(const TMap<class FString, class FString>& Map, const class FString& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "AddMapString");

	Params::JSONParserBPLibrary_AddMapString Parms{};

	Parms.Map = std::move(Map);
	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.base64StringToFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EJSONDirectoryType                      DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           base64String                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJSONParserBPLibrary::base64StringToFile(EJSONDirectoryType DirectoryType, const class FString& base64String, const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "base64StringToFile");

	Params::JSONParserBPLibrary_base64StringToFile Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.base64String = std::move(base64String);
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.BreakJson_Object
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSJsonObject                     JsonObject                                             (ConstParm, Parm, NativeAccessSpecifierPublic)
// TMap<class FString, struct FSJsonObject>ObjectMap                                              (Parm, OutParm, NativeAccessSpecifierPublic)
// TMap<class FString, bool>               BoolMap                                                (Parm, OutParm, NativeAccessSpecifierPublic)
// TMap<class FString, float>              NumberMap                                              (Parm, OutParm, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      StringMap                                              (Parm, OutParm, NativeAccessSpecifierPublic)
// TArray<struct FSJsonObject>             ObjectArray                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<bool>                            BoolArray                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<float>                           NumberArray                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class FString>                   StringArray                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UJSONParserBPLibrary::BreakJson_Object(const struct FSJsonObject& JsonObject, TMap<class FString, struct FSJsonObject>* ObjectMap, TMap<class FString, bool>* BoolMap, TMap<class FString, float>* NumberMap, TMap<class FString, class FString>* StringMap, TArray<struct FSJsonObject>* ObjectArray, TArray<bool>* BoolArray, TArray<float>* NumberArray, TArray<class FString>* StringArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "BreakJson_Object");

	Params::JSONParserBPLibrary_BreakJson_Object Parms{};

	Parms.JsonObject = std::move(JsonObject);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ObjectMap != nullptr)
		*ObjectMap = std::move(Parms.ObjectMap);

	if (BoolMap != nullptr)
		*BoolMap = std::move(Parms.BoolMap);

	if (NumberMap != nullptr)
		*NumberMap = std::move(Parms.NumberMap);

	if (StringMap != nullptr)
		*StringMap = std::move(Parms.StringMap);

	if (ObjectArray != nullptr)
		*ObjectArray = std::move(Parms.ObjectArray);

	if (BoolArray != nullptr)
		*BoolArray = std::move(Parms.BoolArray);

	if (NumberArray != nullptr)
		*NumberArray = std::move(Parms.NumberArray);

	if (StringArray != nullptr)
		*StringArray = std::move(Parms.StringArray);
}


// Function JSONParser.JSONParserBPLibrary.BreakMixedJSONArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSJsonObject                     JsonObject                                             (ConstParm, Parm, NativeAccessSpecifierPublic)
// int32                                   LastIndex                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EJsonDataType                           Type                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSJsonObject                     Object                                                 (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    Bool                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Number                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           String                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJSONParserBPLibrary::BreakMixedJSONArray(const int32 Index_0, const struct FSJsonObject& JsonObject, int32* LastIndex, EJsonDataType* Type, struct FSJsonObject* Object, bool* Bool, float* Number, class FString* String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "BreakMixedJSONArray");

	Params::JSONParserBPLibrary_BreakMixedJSONArray Parms{};

	Parms.Index_0 = Index_0;
	Parms.JsonObject = std::move(JsonObject);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (LastIndex != nullptr)
		*LastIndex = Parms.LastIndex;

	if (Type != nullptr)
		*Type = Parms.Type;

	if (Object != nullptr)
		*Object = std::move(Parms.Object);

	if (Bool != nullptr)
		*Bool = Parms.Bool;

	if (Number != nullptr)
		*Number = Parms.Number;

	if (String != nullptr)
		*String = std::move(Parms.String);
}


// Function JSONParser.JSONParserBPLibrary.byteArrayToString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<uint8>                           ByteArray                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJSONParserBPLibrary::byteArrayToString(const TArray<uint8>& ByteArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "byteArrayToString");

	Params::JSONParserBPLibrary_byteArrayToString Parms{};

	Parms.ByteArray = std::move(ByteArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.ChangeMapBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<class FString, bool>               Map                                                    (Parm, NativeAccessSpecifierPublic)
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, bool>               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, bool> UJSONParserBPLibrary::ChangeMapBool(const TMap<class FString, bool>& Map, const class FString& Key, bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "ChangeMapBool");

	Params::JSONParserBPLibrary_ChangeMapBool Parms{};

	Parms.Map = std::move(Map);
	Parms.Key = std::move(Key);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.ChangeMapNumber
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<class FString, float>              Map                                                    (Parm, NativeAccessSpecifierPublic)
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, float>              ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, float> UJSONParserBPLibrary::ChangeMapNumber(const TMap<class FString, float>& Map, const class FString& Key, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "ChangeMapNumber");

	Params::JSONParserBPLibrary_ChangeMapNumber Parms{};

	Parms.Map = std::move(Map);
	Parms.Key = std::move(Key);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.ChangeMapObject
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<class FString, struct FSJsonObject>Map                                                    (Parm, NativeAccessSpecifierPublic)
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSJsonObject                     Value                                                  (Parm, NativeAccessSpecifierPublic)
// TMap<class FString, struct FSJsonObject>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, struct FSJsonObject> UJSONParserBPLibrary::ChangeMapObject(const TMap<class FString, struct FSJsonObject>& Map, const class FString& Key, const struct FSJsonObject& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "ChangeMapObject");

	Params::JSONParserBPLibrary_ChangeMapObject Parms{};

	Parms.Map = std::move(Map);
	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.ChangeMapString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<class FString, class FString>      Map                                                    (Parm, NativeAccessSpecifierPublic)
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, class FString> UJSONParserBPLibrary::ChangeMapString(const TMap<class FString, class FString>& Map, const class FString& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "ChangeMapString");

	Params::JSONParserBPLibrary_ChangeMapString Parms{};

	Parms.Map = std::move(Map);
	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.compressData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EJsonCompressFormat                     Format                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           UncompressedData                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<uint8>                           CompressedData                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   CompressedDataSize                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UncompressedDataSize                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJSONParserBPLibrary::CompressData(EJsonCompressFormat Format, const TArray<uint8>& UncompressedData, TArray<uint8>* CompressedData, int32* CompressedDataSize, int32* UncompressedDataSize, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "compressData");

	Params::JSONParserBPLibrary_CompressData Parms{};

	Parms.Format = Format;
	Parms.UncompressedData = std::move(UncompressedData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CompressedData != nullptr)
		*CompressedData = std::move(Parms.CompressedData);

	if (CompressedDataSize != nullptr)
		*CompressedDataSize = Parms.CompressedDataSize;

	if (UncompressedDataSize != nullptr)
		*UncompressedDataSize = Parms.UncompressedDataSize;

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function JSONParser.JSONParserBPLibrary.CreateFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EJSONDirectoryType                      DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJSONParserBPLibrary::CreateFile(EJSONDirectoryType DirectoryType, const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "CreateFile");

	Params::JSONParserBPLibrary_CreateFile Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.DeleteFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EJSONDirectoryType                      DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJSONParserBPLibrary::DeleteFile(EJSONDirectoryType DirectoryType, const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "DeleteFile");

	Params::JSONParserBPLibrary_DeleteFile Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.dirExists
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EJSONDirectoryType                      DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJSONParserBPLibrary::DirExists(EJSONDirectoryType DirectoryType, const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "dirExists");

	Params::JSONParserBPLibrary_DirExists Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.fileExists
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EJSONDirectoryType                      DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJSONParserBPLibrary::FileExists(EJSONDirectoryType DirectoryType, const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "fileExists");

	Params::JSONParserBPLibrary_FileExists Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.fileToBase64String
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EJSONDirectoryType                      DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           base64String                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJSONParserBPLibrary::FileToBase64String(EJSONDirectoryType DirectoryType, const class FString& FilePath, class FString* base64String, class FString* Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "fileToBase64String");

	Params::JSONParserBPLibrary_FileToBase64String Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (base64String != nullptr)
		*base64String = std::move(Parms.base64String);

	if (Filename != nullptr)
		*Filename = std::move(Parms.Filename);
}


// Function JSONParser.JSONParserBPLibrary.FillStructWithJson
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           StructID                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSJsonObject                     Json                                                   (Parm, NativeAccessSpecifierPublic)

void UJSONParserBPLibrary::FillStructWithJson(const class FString& StructID, const struct FSJsonObject& Json)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "FillStructWithJson");

	Params::JSONParserBPLibrary_FillStructWithJson Parms{};

	Parms.StructID = std::move(StructID);
	Parms.Json = std::move(Json);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JSONParser.JSONParserBPLibrary.JsonObjectToRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FSJsonObject                     JsonObject                                             (Parm, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UJSONParserBPLibrary::JsonObjectToRotator(const struct FSJsonObject& JsonObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "JsonObjectToRotator");

	Params::JSONParserBPLibrary_JsonObjectToRotator Parms{};

	Parms.JsonObject = std::move(JsonObject);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.JsonObjectToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    Successful                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSJsonObject                     MainObject                                             (Parm, NativeAccessSpecifierPublic)
// bool                                    RemoveLineBreaks                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AddPadding                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJSONParserBPLibrary::JsonObjectToString(bool* Successful, const struct FSJsonObject& MainObject, bool RemoveLineBreaks, bool AddPadding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "JsonObjectToString");

	Params::JSONParserBPLibrary_JsonObjectToString Parms{};

	Parms.MainObject = std::move(MainObject);
	Parms.RemoveLineBreaks = RemoveLineBreaks;
	Parms.AddPadding = AddPadding;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Successful != nullptr)
		*Successful = Parms.Successful;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.JsonObjectToTransform
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FSJsonObject                     JsonObject                                             (Parm, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform UJSONParserBPLibrary::JsonObjectToTransform(const struct FSJsonObject& JsonObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "JsonObjectToTransform");

	Params::JSONParserBPLibrary_JsonObjectToTransform Parms{};

	Parms.JsonObject = std::move(JsonObject);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.JsonObjectToVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FSJsonObject                     JsonObject                                             (Parm, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UJSONParserBPLibrary::JsonObjectToVector(const struct FSJsonObject& JsonObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "JsonObjectToVector");

	Params::JSONParserBPLibrary_JsonObjectToVector Parms{};

	Parms.JsonObject = std::move(JsonObject);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.JsonStringToObject
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Json                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    RemoveAndSavePadding                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Successful                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSJsonObject                     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSJsonObject UJSONParserBPLibrary::JsonStringToObject(const class FString& Json, bool RemoveAndSavePadding, bool* Successful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "JsonStringToObject");

	Params::JSONParserBPLibrary_JsonStringToObject Parms{};

	Parms.Json = std::move(Json);
	Parms.RemoveAndSavePadding = RemoveAndSavePadding;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Successful != nullptr)
		*Successful = Parms.Successful;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.MakeBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJSONParserBPLibrary::MakeBool(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "MakeBool");

	Params::JSONParserBPLibrary_MakeBool Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.MakeJson_Object
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TMap<class FString, struct FSJsonObject>ObjectMap                                              (Parm, NativeAccessSpecifierPublic)
// TMap<class FString, bool>               BoolMap                                                (Parm, NativeAccessSpecifierPublic)
// TMap<class FString, float>              NumberMap                                              (Parm, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      StringMap                                              (Parm, NativeAccessSpecifierPublic)
// TArray<struct FSJsonObject>             ObjectArray                                            (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<bool>                            BoolArray                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<float>                           NumberArray                                            (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class FString>                   StringArray                                            (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FSJsonObject                     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSJsonObject UJSONParserBPLibrary::MakeJson_Object(const TMap<class FString, struct FSJsonObject>& ObjectMap, const TMap<class FString, bool>& BoolMap, const TMap<class FString, float>& NumberMap, const TMap<class FString, class FString>& StringMap, const TArray<struct FSJsonObject>& ObjectArray, const TArray<bool>& BoolArray, const TArray<float>& NumberArray, const TArray<class FString>& StringArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "MakeJson_Object");

	Params::JSONParserBPLibrary_MakeJson_Object Parms{};

	Parms.ObjectMap = std::move(ObjectMap);
	Parms.BoolMap = std::move(BoolMap);
	Parms.NumberMap = std::move(NumberMap);
	Parms.StringMap = std::move(StringMap);
	Parms.ObjectArray = std::move(ObjectArray);
	Parms.BoolArray = std::move(BoolArray);
	Parms.NumberArray = std::move(NumberArray);
	Parms.StringArray = std::move(StringArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.MakeMapBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, bool>               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, bool> UJSONParserBPLibrary::MakeMapBool(const class FString& Key, bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "MakeMapBool");

	Params::JSONParserBPLibrary_MakeMapBool Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.MakeMapNumber
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, float>              ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, float> UJSONParserBPLibrary::MakeMapNumber(const class FString& Key, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "MakeMapNumber");

	Params::JSONParserBPLibrary_MakeMapNumber Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.MakeMapObject
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSJsonObject                     Value                                                  (Parm, NativeAccessSpecifierPublic)
// TMap<class FString, struct FSJsonObject>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, struct FSJsonObject> UJSONParserBPLibrary::MakeMapObject(const class FString& Key, const struct FSJsonObject& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "MakeMapObject");

	Params::JSONParserBPLibrary_MakeMapObject Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.MakeMapString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, class FString> UJSONParserBPLibrary::MakeMapString(const class FString& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "MakeMapString");

	Params::JSONParserBPLibrary_MakeMapString Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.MakeMixedJSONArray
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FSJsonObject                     OldJSONMixedArray                                      (ConstParm, Parm, NativeAccessSpecifierPublic)
// EJsonDataType                           ChooseOneType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSJsonObject                     Object                                                 (Parm, NativeAccessSpecifierPublic)
// bool                                    Bool                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Number                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSJsonObject                     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSJsonObject UJSONParserBPLibrary::MakeMixedJSONArray(const struct FSJsonObject& OldJSONMixedArray, EJsonDataType ChooseOneType, const struct FSJsonObject& Object, bool Bool, float Number, const class FString& String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "MakeMixedJSONArray");

	Params::JSONParserBPLibrary_MakeMixedJSONArray Parms{};

	Parms.OldJSONMixedArray = std::move(OldJSONMixedArray);
	Parms.ChooseOneType = ChooseOneType;
	Parms.Object = std::move(Object);
	Parms.Bool = Bool;
	Parms.Number = Number;
	Parms.String = std::move(String);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.MakeNumber
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UJSONParserBPLibrary::MakeNumber(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "MakeNumber");

	Params::JSONParserBPLibrary_MakeNumber Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.MakeString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJSONParserBPLibrary::MakeString(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "MakeString");

	Params::JSONParserBPLibrary_MakeString Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.PrepareStructToFillItWithJson
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStruct*                          Struct                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJSONParserBPLibrary::PrepareStructToFillItWithJson(class UStruct* Struct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "PrepareStructToFillItWithJson");

	Params::JSONParserBPLibrary_PrepareStructToFillItWithJson Parms{};

	Parms.Struct = Struct;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.ReadBytesFromFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EJSONDirectoryType                      DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           bytes                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UJSONParserBPLibrary::ReadBytesFromFile(EJSONDirectoryType DirectoryType, const class FString& FilePath, TArray<uint8>* bytes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "ReadBytesFromFile");

	Params::JSONParserBPLibrary_ReadBytesFromFile Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bytes != nullptr)
		*bytes = std::move(Parms.bytes);
}


// Function JSONParser.JSONParserBPLibrary.ReadStringFromFile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EJSONDirectoryType                      DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           JSON_String                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJSONParserBPLibrary::ReadStringFromFile(EJSONDirectoryType DirectoryType, const class FString& FilePath, class FString* JSON_String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "ReadStringFromFile");

	Params::JSONParserBPLibrary_ReadStringFromFile Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (JSON_String != nullptr)
		*JSON_String = std::move(Parms.JSON_String);

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.RotatorToJsonObject
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         Rotator                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FSJsonObject                     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSJsonObject UJSONParserBPLibrary::RotatorToJsonObject(const struct FRotator& Rotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "RotatorToJsonObject");

	Params::JSONParserBPLibrary_RotatorToJsonObject Parms{};

	Parms.Rotator = std::move(Rotator);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.setStructJsonSettings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EJSONJsonStructMapSetting               Map                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJSONParserBPLibrary::SetStructJsonSettings(EJSONJsonStructMapSetting Map)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "setStructJsonSettings");

	Params::JSONParserBPLibrary_SetStructJsonSettings Parms{};

	Parms.Map = Map;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JSONParser.JSONParserBPLibrary.stringToByteArray
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<uint8> UJSONParserBPLibrary::StringToByteArray(const class FString& String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "stringToByteArray");

	Params::JSONParserBPLibrary_StringToByteArray Parms{};

	Parms.String = std::move(String);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.StructToJsonObject
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UStruct*                          Struct                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSJsonObject                     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSJsonObject UJSONParserBPLibrary::StructToJsonObject(class UStruct* Struct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "StructToJsonObject");

	Params::JSONParserBPLibrary_StructToJsonObject Parms{};

	Parms.Struct = Struct;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.TransformToJsonObject
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       Transform                                              (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FSJsonObject                     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSJsonObject UJSONParserBPLibrary::TransformToJsonObject(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "TransformToJsonObject");

	Params::JSONParserBPLibrary_TransformToJsonObject Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.uncompressData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EJsonCompressFormat                     Format                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UncompressedDataSize                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           CompressedData                                         (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<uint8>                           UncompressedData                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJSONParserBPLibrary::UncompressData(EJsonCompressFormat Format, int32 UncompressedDataSize, const TArray<uint8>& CompressedData, TArray<uint8>* UncompressedData, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "uncompressData");

	Params::JSONParserBPLibrary_UncompressData Parms{};

	Parms.Format = Format;
	Parms.UncompressedDataSize = UncompressedDataSize;
	Parms.CompressedData = std::move(CompressedData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (UncompressedData != nullptr)
		*UncompressedData = std::move(Parms.UncompressedData);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function JSONParser.JSONParserBPLibrary.VectorToJsonObject
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Vector                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSJsonObject                     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSJsonObject UJSONParserBPLibrary::VectorToJsonObject(const struct FVector& Vector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "VectorToJsonObject");

	Params::JSONParserBPLibrary_VectorToJsonObject Parms{};

	Parms.Vector = std::move(Vector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.WriteBytesToFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EJSONDirectoryType                      DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           bytes                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJSONParserBPLibrary::WriteBytesToFile(EJSONDirectoryType DirectoryType, const TArray<uint8>& bytes, const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "WriteBytesToFile");

	Params::JSONParserBPLibrary_WriteBytesToFile Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.bytes = std::move(bytes);
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JSONParser.JSONParserBPLibrary.WriteStringToFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EJSONDirectoryType                      DirectoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           JSON_String                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FilePath                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJSONParserBPLibrary::WriteStringToFile(EJSONDirectoryType DirectoryType, const class FString& JSON_String, const class FString& FilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JSONParserBPLibrary", "WriteStringToFile");

	Params::JSONParserBPLibrary_WriteStringToFile Parms{};

	Parms.DirectoryType = DirectoryType;
	Parms.JSON_String = std::move(JSON_String);
	Parms.FilePath = std::move(FilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

