#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Umg_disclaimer

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function umg_disclaimer.umg_disclaimer_C.Tick
// 0x003C (0x003C - 0x0000)
struct Umg_disclaimer_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Umg_disclaimer_C_Tick) == 0x000004, "Wrong alignment on Umg_disclaimer_C_Tick");
static_assert(sizeof(Umg_disclaimer_C_Tick) == 0x00003C, "Wrong size on Umg_disclaimer_C_Tick");
static_assert(offsetof(Umg_disclaimer_C_Tick, MyGeometry) == 0x000000, "Member 'Umg_disclaimer_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(Umg_disclaimer_C_Tick, InDeltaTime) == 0x000038, "Member 'Umg_disclaimer_C_Tick::InDeltaTime' has a wrong offset!");

// Function umg_disclaimer.umg_disclaimer_C.ExecuteUbergraph_umg_disclaimer
// 0x0054 (0x0054 - 0x0000)
struct Umg_disclaimer_C_ExecuteUbergraph_umg_disclaimer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatMinusEquals_FloatOut;         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Umg_disclaimer_C_ExecuteUbergraph_umg_disclaimer) == 0x000004, "Wrong alignment on Umg_disclaimer_C_ExecuteUbergraph_umg_disclaimer");
static_assert(sizeof(Umg_disclaimer_C_ExecuteUbergraph_umg_disclaimer) == 0x000054, "Wrong size on Umg_disclaimer_C_ExecuteUbergraph_umg_disclaimer");
static_assert(offsetof(Umg_disclaimer_C_ExecuteUbergraph_umg_disclaimer, EntryPoint) == 0x000000, "Member 'Umg_disclaimer_C_ExecuteUbergraph_umg_disclaimer::EntryPoint' has a wrong offset!");
static_assert(offsetof(Umg_disclaimer_C_ExecuteUbergraph_umg_disclaimer, K2Node_Event_MyGeometry) == 0x000004, "Member 'Umg_disclaimer_C_ExecuteUbergraph_umg_disclaimer::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(Umg_disclaimer_C_ExecuteUbergraph_umg_disclaimer, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'Umg_disclaimer_C_ExecuteUbergraph_umg_disclaimer::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(Umg_disclaimer_C_ExecuteUbergraph_umg_disclaimer, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000040, "Member 'Umg_disclaimer_C_ExecuteUbergraph_umg_disclaimer::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_disclaimer_C_ExecuteUbergraph_umg_disclaimer, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000041, "Member 'Umg_disclaimer_C_ExecuteUbergraph_umg_disclaimer::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_disclaimer_C_ExecuteUbergraph_umg_disclaimer, CallFunc_SelectFloat_ReturnValue) == 0x000044, "Member 'Umg_disclaimer_C_ExecuteUbergraph_umg_disclaimer::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_disclaimer_C_ExecuteUbergraph_umg_disclaimer, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000048, "Member 'Umg_disclaimer_C_ExecuteUbergraph_umg_disclaimer::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Umg_disclaimer_C_ExecuteUbergraph_umg_disclaimer, CallFunc_VictoryFloatMinusEquals_FloatOut) == 0x00004C, "Member 'Umg_disclaimer_C_ExecuteUbergraph_umg_disclaimer::CallFunc_VictoryFloatMinusEquals_FloatOut' has a wrong offset!");
static_assert(offsetof(Umg_disclaimer_C_ExecuteUbergraph_umg_disclaimer, CallFunc_FClamp_ReturnValue) == 0x000050, "Member 'Umg_disclaimer_C_ExecuteUbergraph_umg_disclaimer::CallFunc_FClamp_ReturnValue' has a wrong offset!");

}

