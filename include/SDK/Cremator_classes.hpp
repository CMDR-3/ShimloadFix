#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Cremator

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "Actor_save_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass cremator.cremator_C
// 0x0148 (0x0398 - 0x0250)
class ACremator_C final : public AActor_save_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Cremator_C;                         // 0x0250(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UArrowComponent*                        ThrowAwayGarb;                                     // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Knockback;                                         // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CrematorDoorSqueak;                                // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CrematorDoorClose4;                                // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CrematorDoorClose3;                                // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CrematorDoorClose2;                                // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CrematorDoorClose1;                                // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CrematorDoorClose;                                 // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Gascan_outCheck;                                   // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          burning;                                           // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            PhysicsConstraint;                                 // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Info;                                              // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Handle;                                            // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Gascan;                                            // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          GasValve;                                          // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   Firelight;                                         // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    All;                                               // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio_pour;                                        // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio_burn;                                        // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   GasPlace;                                          // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Eff_fuel;                                          // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        CloseArrow;                                        // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Door;                                              // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Body;                                              // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HandleLimeline_a_7230965B498F9A965D1173820917C244; // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            HandleLimeline__Direction_7230965B498F9A965D1173820917C244; // 0x031C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31D[0x3];                                      // 0x031D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     HandleLimeline;                                    // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_329[0x3];                                      // 0x0329(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GasAmount;                                         // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Windup;                                            // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AProp_gascan_C*                         GasCanObject;                                      // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Pouring;                                           // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          LookingAt_info;                                    // 0x0341(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LookingAt_handle;                                  // 0x0342(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LookingAt_gascan;                                  // 0x0343(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LookingAt_valve;                                   // 0x0344(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_345[0x3];                                      // 0x0345(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AProp_C*                                DoorObject;                                        // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Anim;                                              // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsClosed;                                          // 0x0351(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_352[0x6];                                      // 0x0352(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Actors;                                            // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<float>                                 Health;                                            // 0x0368(0x0010)(Edit, BlueprintVisible)
	TArray<float>                                 GiveFuel;                                          // 0x0378(0x0010)(Edit, BlueprintVisible)
	struct FTimerHandle                           Timer;                                             // 0x0388(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ClosedSnd;                                         // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void LandedOn(class AMainPlayer_C* Player, bool* IgnoreFallDamage);
	void IsButtonUsed(bool* Failed);
	void LookAt(class AMainPlayer_C* Player, const struct FHitResult& Hit, bool* Return, class FString* Text, class UPrimitiveComponent** boundObjectReplace, uint8* Number);
	void NoRespawn(bool NoRespawn_0, bool* Return);
	void CanPickup(bool* Return);
	void AsProp(class AProp_C** Return);
	void CanBePutInContainer(bool* Return);
	void GetData(struct FStruct_save* Data);
	void LoadData(const struct FStruct_save& Data, bool* Return);
	void PlayLoudAsFuck(float InputPin);
	void UpdPour();
	void CalcFlamability(class UPhysicalMaterial* Self2, float* Flamability, float* FuelMultiply);
	void FinishBurning();
	void SetupBurning();
	void Upd();
	void SetClosed(bool Close);
	void GetActionOptions(class AMainPlayer_C* Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay, uint8* Number);
	class FString GetGasCanFuel();
	void HandleLimeline__FinishedFunc();
	void HandleLimeline__UpdateFunc();
	void DriveDetached();
	void Player_use(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Kicked(bool Kick);
	void SendName(class FName Name_0);
	void broken();
	void broken_fire();
	void Thrown(class AMainPlayer_C* Player);
	void DamageByPlayer(class AMainPlayer_C* Player, const struct FHitResult& Hit, float Damage);
	void UpdateStrAgl();
	void PlayerUnequip(class AMainPlayer_C* Player);
	void PlayerHold(class AMainPlayer_C* Player);
	void PlayerR(class AMainPlayer_C* Player);
	void ActionOptionIndex(class AMainPlayer_C* Player, const struct FHitResult& Hit, Enum_interactionActions Action);
	void ReceiveBeginPlay();
	void RewindHandle();
	void ReceiveTick(float DeltaSeconds);
	void IgniteInside();
	void BndEvt__cremator_gascan_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__cremator_gascan_outCheck_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void PickedUp();
	void RemoveTrash();
	void FunnyClose();
	void UseLever();
	void ExecuteUbergraph_cremator(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"cremator_C">();
	}
	static class ACremator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACremator_C>();
	}
};
static_assert(alignof(ACremator_C) == 0x000008, "Wrong alignment on ACremator_C");
static_assert(sizeof(ACremator_C) == 0x000398, "Wrong size on ACremator_C");
static_assert(offsetof(ACremator_C, UberGraphFrame_Cremator_C) == 0x000250, "Member 'ACremator_C::UberGraphFrame_Cremator_C' has a wrong offset!");
static_assert(offsetof(ACremator_C, ThrowAwayGarb) == 0x000258, "Member 'ACremator_C::ThrowAwayGarb' has a wrong offset!");
static_assert(offsetof(ACremator_C, Knockback) == 0x000260, "Member 'ACremator_C::Knockback' has a wrong offset!");
static_assert(offsetof(ACremator_C, CrematorDoorSqueak) == 0x000268, "Member 'ACremator_C::CrematorDoorSqueak' has a wrong offset!");
static_assert(offsetof(ACremator_C, CrematorDoorClose4) == 0x000270, "Member 'ACremator_C::CrematorDoorClose4' has a wrong offset!");
static_assert(offsetof(ACremator_C, CrematorDoorClose3) == 0x000278, "Member 'ACremator_C::CrematorDoorClose3' has a wrong offset!");
static_assert(offsetof(ACremator_C, CrematorDoorClose2) == 0x000280, "Member 'ACremator_C::CrematorDoorClose2' has a wrong offset!");
static_assert(offsetof(ACremator_C, CrematorDoorClose1) == 0x000288, "Member 'ACremator_C::CrematorDoorClose1' has a wrong offset!");
static_assert(offsetof(ACremator_C, CrematorDoorClose) == 0x000290, "Member 'ACremator_C::CrematorDoorClose' has a wrong offset!");
static_assert(offsetof(ACremator_C, Gascan_outCheck) == 0x000298, "Member 'ACremator_C::Gascan_outCheck' has a wrong offset!");
static_assert(offsetof(ACremator_C, burning) == 0x0002A0, "Member 'ACremator_C::burning' has a wrong offset!");
static_assert(offsetof(ACremator_C, PhysicsConstraint) == 0x0002A8, "Member 'ACremator_C::PhysicsConstraint' has a wrong offset!");
static_assert(offsetof(ACremator_C, Info) == 0x0002B0, "Member 'ACremator_C::Info' has a wrong offset!");
static_assert(offsetof(ACremator_C, Handle) == 0x0002B8, "Member 'ACremator_C::Handle' has a wrong offset!");
static_assert(offsetof(ACremator_C, Gascan) == 0x0002C0, "Member 'ACremator_C::Gascan' has a wrong offset!");
static_assert(offsetof(ACremator_C, GasValve) == 0x0002C8, "Member 'ACremator_C::GasValve' has a wrong offset!");
static_assert(offsetof(ACremator_C, Firelight) == 0x0002D0, "Member 'ACremator_C::Firelight' has a wrong offset!");
static_assert(offsetof(ACremator_C, All) == 0x0002D8, "Member 'ACremator_C::All' has a wrong offset!");
static_assert(offsetof(ACremator_C, Audio_pour) == 0x0002E0, "Member 'ACremator_C::Audio_pour' has a wrong offset!");
static_assert(offsetof(ACremator_C, Audio_burn) == 0x0002E8, "Member 'ACremator_C::Audio_burn' has a wrong offset!");
static_assert(offsetof(ACremator_C, GasPlace) == 0x0002F0, "Member 'ACremator_C::GasPlace' has a wrong offset!");
static_assert(offsetof(ACremator_C, Eff_fuel) == 0x0002F8, "Member 'ACremator_C::Eff_fuel' has a wrong offset!");
static_assert(offsetof(ACremator_C, CloseArrow) == 0x000300, "Member 'ACremator_C::CloseArrow' has a wrong offset!");
static_assert(offsetof(ACremator_C, Door) == 0x000308, "Member 'ACremator_C::Door' has a wrong offset!");
static_assert(offsetof(ACremator_C, Body) == 0x000310, "Member 'ACremator_C::Body' has a wrong offset!");
static_assert(offsetof(ACremator_C, HandleLimeline_a_7230965B498F9A965D1173820917C244) == 0x000318, "Member 'ACremator_C::HandleLimeline_a_7230965B498F9A965D1173820917C244' has a wrong offset!");
static_assert(offsetof(ACremator_C, HandleLimeline__Direction_7230965B498F9A965D1173820917C244) == 0x00031C, "Member 'ACremator_C::HandleLimeline__Direction_7230965B498F9A965D1173820917C244' has a wrong offset!");
static_assert(offsetof(ACremator_C, HandleLimeline) == 0x000320, "Member 'ACremator_C::HandleLimeline' has a wrong offset!");
static_assert(offsetof(ACremator_C, IsActive) == 0x000328, "Member 'ACremator_C::IsActive' has a wrong offset!");
static_assert(offsetof(ACremator_C, GasAmount) == 0x00032C, "Member 'ACremator_C::GasAmount' has a wrong offset!");
static_assert(offsetof(ACremator_C, Windup) == 0x000330, "Member 'ACremator_C::Windup' has a wrong offset!");
static_assert(offsetof(ACremator_C, GasCanObject) == 0x000338, "Member 'ACremator_C::GasCanObject' has a wrong offset!");
static_assert(offsetof(ACremator_C, Pouring) == 0x000340, "Member 'ACremator_C::Pouring' has a wrong offset!");
static_assert(offsetof(ACremator_C, LookingAt_info) == 0x000341, "Member 'ACremator_C::LookingAt_info' has a wrong offset!");
static_assert(offsetof(ACremator_C, LookingAt_handle) == 0x000342, "Member 'ACremator_C::LookingAt_handle' has a wrong offset!");
static_assert(offsetof(ACremator_C, LookingAt_gascan) == 0x000343, "Member 'ACremator_C::LookingAt_gascan' has a wrong offset!");
static_assert(offsetof(ACremator_C, LookingAt_valve) == 0x000344, "Member 'ACremator_C::LookingAt_valve' has a wrong offset!");
static_assert(offsetof(ACremator_C, DoorObject) == 0x000348, "Member 'ACremator_C::DoorObject' has a wrong offset!");
static_assert(offsetof(ACremator_C, Anim) == 0x000350, "Member 'ACremator_C::Anim' has a wrong offset!");
static_assert(offsetof(ACremator_C, IsClosed) == 0x000351, "Member 'ACremator_C::IsClosed' has a wrong offset!");
static_assert(offsetof(ACremator_C, Actors) == 0x000358, "Member 'ACremator_C::Actors' has a wrong offset!");
static_assert(offsetof(ACremator_C, Health) == 0x000368, "Member 'ACremator_C::Health' has a wrong offset!");
static_assert(offsetof(ACremator_C, GiveFuel) == 0x000378, "Member 'ACremator_C::GiveFuel' has a wrong offset!");
static_assert(offsetof(ACremator_C, Timer) == 0x000388, "Member 'ACremator_C::Timer' has a wrong offset!");
static_assert(offsetof(ACremator_C, ClosedSnd) == 0x000390, "Member 'ACremator_C::ClosedSnd' has a wrong offset!");

}

