#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EasyWebsockets

#include "Basic.hpp"

#include "EasyWebsockets_classes.hpp"
#include "EasyWebsockets_parameters.hpp"


namespace SDK
{

// Function EasyWebsockets.WebSocket.Close
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   StatusCode                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Reason                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWebSocket::Close(int32 StatusCode, const class FString& Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WebSocket", "Close");

	Params::WebSocket_Close Parms{};

	Parms.StatusCode = StatusCode;
	Parms.Reason = std::move(Reason);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EasyWebsockets.WebSocket.Connect
// (Final, Native, Public, BlueprintCallable)

void UWebSocket::Connect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WebSocket", "Connect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EasyWebsockets.WebSocket.OnWebSocketClosed_Internal
// (Final, Native, Private)
// Parameters:
// int32                                   StatusCode                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Reason                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWasClean                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWebSocket::OnWebSocketClosed_Internal(int32 StatusCode, const class FString& Reason, bool bWasClean)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WebSocket", "OnWebSocketClosed_Internal");

	Params::WebSocket_OnWebSocketClosed_Internal Parms{};

	Parms.StatusCode = StatusCode;
	Parms.Reason = std::move(Reason);
	Parms.bWasClean = bWasClean;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EasyWebsockets.WebSocket.OnWebSocketConnected_Internal
// (Final, Native, Private)

void UWebSocket::OnWebSocketConnected_Internal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WebSocket", "OnWebSocketConnected_Internal");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EasyWebsockets.WebSocket.OnWebSocketConnectionError_Internal
// (Final, Native, Private)
// Parameters:
// class FString                           Error                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWebSocket::OnWebSocketConnectionError_Internal(const class FString& Error)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WebSocket", "OnWebSocketConnectionError_Internal");

	Params::WebSocket_OnWebSocketConnectionError_Internal Parms{};

	Parms.Error = std::move(Error);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EasyWebsockets.WebSocket.OnWebSocketMessageReceived_Internal
// (Final, Native, Private)
// Parameters:
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWebSocket::OnWebSocketMessageReceived_Internal(const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WebSocket", "OnWebSocketMessageReceived_Internal");

	Params::WebSocket_OnWebSocketMessageReceived_Internal Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EasyWebsockets.WebSocket.OnWebSocketMessageSent_Internal
// (Final, Native, Private)
// Parameters:
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWebSocket::OnWebSocketMessageSent_Internal(const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WebSocket", "OnWebSocketMessageSent_Internal");

	Params::WebSocket_OnWebSocketMessageSent_Internal Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EasyWebsockets.WebSocket.SendMessage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWebSocket::SendMessage(const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WebSocket", "SendMessage");

	Params::WebSocket_SendMessage Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EasyWebsockets.WebSocket.IsConnected
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UWebSocket::IsConnected() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WebSocket", "IsConnected");

	Params::WebSocket_IsConnected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EasyWebsockets.WebSocketFunctionLibrary.CreateWebSocket
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ServerUrl                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ServerProtocol                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWebSocket*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWebSocket* UWebSocketFunctionLibrary::CreateWebSocket(const class FString& ServerUrl, const class FString& ServerProtocol)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WebSocketFunctionLibrary", "CreateWebSocket");

	Params::WebSocketFunctionLibrary_CreateWebSocket Parms{};

	Parms.ServerUrl = std::move(ServerUrl);
	Parms.ServerProtocol = std::move(ServerProtocol);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EasyWebsockets.WebSocketFunctionLibrary.CreateWebSocketWithHeaders
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ServerUrl                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      UpgradeHeaders                                         (Parm, NativeAccessSpecifierPublic)
// class FString                           ServerProtocol                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWebSocket*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWebSocket* UWebSocketFunctionLibrary::CreateWebSocketWithHeaders(const class FString& ServerUrl, const TMap<class FString, class FString>& UpgradeHeaders, const class FString& ServerProtocol)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WebSocketFunctionLibrary", "CreateWebSocketWithHeaders");

	Params::WebSocketFunctionLibrary_CreateWebSocketWithHeaders Parms{};

	Parms.ServerUrl = std::move(ServerUrl);
	Parms.UpgradeHeaders = std::move(UpgradeHeaders);
	Parms.ServerProtocol = std::move(ServerProtocol);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

