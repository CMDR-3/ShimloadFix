#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Umg_signalPlay

#include "Basic.hpp"

#include "Umg_signalPlay_classes.hpp"
#include "Umg_signalPlay_parameters.hpp"


namespace SDK
{

// Function umg_signalPlay.umg_signalPlay_C.ExecuteUbergraph_umg_signalPlay
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUmg_signalPlay_C::ExecuteUbergraph_umg_signalPlay(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "ExecuteUbergraph_umg_signalPlay");

	Params::Umg_signalPlay_C_ExecuteUbergraph_umg_signalPlay Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_signalPlay.umg_signalPlay_C.volChange
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Vol                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUmg_signalPlay_C::VolChange(int32 Vol)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "volChange");

	Params::Umg_signalPlay_C_VolChange Parms{};

	Parms.Vol = Vol;

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_signalPlay.umg_signalPlay_C.setPlayback
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Alpha_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUmg_signalPlay_C::SetPlayback(float Alpha_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "setPlayback");

	Params::Umg_signalPlay_C_SetPlayback Parms{};

	Parms.Alpha_0 = Alpha_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_signalPlay.umg_signalPlay_C.powerChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Active_calc                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Active_downl                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Active_coords                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Active_play                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Active_light                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUmg_signalPlay_C::PowerChanged(bool Active_calc, bool Active_downl, bool Active_coords, bool Active_play, bool Active_light)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "powerChanged");

	Params::Umg_signalPlay_C_PowerChanged Parms{};

	Parms.Active_calc = Active_calc;
	Parms.Active_downl = Active_downl;
	Parms.Active_coords = Active_coords;
	Parms.Active_play = Active_play;
	Parms.Active_light = Active_light;

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_signalPlay.umg_signalPlay_C.gamemodeBeginPlay
// (Public, BlueprintCallable, BlueprintEvent)

void UUmg_signalPlay_C::GamemodeBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "gamemodeBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_signalPlay.umg_signalPlay_C.signalDeleted
// (Public, BlueprintCallable, BlueprintEvent)

void UUmg_signalPlay_C::SignalDeleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "signalDeleted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_signalPlay.umg_signalPlay_C.repeatPlay
// (BlueprintCallable, BlueprintEvent)

void UUmg_signalPlay_C::RepeatPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "repeatPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_signalPlay.umg_signalPlay_C.playSignal
// (BlueprintCallable, BlueprintEvent)

void UUmg_signalPlay_C::PlaySignal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "playSignal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_signalPlay.umg_signalPlay_C.gamemodePostKeys
// (Public, BlueprintCallable, BlueprintEvent)

void UUmg_signalPlay_C::GamemodePostKeys()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "gamemodePostKeys");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_signalPlay.umg_signalPlay_C.NewFunction_3
// (Public, BlueprintCallable, BlueprintEvent)

void UUmg_signalPlay_C::NewFunction_3()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "NewFunction_3");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_signalPlay.umg_signalPlay_C.NewFunction_2
// (Public, BlueprintCallable, BlueprintEvent)

void UUmg_signalPlay_C::NewFunction_2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "NewFunction_2");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_signalPlay.umg_signalPlay_C.texturePickerApply
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUmg_texturePicker_C*             Picker                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUmg_signalPlay_C::TexturePickerApply(class UUmg_texturePicker_C* Picker, class UTexture2D* Texture, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "texturePickerApply");

	Params::Umg_signalPlay_C_TexturePickerApply Parms{};

	Parms.Picker = Picker;
	Parms.Texture = Texture;
	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_signalPlay.umg_signalPlay_C.applyColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUmg_signalPlay_C::ApplyColor(const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "applyColor");

	Params::Umg_signalPlay_C_ApplyColor Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_signalPlay.umg_signalPlay_C.propRenderer_finishProps
// (Public, BlueprintCallable, BlueprintEvent)

void UUmg_signalPlay_C::PropRenderer_finishProps()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "propRenderer_finishProps");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_signalPlay.umg_signalPlay_C.gamemodeMakeKeys
// (Public, BlueprintCallable, BlueprintEvent)

void UUmg_signalPlay_C::GamemodeMakeKeys()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "gamemodeMakeKeys");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_signalPlay.umg_signalPlay_C.AnyKey
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    Pressed                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUmg_signalPlay_C::AnyKey(const struct FKey& Key, bool Pressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "AnyKey");

	Params::Umg_signalPlay_C_AnyKey Parms{};

	Parms.Key = std::move(Key);
	Parms.Pressed = Pressed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_signalPlay.umg_signalPlay_C.gamemodePreLoad
// (Public, BlueprintCallable, BlueprintEvent)

void UUmg_signalPlay_C::GamemodePreLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "gamemodePreLoad");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_signalPlay.umg_signalPlay_C.unfocused
// (Public, BlueprintCallable, BlueprintEvent)

void UUmg_signalPlay_C::Unfocused()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "unfocused");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_signalPlay.umg_signalPlay_C.settingsApplied
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStruct_settings                 Settings                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UUmg_signalPlay_C::SettingsApplied(const struct FStruct_settings& Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "settingsApplied");

	Params::Umg_signalPlay_C_SettingsApplied Parms{};

	Parms.Settings = std::move(Settings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_signalPlay.umg_signalPlay_C.unfoc
// (Public, BlueprintCallable, BlueprintEvent)

void UUmg_signalPlay_C::Unfoc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "unfoc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_signalPlay.umg_signalPlay_C.stuffUpgraded
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMainGamemode_C*                  GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUmg_signalPlay_C::StuffUpgraded(class AMainGamemode_C* GameMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "stuffUpgraded");

	Params::Umg_signalPlay_C_StuffUpgraded Parms{};

	Parms.GameMode = GameMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_signalPlay.umg_signalPlay_C.signalSaved
// (Public, BlueprintCallable, BlueprintEvent)

void UUmg_signalPlay_C::SignalSaved()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "signalSaved");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_signalPlay.umg_signalPlay_C.deleteSignal
// (Public, BlueprintCallable, BlueprintEvent)

void UUmg_signalPlay_C::DeleteSignal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "deleteSignal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_signalPlay.umg_signalPlay_C.createList
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UUmg_signalPlay_C::CreateList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "createList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_signalPlay.umg_signalPlay_C.setListLoc
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UUmg_signalPlay_C::SetListLoc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "setListLoc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_signalPlay.umg_signalPlay_C.stopSounds
// (Public, BlueprintCallable, BlueprintEvent)

void UUmg_signalPlay_C::StopSounds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "stopSounds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_signalPlay.umg_signalPlay_C.copySignal
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStruct_signal_data1             SingalPlayData_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UUmg_signalPlay_C::CopySignal(const struct FStruct_signal_data1& SingalPlayData_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "copySignal");

	Params::Umg_signalPlay_C_CopySignal Parms{};

	Parms.SingalPlayData_0 = std::move(SingalPlayData_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_signalPlay.umg_signalPlay_C.setCanvas
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    VisMode_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUmg_signalPlay_C::SetCanvas(bool VisMode_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "setCanvas");

	Params::Umg_signalPlay_C_SetCanvas Parms{};

	Parms.VisMode_0 = VisMode_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function umg_signalPlay.umg_signalPlay_C.endCanvas
// (Public, BlueprintCallable, BlueprintEvent)

void UUmg_signalPlay_C::EndCanvas()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "endCanvas");

	UObject::ProcessEvent(Func, nullptr);
}


// Function umg_signalPlay.umg_signalPlay_C.dreamInv
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FStruct_save>             Invv                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class ADreamBase_C*                     Base                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUmg_signalPlay_C::DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("umg_signalPlay_C", "dreamInv");

	Params::Umg_signalPlay_C_DreamInv Parms{};

	Parms.Invv = std::move(Invv);

	UObject::ProcessEvent(Func, &Parms);

	Invv = std::move(Parms.Invv);

	if (Base != nullptr)
		*Base = Parms.Base;
}

}

