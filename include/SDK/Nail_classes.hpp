#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Nail

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Actor_save_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass nail.nail_C
// 0x0130 (0x0380 - 0x0250)
#pragma pack(push, 0x1)
class alignas(0x10) ANail_C : public AActor_save_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Nail_C;                             // 0x0250(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UArrowComponent*                        Arrow;                                             // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Pin;                                               // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Nail;                                              // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            PhysicsConstraint;                                 // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Comp_A;                                            // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Comb_B;                                            // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor_a;                                           // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor_b;                                           // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Normal;                                            // 0x0298(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Actor_A_key;                                       // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Actor_B_key;                                       // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                PinLoc_A;                                          // 0x02C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PinLoc_B;                                          // 0x02D4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          A;                                                 // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E1[0x3];                                      // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PinNormal;                                         // 0x02E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          broken;                                            // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Static;                                            // 0x02F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F2[0x2];                                      // 0x02F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Type;                                              // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               PinRot_A;                                          // 0x02F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               PinRot_B;                                          // 0x0304(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             Pin_A;                                             // 0x0310(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FTransform                             Pin_B;                                             // 0x0340(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	float                                         Length;                                            // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_nail(int32 EntryPoint);
	void TexturePickerApply(class UUmg_texturePicker_C* Picker, class UTexture2D* Texture, int32 Index_0);
	void NewFunction_2();
	void NewFunction_3();
	void GamemodePostKeys();
	void Assign();
	void ReceiveBeginPlay();
	void D1(class AActor* DestroyedActor);
	void D2(class AActor* DestroyedActor);
	void BndEvt__PhysicsConstraint_K2Node_ComponentBoundEvent_0_ConstraintBrokenSignature__DelegateSignature(int32 ConstraintIndex);
	void ReceiveDestroyed();
	void Aea();
	void ApplyColor(const struct FLinearColor& Color);
	void GamemodeBeginPlay();
	void SignalDeleted();
	void SignalSaved();
	void PropRenderer_finishProps();
	void StuffUpgraded(class AMainGamemode_C* GameMode_0);
	void Unfoc();
	void GamemodeMakeKeys();
	void AnyKey(const struct FKey& Key_0, bool Pressed);
	void GamemodePreLoad();
	void Unfocused();
	void SettingsApplied(const struct FStruct_settings& Settings);
	void N(struct FVector* A_0, struct FVector* B);
	void NailNail(bool A_0, bool* Fail);
	void Attach(bool A_0, bool* Fail);
	void SetRefLoc();
	void Detached();
	void StickNoise();
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);
	void AddDamage(class AActor* Actor, float Damage, const struct FHitResult& Hit, const struct FVector& Impact, bool SkipSetting);
	void LoadData(const struct FStruct_save& Data, bool* Return);
	void GetData(struct FStruct_save* Data);
	void ProcessKeys(bool* Return);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"nail_C">();
	}
	static class ANail_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANail_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ANail_C) == 0x000010, "Wrong alignment on ANail_C");
static_assert(sizeof(ANail_C) == 0x000380, "Wrong size on ANail_C");
static_assert(offsetof(ANail_C, UberGraphFrame_Nail_C) == 0x000250, "Member 'ANail_C::UberGraphFrame_Nail_C' has a wrong offset!");
static_assert(offsetof(ANail_C, Arrow) == 0x000258, "Member 'ANail_C::Arrow' has a wrong offset!");
static_assert(offsetof(ANail_C, Pin) == 0x000260, "Member 'ANail_C::Pin' has a wrong offset!");
static_assert(offsetof(ANail_C, Nail) == 0x000268, "Member 'ANail_C::Nail' has a wrong offset!");
static_assert(offsetof(ANail_C, PhysicsConstraint) == 0x000270, "Member 'ANail_C::PhysicsConstraint' has a wrong offset!");
static_assert(offsetof(ANail_C, Comp_A) == 0x000278, "Member 'ANail_C::Comp_A' has a wrong offset!");
static_assert(offsetof(ANail_C, Comb_B) == 0x000280, "Member 'ANail_C::Comb_B' has a wrong offset!");
static_assert(offsetof(ANail_C, Actor_a) == 0x000288, "Member 'ANail_C::Actor_a' has a wrong offset!");
static_assert(offsetof(ANail_C, Actor_b) == 0x000290, "Member 'ANail_C::Actor_b' has a wrong offset!");
static_assert(offsetof(ANail_C, Normal) == 0x000298, "Member 'ANail_C::Normal' has a wrong offset!");
static_assert(offsetof(ANail_C, Actor_A_key) == 0x0002A8, "Member 'ANail_C::Actor_A_key' has a wrong offset!");
static_assert(offsetof(ANail_C, Actor_B_key) == 0x0002B8, "Member 'ANail_C::Actor_B_key' has a wrong offset!");
static_assert(offsetof(ANail_C, PinLoc_A) == 0x0002C8, "Member 'ANail_C::PinLoc_A' has a wrong offset!");
static_assert(offsetof(ANail_C, PinLoc_B) == 0x0002D4, "Member 'ANail_C::PinLoc_B' has a wrong offset!");
static_assert(offsetof(ANail_C, A) == 0x0002E0, "Member 'ANail_C::A' has a wrong offset!");
static_assert(offsetof(ANail_C, PinNormal) == 0x0002E4, "Member 'ANail_C::PinNormal' has a wrong offset!");
static_assert(offsetof(ANail_C, broken) == 0x0002F0, "Member 'ANail_C::broken' has a wrong offset!");
static_assert(offsetof(ANail_C, Static) == 0x0002F1, "Member 'ANail_C::Static' has a wrong offset!");
static_assert(offsetof(ANail_C, Type) == 0x0002F4, "Member 'ANail_C::Type' has a wrong offset!");
static_assert(offsetof(ANail_C, PinRot_A) == 0x0002F8, "Member 'ANail_C::PinRot_A' has a wrong offset!");
static_assert(offsetof(ANail_C, PinRot_B) == 0x000304, "Member 'ANail_C::PinRot_B' has a wrong offset!");
static_assert(offsetof(ANail_C, Pin_A) == 0x000310, "Member 'ANail_C::Pin_A' has a wrong offset!");
static_assert(offsetof(ANail_C, Pin_B) == 0x000340, "Member 'ANail_C::Pin_B' has a wrong offset!");
static_assert(offsetof(ANail_C, Length) == 0x000370, "Member 'ANail_C::Length' has a wrong offset!");

}

