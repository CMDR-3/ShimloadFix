#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Prop_shower

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Enum_interactionActions_structs.hpp"
#include "Actor_save_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass prop_shower.prop_shower_C
// 0x0048 (0x0298 - 0x0250)
class AProp_shower_C final : public AActor_save_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Prop_shower_C;                      // 0x0250(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UArrowComponent*                        Arrow;                                             // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Switch_cold;                                       // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio;                                             // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Eff_water;                                         // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube;                                              // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Clean;                                             // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CleanVec;                                          // 0x0284(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Running_cold;                                      // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         UseType;                                           // 0x0291(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void IsButtonUsed(bool* Failed);
	void LookAt(class AMainPlayer_C* Player, const struct FHitResult& Hit, bool* Return, class FString* Text, class UPrimitiveComponent** boundObjectReplace, uint8* Number);
	void NoRespawn(bool NoRespawn_0, bool* Return);
	void CanPickup(bool* Return);
	void AsProp(class AProp_C** Return);
	void CanBePutInContainer(bool* Return);
	void LandedOn(class AMainPlayer_C* Player, bool* IgnoreFallDamage);
	void UpdWater();
	void GetActionOptions(class AMainPlayer_C* Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay, uint8* Number);
	void GetData(struct FStruct_save* Data);
	void LoadData(const struct FStruct_save& Data, bool* Return);
	void GatherDataFromKey(bool* Gather);
	void Upd();
	void UserConstructionScript();
	void Player_use(class AMainPlayer_C* Player, const struct FHitResult& Hit);
	void Kicked(bool Kick);
	void SendName(class FName Name_0);
	void broken();
	void broken_fire();
	void Thrown(class AMainPlayer_C* Player);
	void DamageByPlayer(class AMainPlayer_C* Player, const struct FHitResult& Hit, float Damage);
	void UpdateStrAgl();
	void PlayerUnequip(class AMainPlayer_C* Player);
	void PlayerHold(class AMainPlayer_C* Player);
	void PlayerR(class AMainPlayer_C* Player);
	void CleanSponge(float Clean_0, class AMainPlayer_C* Player);
	void ReceiveBeginPlay();
	void ActionOptionIndex(class AMainPlayer_C* Player, const struct FHitResult& Hit, Enum_interactionActions Action);
	void ReceiveTick(float DeltaSeconds);
	void DriveDetached();
	void ExecuteUbergraph_prop_shower(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"prop_shower_C">();
	}
	static class AProp_shower_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProp_shower_C>();
	}
};
static_assert(alignof(AProp_shower_C) == 0x000008, "Wrong alignment on AProp_shower_C");
static_assert(sizeof(AProp_shower_C) == 0x000298, "Wrong size on AProp_shower_C");
static_assert(offsetof(AProp_shower_C, UberGraphFrame_Prop_shower_C) == 0x000250, "Member 'AProp_shower_C::UberGraphFrame_Prop_shower_C' has a wrong offset!");
static_assert(offsetof(AProp_shower_C, Arrow) == 0x000258, "Member 'AProp_shower_C::Arrow' has a wrong offset!");
static_assert(offsetof(AProp_shower_C, Switch_cold) == 0x000260, "Member 'AProp_shower_C::Switch_cold' has a wrong offset!");
static_assert(offsetof(AProp_shower_C, Audio) == 0x000268, "Member 'AProp_shower_C::Audio' has a wrong offset!");
static_assert(offsetof(AProp_shower_C, Eff_water) == 0x000270, "Member 'AProp_shower_C::Eff_water' has a wrong offset!");
static_assert(offsetof(AProp_shower_C, Cube) == 0x000278, "Member 'AProp_shower_C::Cube' has a wrong offset!");
static_assert(offsetof(AProp_shower_C, Clean) == 0x000280, "Member 'AProp_shower_C::Clean' has a wrong offset!");
static_assert(offsetof(AProp_shower_C, CleanVec) == 0x000284, "Member 'AProp_shower_C::CleanVec' has a wrong offset!");
static_assert(offsetof(AProp_shower_C, Running_cold) == 0x000290, "Member 'AProp_shower_C::Running_cold' has a wrong offset!");
static_assert(offsetof(AProp_shower_C, UseType) == 0x000291, "Member 'AProp_shower_C::UseType' has a wrong offset!");

}

