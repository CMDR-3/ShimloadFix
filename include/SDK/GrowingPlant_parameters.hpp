#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GrowingPlant

#include "Basic.hpp"

#include "Struct_mFloat_structs.hpp"
#include "Struct_farmPlant_structs.hpp"
#include "Engine_structs.hpp"
#include "Struct_food_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Struct_prop3_structs.hpp"
#include "Struct_save_structs.hpp"
#include "Struct_mString_structs.hpp"
#include "Enum_interactionActions_structs.hpp"


namespace SDK::Params
{

// Function growingPlant.growingPlant_C.ExecuteUbergraph_growingPlant
// 0x0810 (0x0810 - 0x0000)
struct GrowingPlant_C_ExecuteUbergraph_growingPlant final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_2;           // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_5;                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0040(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(class AActor* DestroyedActor)> K2Node_CreateDelegate_OutputDelegate;              // 0x0050(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         Temp_int_Variable_6;                               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_7;                               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_6;                             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_4;                                // 0x0070(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_Event_kick;                                 // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_name;                                 // 0x00FC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_5;                             // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_4;                             // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_3;                                // 0x0118(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_damage_3;                             // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_3;                             // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_2;                                // 0x01D0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       K2Node_Event_action;                               // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25A[0x6];                                      // 0x025A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0260(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AProp_C*                                CallFunc_FinishSpawningActor_ReturnValue;          // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_3;           // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_4;           // 0x02A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_propToObject_ReturnValue;                 // 0x02A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A3[0x1];                                      // 0x02A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_food                           CallFunc_propToObject_foodData;                    // 0x02A4(0x001C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_propToObject_object;                      // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_propToObject_isFood;                      // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_prop3                          CallFunc_propToObject_fuckYouRetard;               // 0x02D0(0x0080)(HasGetValueTypeHash)
	bool                                          CallFunc_propToObject_ReturnValue_1;               // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_351[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_food                           CallFunc_propToObject_foodData_1;                  // 0x0354(0x001C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_propToObject_object_1;                    // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_propToObject_isFood_1;                    // 0x0378(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_prop3                          CallFunc_propToObject_fuckYouRetard_1;             // 0x0380(0x0080)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0400(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_401[0x7];                                      // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x0408(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue_1;               // 0x0410(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_411[0x7];                                      // 0x0411(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x0418(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IInt_player_C>         K2Node_DynamicCast_AsInt_Player;                   // 0x0420(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_431[0x7];                                      // 0x0431(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2; // 0x0438(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AProp_C*                                CallFunc_asProp_return;                            // 0x0440(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0448(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AProp_food_C*                           CallFunc_FinishSpawningActor_ReturnValue_2;        // 0x0458(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatMinusEquals_FloatOut;         // 0x0460(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatMinusEquals_FloatOut_1;       // 0x0464(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0468(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0469(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x046A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_3;         // 0x046B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x046C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0470(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IInt_objects_C>        K2Node_DynamicCast_AsInt_Objects;                  // 0x0478(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0488(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_489[0x7];                                      // 0x0489(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AProp_farmPot_C*                        K2Node_DynamicCast_AsProp_Farm_Pot;                // 0x0490(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_499[0x7];                                      // 0x0499(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_getKey_key;                               // 0x04A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x04B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_DestroyedActor;                 // 0x04B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_8;                               // 0x04C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_4;         // 0x04C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_5;           // 0x04C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C6[0x2];                                      // 0x04C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x04C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x04CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x04CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CE[0x2];                                      // 0x04CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x04D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x04DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBoolWithWeight_ReturnValue;         // 0x04E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E9[0x3];                                      // 0x04E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x04EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      CallFunc_obj_static_obj;                           // 0x04F8(0x0010)(ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x0508(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x0590(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_591[0x3];                                      // 0x0591(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VictoryFloatPlusEquals_FloatOut;          // 0x0594(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0598(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_5;         // 0x0599(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59A[0x2];                                      // 0x059A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_2;                // 0x059C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x05A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x05A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x05A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x05AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatPlusEquals_FloatOut_1;        // 0x05B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatPlusEquals_FloatOut_2;        // 0x05B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x05B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x05B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_6;         // 0x05BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x05BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x05BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5BD[0x3];                                      // 0x05BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor_1;                              // 0x05C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_2;                             // 0x05C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit_1;                                // 0x05CC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_Event_impact_1;                             // 0x0654(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_skipSetting;                          // 0x0660(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_661[0x3];                                      // 0x0661(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x0664(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_1;                             // 0x0670(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_674[0x4];                                      // 0x0674(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IInt_objects_C>        CallFunc_impactDamage_self_CastInput;              // 0x0678(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_damage;                               // 0x0688(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x068C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_714[0x4];                                      // 0x0714(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_Event_actor;                                // 0x0718(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_impact;                               // 0x0720(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72C[0x4];                                      // 0x072C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IInt_objects_C>        CallFunc_fireDamage_self_CastInput;                // 0x0730(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue_1;         // 0x0740(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74C[0x4];                                      // 0x074C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IInt_objects_C>        CallFunc_impactDamage_self_CastInput_1;            // 0x0750(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_VictoryFloatPlusEquals_FloatOut_3;        // 0x0760(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_2;    // 0x0764(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue_1;              // 0x0765(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_766[0xA];                                      // 0x0766(0x000A)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x0770(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_3; // 0x07A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_4; // 0x07A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_FinishSpawningActor_ReturnValue_3;        // 0x07B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IInt_player_C>         K2Node_DynamicCast_AsInt_Player_1;                 // 0x07B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x07C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C9[0x7];                                      // 0x07C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AProp_C*                                CallFunc_FinishSpawningActor_ReturnValue_4;        // 0x07D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AProp_C*                                CallFunc_asProp_return_1;                          // 0x07D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_5; // 0x07E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AProp_food_C*                           CallFunc_FinishSpawningActor_ReturnValue_5;        // 0x07E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Select_Default;                             // 0x07F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_1;          // 0x07F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_putObjectInventory2_return;               // 0x0808(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0809(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue_2;              // 0x080A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GrowingPlant_C_ExecuteUbergraph_growingPlant) == 0x000010, "Wrong alignment on GrowingPlant_C_ExecuteUbergraph_growingPlant");
static_assert(sizeof(GrowingPlant_C_ExecuteUbergraph_growingPlant) == 0x000810, "Wrong size on GrowingPlant_C_ExecuteUbergraph_growingPlant");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, EntryPoint) == 0x000000, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::EntryPoint' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, Temp_int_Variable) == 0x000004, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_SelectFloat_ReturnValue) == 0x000008, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00000C, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, Temp_int_Variable_1) == 0x000014, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000018, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_Add_IntInt_ReturnValue_1) == 0x00001C, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, Temp_int_Variable_2) == 0x000020, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_LessEqual_IntInt_ReturnValue_2) == 0x000024, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_LessEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_Add_IntInt_ReturnValue_2) == 0x000028, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, Temp_int_Variable_3) == 0x00002C, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, Temp_int_Variable_4) == 0x000030, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_Add_IntInt_ReturnValue_3) == 0x000034, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, Temp_int_Variable_5) == 0x000038, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_Add_IntInt_ReturnValue_4) == 0x00003C, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, Temp_object_Variable) == 0x000040, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_CreateDelegate_OutputDelegate) == 0x000050, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, Temp_int_Variable_6) == 0x000060, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::Temp_int_Variable_6' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, Temp_int_Variable_7) == 0x000064, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::Temp_int_Variable_7' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_Event_player_6) == 0x000068, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_Event_player_6' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_Event_hit_4) == 0x000070, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_Event_hit_4' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_Event_kick) == 0x0000F8, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_Event_kick' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_Event_name) == 0x0000FC, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_Event_name' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_Event_player_5) == 0x000108, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_Event_player_5' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_Event_player_4) == 0x000110, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_Event_player_4' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_Event_hit_3) == 0x000118, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_Event_hit_3' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_Event_damage_3) == 0x0001A0, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_Event_damage_3' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_Event_player_3) == 0x0001A8, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_Event_player_3' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_Event_player_2) == 0x0001B0, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_Event_player_1) == 0x0001B8, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_Event_DeltaSeconds) == 0x0001C0, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_Event_player) == 0x0001C8, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_Event_hit_2) == 0x0001D0, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_Event_hit_2' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_Event_action) == 0x000258, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_Event_action' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_SwitchEnum_CmpSuccess) == 0x000259, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_GetTransform_ReturnValue) == 0x000260, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000290, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_FinishSpawningActor_ReturnValue) == 0x000298, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_LessEqual_IntInt_ReturnValue_3) == 0x0002A0, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_LessEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_LessEqual_IntInt_ReturnValue_4) == 0x0002A1, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_LessEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_propToObject_ReturnValue) == 0x0002A2, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_propToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_propToObject_foodData) == 0x0002A4, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_propToObject_foodData' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_propToObject_object) == 0x0002C0, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_propToObject_object' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_propToObject_isFood) == 0x0002C8, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_propToObject_isFood' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_propToObject_fuckYouRetard) == 0x0002D0, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_propToObject_fuckYouRetard' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_propToObject_ReturnValue_1) == 0x000350, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_propToObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_propToObject_foodData_1) == 0x000354, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_propToObject_foodData_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_propToObject_object_1) == 0x000370, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_propToObject_object_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_propToObject_isFood_1) == 0x000378, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_propToObject_isFood_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_propToObject_fuckYouRetard_1) == 0x000380, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_propToObject_fuckYouRetard_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_IsValidClass_ReturnValue) == 0x000400, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x000408, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_IsValidClass_ReturnValue_1) == 0x000410, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_IsValidClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x000418, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_DynamicCast_AsInt_Player) == 0x000420, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_DynamicCast_AsInt_Player' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_DynamicCast_bSuccess) == 0x000430, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2) == 0x000438, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_asProp_return) == 0x000440, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_asProp_return' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_Conv_NameToString_ReturnValue) == 0x000448, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_FinishSpawningActor_ReturnValue_2) == 0x000458, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_FinishSpawningActor_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_VictoryFloatMinusEquals_FloatOut) == 0x000460, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_VictoryFloatMinusEquals_FloatOut' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_VictoryFloatMinusEquals_FloatOut_1) == 0x000464, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_VictoryFloatMinusEquals_FloatOut_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000468, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000469, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x00046A, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_Greater_FloatFloat_ReturnValue_3) == 0x00046B, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_Greater_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_SelectFloat_ReturnValue_1) == 0x00046C, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_GetOwner_ReturnValue) == 0x000470, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_DynamicCast_AsInt_Objects) == 0x000478, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_DynamicCast_AsInt_Objects' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_DynamicCast_bSuccess_1) == 0x000488, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_DynamicCast_AsProp_Farm_Pot) == 0x000490, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_DynamicCast_AsProp_Farm_Pot' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_DynamicCast_bSuccess_2) == 0x000498, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_getKey_key) == 0x0004A0, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_getKey_key' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_GetOwner_ReturnValue_1) == 0x0004B0, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_CustomEvent_DestroyedActor) == 0x0004B8, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_CustomEvent_DestroyedActor' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, Temp_int_Variable_8) == 0x0004C0, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::Temp_int_Variable_8' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_Greater_FloatFloat_ReturnValue_4) == 0x0004C4, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_Greater_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_LessEqual_IntInt_ReturnValue_5) == 0x0004C5, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_LessEqual_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_Add_IntInt_ReturnValue_5) == 0x0004C8, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_BooleanOR_ReturnValue) == 0x0004CC, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_BooleanAND_ReturnValue) == 0x0004CD, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0004D0, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_Add_VectorVector_ReturnValue) == 0x0004DC, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_RandomBoolWithWeight_ReturnValue) == 0x0004E8, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_RandomBoolWithWeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0004EC, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_obj_static_obj) == 0x0004F8, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_obj_static_obj' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_LineTraceSingleForObjects_OutHit) == 0x000508, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x000590, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_VictoryFloatPlusEquals_FloatOut) == 0x000594, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_VictoryFloatPlusEquals_FloatOut' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_Less_FloatFloat_ReturnValue) == 0x000598, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_Greater_FloatFloat_ReturnValue_5) == 0x000599, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_Greater_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_SelectFloat_ReturnValue_2) == 0x00059C, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0005A0, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x0005A4, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0005A8, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0005AC, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_VictoryFloatPlusEquals_FloatOut_1) == 0x0005B0, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_VictoryFloatPlusEquals_FloatOut_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_VictoryFloatPlusEquals_FloatOut_2) == 0x0005B4, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_VictoryFloatPlusEquals_FloatOut_2' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0005B8, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x0005B9, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_Greater_FloatFloat_ReturnValue_6) == 0x0005BA, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_Greater_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_SetStaticMesh_ReturnValue) == 0x0005BB, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x0005BC, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_Event_actor_1) == 0x0005C0, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_Event_actor_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_Event_damage_2) == 0x0005C8, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_Event_damage_2' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_Event_hit_1) == 0x0005CC, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_Event_hit_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_Event_impact_1) == 0x000654, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_Event_impact_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_Event_skipSetting) == 0x000660, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_Event_skipSetting' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_Divide_VectorFloat_ReturnValue) == 0x000664, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_Event_damage_1) == 0x000670, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_Event_damage_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_impactDamage_self_CastInput) == 0x000678, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_impactDamage_self_CastInput' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_Event_damage) == 0x000688, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_Event_hit) == 0x00068C, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_Event_actor) == 0x000718, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_Event_actor' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_Event_impact) == 0x000720, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_Event_impact' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_fireDamage_self_CastInput) == 0x000730, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_fireDamage_self_CastInput' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_Divide_VectorFloat_ReturnValue_1) == 0x000740, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_Divide_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_impactDamage_self_CastInput_1) == 0x000750, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_impactDamage_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_VictoryFloatPlusEquals_FloatOut_3) == 0x000760, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_VictoryFloatPlusEquals_FloatOut_3' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_GreaterEqual_FloatFloat_ReturnValue_2) == 0x000764, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_GreaterEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_SetStaticMesh_ReturnValue_1) == 0x000765, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_SetStaticMesh_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_GetTransform_ReturnValue_1) == 0x000770, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_3) == 0x0007A0, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_4) == 0x0007A8, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_FinishSpawningActor_ReturnValue_3) == 0x0007B0, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_FinishSpawningActor_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_DynamicCast_AsInt_Player_1) == 0x0007B8, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_DynamicCast_AsInt_Player_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_DynamicCast_bSuccess_3) == 0x0007C8, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_FinishSpawningActor_ReturnValue_4) == 0x0007D0, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_FinishSpawningActor_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_asProp_return_1) == 0x0007D8, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_asProp_return_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_5) == 0x0007E0, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_FinishSpawningActor_ReturnValue_5) == 0x0007E8, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_FinishSpawningActor_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, K2Node_Select_Default) == 0x0007F0, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_Conv_NameToString_ReturnValue_1) == 0x0007F8, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_Conv_NameToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_putObjectInventory2_return) == 0x000808, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_putObjectInventory2_return' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_Greater_IntInt_ReturnValue) == 0x000809, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ExecuteUbergraph_growingPlant, CallFunc_SetStaticMesh_ReturnValue_2) == 0x00080A, "Member 'GrowingPlant_C_ExecuteUbergraph_growingPlant::CallFunc_SetStaticMesh_ReturnValue_2' has a wrong offset!");

// Function growingPlant.growingPlant_C.CustomEvent
// 0x00A8 (0x00A8 - 0x0000)
struct GrowingPlant_C_CustomEvent final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0004(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact;                                            // 0x0098(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GrowingPlant_C_CustomEvent) == 0x000008, "Wrong alignment on GrowingPlant_C_CustomEvent");
static_assert(sizeof(GrowingPlant_C_CustomEvent) == 0x0000A8, "Wrong size on GrowingPlant_C_CustomEvent");
static_assert(offsetof(GrowingPlant_C_CustomEvent, Damage) == 0x000000, "Member 'GrowingPlant_C_CustomEvent::Damage' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_CustomEvent, Hit) == 0x000004, "Member 'GrowingPlant_C_CustomEvent::Hit' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_CustomEvent, Actor) == 0x000090, "Member 'GrowingPlant_C_CustomEvent::Actor' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_CustomEvent, Impact) == 0x000098, "Member 'GrowingPlant_C_CustomEvent::Impact' has a wrong offset!");

// Function growingPlant.growingPlant_C.fireDamage
// 0x0004 (0x0004 - 0x0000)
struct GrowingPlant_C_FireDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GrowingPlant_C_FireDamage) == 0x000004, "Wrong alignment on GrowingPlant_C_FireDamage");
static_assert(sizeof(GrowingPlant_C_FireDamage) == 0x000004, "Wrong size on GrowingPlant_C_FireDamage");
static_assert(offsetof(GrowingPlant_C_FireDamage, Damage) == 0x000000, "Member 'GrowingPlant_C_FireDamage::Damage' has a wrong offset!");

// Function growingPlant.growingPlant_C.addDamage
// 0x00A8 (0x00A8 - 0x0000)
struct GrowingPlant_C_AddDamage final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x000C(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Impact;                                            // 0x0094(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipSetting;                                       // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GrowingPlant_C_AddDamage) == 0x000008, "Wrong alignment on GrowingPlant_C_AddDamage");
static_assert(sizeof(GrowingPlant_C_AddDamage) == 0x0000A8, "Wrong size on GrowingPlant_C_AddDamage");
static_assert(offsetof(GrowingPlant_C_AddDamage, Actor) == 0x000000, "Member 'GrowingPlant_C_AddDamage::Actor' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddDamage, Damage) == 0x000008, "Member 'GrowingPlant_C_AddDamage::Damage' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddDamage, Hit) == 0x00000C, "Member 'GrowingPlant_C_AddDamage::Hit' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddDamage, Impact) == 0x000094, "Member 'GrowingPlant_C_AddDamage::Impact' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddDamage, SkipSetting) == 0x0000A0, "Member 'GrowingPlant_C_AddDamage::SkipSetting' has a wrong offset!");

// Function growingPlant.growingPlant_C.Dest
// 0x0008 (0x0008 - 0x0000)
struct GrowingPlant_C_Dest final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GrowingPlant_C_Dest) == 0x000008, "Wrong alignment on GrowingPlant_C_Dest");
static_assert(sizeof(GrowingPlant_C_Dest) == 0x000008, "Wrong size on GrowingPlant_C_Dest");
static_assert(offsetof(GrowingPlant_C_Dest, DestroyedActor) == 0x000000, "Member 'GrowingPlant_C_Dest::DestroyedActor' has a wrong offset!");

// Function growingPlant.growingPlant_C.actionOptionIndex
// 0x0098 (0x0098 - 0x0000)
struct GrowingPlant_C_ActionOptionIndex final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	Enum_interactionActions                       Action;                                            // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GrowingPlant_C_ActionOptionIndex) == 0x000008, "Wrong alignment on GrowingPlant_C_ActionOptionIndex");
static_assert(sizeof(GrowingPlant_C_ActionOptionIndex) == 0x000098, "Wrong size on GrowingPlant_C_ActionOptionIndex");
static_assert(offsetof(GrowingPlant_C_ActionOptionIndex, Player) == 0x000000, "Member 'GrowingPlant_C_ActionOptionIndex::Player' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ActionOptionIndex, Hit) == 0x000008, "Member 'GrowingPlant_C_ActionOptionIndex::Hit' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ActionOptionIndex, Action) == 0x000090, "Member 'GrowingPlant_C_ActionOptionIndex::Action' has a wrong offset!");

// Function growingPlant.growingPlant_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct GrowingPlant_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GrowingPlant_C_ReceiveTick) == 0x000004, "Wrong alignment on GrowingPlant_C_ReceiveTick");
static_assert(sizeof(GrowingPlant_C_ReceiveTick) == 0x000004, "Wrong size on GrowingPlant_C_ReceiveTick");
static_assert(offsetof(GrowingPlant_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'GrowingPlant_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function growingPlant.growingPlant_C.playerR
// 0x0008 (0x0008 - 0x0000)
struct GrowingPlant_C_PlayerR final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GrowingPlant_C_PlayerR) == 0x000008, "Wrong alignment on GrowingPlant_C_PlayerR");
static_assert(sizeof(GrowingPlant_C_PlayerR) == 0x000008, "Wrong size on GrowingPlant_C_PlayerR");
static_assert(offsetof(GrowingPlant_C_PlayerR, Player) == 0x000000, "Member 'GrowingPlant_C_PlayerR::Player' has a wrong offset!");

// Function growingPlant.growingPlant_C.playerHold
// 0x0008 (0x0008 - 0x0000)
struct GrowingPlant_C_PlayerHold final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GrowingPlant_C_PlayerHold) == 0x000008, "Wrong alignment on GrowingPlant_C_PlayerHold");
static_assert(sizeof(GrowingPlant_C_PlayerHold) == 0x000008, "Wrong size on GrowingPlant_C_PlayerHold");
static_assert(offsetof(GrowingPlant_C_PlayerHold, Player) == 0x000000, "Member 'GrowingPlant_C_PlayerHold::Player' has a wrong offset!");

// Function growingPlant.growingPlant_C.playerUnequip
// 0x0008 (0x0008 - 0x0000)
struct GrowingPlant_C_PlayerUnequip final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GrowingPlant_C_PlayerUnequip) == 0x000008, "Wrong alignment on GrowingPlant_C_PlayerUnequip");
static_assert(sizeof(GrowingPlant_C_PlayerUnequip) == 0x000008, "Wrong size on GrowingPlant_C_PlayerUnequip");
static_assert(offsetof(GrowingPlant_C_PlayerUnequip, Player) == 0x000000, "Member 'GrowingPlant_C_PlayerUnequip::Player' has a wrong offset!");

// Function growingPlant.growingPlant_C.damageByPlayer
// 0x0098 (0x0098 - 0x0000)
struct GrowingPlant_C_DamageByPlayer final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         Damage;                                            // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GrowingPlant_C_DamageByPlayer) == 0x000008, "Wrong alignment on GrowingPlant_C_DamageByPlayer");
static_assert(sizeof(GrowingPlant_C_DamageByPlayer) == 0x000098, "Wrong size on GrowingPlant_C_DamageByPlayer");
static_assert(offsetof(GrowingPlant_C_DamageByPlayer, Player) == 0x000000, "Member 'GrowingPlant_C_DamageByPlayer::Player' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_DamageByPlayer, Hit) == 0x000008, "Member 'GrowingPlant_C_DamageByPlayer::Hit' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_DamageByPlayer, Damage) == 0x000090, "Member 'GrowingPlant_C_DamageByPlayer::Damage' has a wrong offset!");

// Function growingPlant.growingPlant_C.thrown
// 0x0008 (0x0008 - 0x0000)
struct GrowingPlant_C_Thrown final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GrowingPlant_C_Thrown) == 0x000008, "Wrong alignment on GrowingPlant_C_Thrown");
static_assert(sizeof(GrowingPlant_C_Thrown) == 0x000008, "Wrong size on GrowingPlant_C_Thrown");
static_assert(offsetof(GrowingPlant_C_Thrown, Player) == 0x000000, "Member 'GrowingPlant_C_Thrown::Player' has a wrong offset!");

// Function growingPlant.growingPlant_C.sendName
// 0x0008 (0x0008 - 0x0000)
struct GrowingPlant_C_SendName final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GrowingPlant_C_SendName) == 0x000004, "Wrong alignment on GrowingPlant_C_SendName");
static_assert(sizeof(GrowingPlant_C_SendName) == 0x000008, "Wrong size on GrowingPlant_C_SendName");
static_assert(offsetof(GrowingPlant_C_SendName, Name_0) == 0x000000, "Member 'GrowingPlant_C_SendName::Name_0' has a wrong offset!");

// Function growingPlant.growingPlant_C.kicked
// 0x0001 (0x0001 - 0x0000)
struct GrowingPlant_C_Kicked final
{
public:
	bool                                          Kick;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GrowingPlant_C_Kicked) == 0x000001, "Wrong alignment on GrowingPlant_C_Kicked");
static_assert(sizeof(GrowingPlant_C_Kicked) == 0x000001, "Wrong size on GrowingPlant_C_Kicked");
static_assert(offsetof(GrowingPlant_C_Kicked, Kick) == 0x000000, "Member 'GrowingPlant_C_Kicked::Kick' has a wrong offset!");

// Function growingPlant.growingPlant_C.player_use
// 0x0090 (0x0090 - 0x0000)
struct GrowingPlant_C_Player_use final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(GrowingPlant_C_Player_use) == 0x000008, "Wrong alignment on GrowingPlant_C_Player_use");
static_assert(sizeof(GrowingPlant_C_Player_use) == 0x000090, "Wrong size on GrowingPlant_C_Player_use");
static_assert(offsetof(GrowingPlant_C_Player_use, Player) == 0x000000, "Member 'GrowingPlant_C_Player_use::Player' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_Player_use, Hit) == 0x000008, "Member 'GrowingPlant_C_Player_use::Hit' has a wrong offset!");

// Function growingPlant.growingPlant_C.UserConstructionScript
// 0x0002 (0x0002 - 0x0000)
struct GrowingPlant_C_UserConstructionScript final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GrowingPlant_C_UserConstructionScript) == 0x000001, "Wrong alignment on GrowingPlant_C_UserConstructionScript");
static_assert(sizeof(GrowingPlant_C_UserConstructionScript) == 0x000002, "Wrong size on GrowingPlant_C_UserConstructionScript");
static_assert(offsetof(GrowingPlant_C_UserConstructionScript, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'GrowingPlant_C_UserConstructionScript::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_UserConstructionScript, CallFunc_SetStaticMesh_ReturnValue) == 0x000001, "Member 'GrowingPlant_C_UserConstructionScript::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");

// Function growingPlant.growingPlant_C.updLoc
// 0x00F4 (0x00F4 - 0x0000)
struct GrowingPlant_C_UpdLoc final
{
public:
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue_1;                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBoxSphereBounds                       CallFunc_GetBounds_ReturnValue;                    // 0x0028(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x006C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(GrowingPlant_C_UpdLoc) == 0x000004, "Wrong alignment on GrowingPlant_C_UpdLoc");
static_assert(sizeof(GrowingPlant_C_UpdLoc) == 0x0000F4, "Wrong size on GrowingPlant_C_UpdLoc");
static_assert(offsetof(GrowingPlant_C_UpdLoc, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000000, "Member 'GrowingPlant_C_UpdLoc::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_UpdLoc, CallFunc_BreakVector_X) == 0x000004, "Member 'GrowingPlant_C_UpdLoc::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_UpdLoc, CallFunc_BreakVector_Y) == 0x000008, "Member 'GrowingPlant_C_UpdLoc::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_UpdLoc, CallFunc_BreakVector_Z) == 0x00000C, "Member 'GrowingPlant_C_UpdLoc::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_UpdLoc, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'GrowingPlant_C_UpdLoc::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_UpdLoc, CallFunc_Ease_ReturnValue) == 0x000014, "Member 'GrowingPlant_C_UpdLoc::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_UpdLoc, CallFunc_Ease_ReturnValue_1) == 0x000018, "Member 'GrowingPlant_C_UpdLoc::CallFunc_Ease_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_UpdLoc, CallFunc_MakeVector_ReturnValue) == 0x00001C, "Member 'GrowingPlant_C_UpdLoc::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_UpdLoc, CallFunc_GetBounds_ReturnValue) == 0x000028, "Member 'GrowingPlant_C_UpdLoc::CallFunc_GetBounds_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_UpdLoc, CallFunc_BreakVector_X_1) == 0x000044, "Member 'GrowingPlant_C_UpdLoc::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_UpdLoc, CallFunc_BreakVector_Y_1) == 0x000048, "Member 'GrowingPlant_C_UpdLoc::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_UpdLoc, CallFunc_BreakVector_Z_1) == 0x00004C, "Member 'GrowingPlant_C_UpdLoc::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_UpdLoc, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000050, "Member 'GrowingPlant_C_UpdLoc::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_UpdLoc, CallFunc_MakeVector_ReturnValue_1) == 0x000054, "Member 'GrowingPlant_C_UpdLoc::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_UpdLoc, CallFunc_VLerp_ReturnValue) == 0x000060, "Member 'GrowingPlant_C_UpdLoc::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_UpdLoc, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x00006C, "Member 'GrowingPlant_C_UpdLoc::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");

// Function growingPlant.growingPlant_C.getActionOptions
// 0x0060 (0x0060 - 0x0000)
struct GrowingPlant_C_GetActionOptions final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Component;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Options;                                           // 0x0018(0x0010)(Parm, OutParm)
	TArray<Enum_interactionActions>               Options_enum;                                      // 0x0028(0x0010)(Parm, OutParm)
	TArray<class FText>                           OptionsNamesOverlay;                               // 0x0038(0x0010)(Parm, OutParm)
	uint8                                         Number;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<Enum_interactionActions>               K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ReferenceParm)
};
static_assert(alignof(GrowingPlant_C_GetActionOptions) == 0x000008, "Wrong alignment on GrowingPlant_C_GetActionOptions");
static_assert(sizeof(GrowingPlant_C_GetActionOptions) == 0x000060, "Wrong size on GrowingPlant_C_GetActionOptions");
static_assert(offsetof(GrowingPlant_C_GetActionOptions, Player) == 0x000000, "Member 'GrowingPlant_C_GetActionOptions::Player' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_GetActionOptions, Component) == 0x000008, "Member 'GrowingPlant_C_GetActionOptions::Component' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_GetActionOptions, Actor) == 0x000010, "Member 'GrowingPlant_C_GetActionOptions::Actor' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_GetActionOptions, Options) == 0x000018, "Member 'GrowingPlant_C_GetActionOptions::Options' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_GetActionOptions, Options_enum) == 0x000028, "Member 'GrowingPlant_C_GetActionOptions::Options_enum' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_GetActionOptions, OptionsNamesOverlay) == 0x000038, "Member 'GrowingPlant_C_GetActionOptions::OptionsNamesOverlay' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_GetActionOptions, Number) == 0x000048, "Member 'GrowingPlant_C_GetActionOptions::Number' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_GetActionOptions, K2Node_MakeArray_Array) == 0x000050, "Member 'GrowingPlant_C_GetActionOptions::K2Node_MakeArray_Array' has a wrong offset!");

// Function growingPlant.growingPlant_C.loadData
// 0x0120 (0x0120 - 0x0000)
struct GrowingPlant_C_LoadData final
{
public:
	struct FStruct_save                           Data_0;                                            // 0x0000(0x00C0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_loadData_return;                          // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_mString                        CallFunc_Array_Get_Item;                           // 0x00C8(0x0010)(HasGetValueTypeHash)
	struct FStruct_mFloat                         CallFunc_Array_Get_Item_1;                         // 0x00D8(0x0010)(HasGetValueTypeHash)
	class FString                                 CallFunc_Array_Get_Item_2;                         // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_3;                         // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_4;                         // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_5;                         // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_6;                         // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Array_Get_Item_7;                         // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GrowingPlant_C_LoadData) == 0x000010, "Wrong alignment on GrowingPlant_C_LoadData");
static_assert(sizeof(GrowingPlant_C_LoadData) == 0x000120, "Wrong size on GrowingPlant_C_LoadData");
static_assert(offsetof(GrowingPlant_C_LoadData, Data_0) == 0x000000, "Member 'GrowingPlant_C_LoadData::Data_0' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_LoadData, Return) == 0x0000C0, "Member 'GrowingPlant_C_LoadData::Return' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_LoadData, CallFunc_loadData_return) == 0x0000C1, "Member 'GrowingPlant_C_LoadData::CallFunc_loadData_return' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_LoadData, CallFunc_Array_Get_Item) == 0x0000C8, "Member 'GrowingPlant_C_LoadData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_LoadData, CallFunc_Array_Get_Item_1) == 0x0000D8, "Member 'GrowingPlant_C_LoadData::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_LoadData, CallFunc_Array_Get_Item_2) == 0x0000E8, "Member 'GrowingPlant_C_LoadData::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_LoadData, CallFunc_Array_Get_Item_3) == 0x0000F8, "Member 'GrowingPlant_C_LoadData::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_LoadData, CallFunc_Array_Get_Item_4) == 0x0000FC, "Member 'GrowingPlant_C_LoadData::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_LoadData, CallFunc_Array_Get_Item_5) == 0x000100, "Member 'GrowingPlant_C_LoadData::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_LoadData, CallFunc_Array_Get_Item_6) == 0x000104, "Member 'GrowingPlant_C_LoadData::CallFunc_Array_Get_Item_6' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_LoadData, CallFunc_Array_Get_Item_7) == 0x000108, "Member 'GrowingPlant_C_LoadData::CallFunc_Array_Get_Item_7' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_LoadData, CallFunc_Conv_StringToName_ReturnValue) == 0x000118, "Member 'GrowingPlant_C_LoadData::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");

// Function growingPlant.growingPlant_C.getData
// 0x02E0 (0x02E0 - 0x0000)
struct GrowingPlant_C_GetData final
{
public:
	struct FStruct_save                           Data_0;                                            // 0x0000(0x00C0)(Parm, OutParm, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<float>                                 K2Node_MakeArray_Array;                            // 0x00D0(0x0010)(ReferenceParm)
	TArray<class FString>                         K2Node_MakeArray_Array_1;                          // 0x00E0(0x0010)(ReferenceParm)
	struct FStruct_mFloat                         K2Node_MakeStruct_struct_mFloat;                   // 0x00F0(0x0010)(HasGetValueTypeHash)
	struct FStruct_mString                        K2Node_MakeStruct_struct_mString;                  // 0x0100(0x0010)(HasGetValueTypeHash)
	struct FStruct_save                           CallFunc_getData_data;                             // 0x0110(0x00C0)(HasGetValueTypeHash)
	struct FStruct_mFloat                         CallFunc_Array_Get_Item;                           // 0x01D0(0x0010)(HasGetValueTypeHash)
	struct FStruct_mString                        CallFunc_Array_Get_Item_1;                         // 0x01E0(0x0010)(HasGetValueTypeHash)
	TArray<struct FStruct_mFloat>                 K2Node_MakeArray_Array_2;                          // 0x01F0(0x0010)(ReferenceParm)
	struct FStruct_mString                        CallFunc_Array_Get_Item_2;                         // 0x0200(0x0010)(HasGetValueTypeHash)
	TArray<struct FStruct_mString>                K2Node_MakeArray_Array_3;                          // 0x0210(0x0010)(ReferenceParm)
	struct FStruct_save                           K2Node_SetFieldsInStruct_StructOut;                // 0x0220(0x00C0)(HasGetValueTypeHash)
};
static_assert(alignof(GrowingPlant_C_GetData) == 0x000010, "Wrong alignment on GrowingPlant_C_GetData");
static_assert(sizeof(GrowingPlant_C_GetData) == 0x0002E0, "Wrong size on GrowingPlant_C_GetData");
static_assert(offsetof(GrowingPlant_C_GetData, Data_0) == 0x000000, "Member 'GrowingPlant_C_GetData::Data_0' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_GetData, CallFunc_Conv_NameToString_ReturnValue) == 0x0000C0, "Member 'GrowingPlant_C_GetData::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_GetData, K2Node_MakeArray_Array) == 0x0000D0, "Member 'GrowingPlant_C_GetData::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_GetData, K2Node_MakeArray_Array_1) == 0x0000E0, "Member 'GrowingPlant_C_GetData::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_GetData, K2Node_MakeStruct_struct_mFloat) == 0x0000F0, "Member 'GrowingPlant_C_GetData::K2Node_MakeStruct_struct_mFloat' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_GetData, K2Node_MakeStruct_struct_mString) == 0x000100, "Member 'GrowingPlant_C_GetData::K2Node_MakeStruct_struct_mString' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_GetData, CallFunc_getData_data) == 0x000110, "Member 'GrowingPlant_C_GetData::CallFunc_getData_data' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_GetData, CallFunc_Array_Get_Item) == 0x0001D0, "Member 'GrowingPlant_C_GetData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_GetData, CallFunc_Array_Get_Item_1) == 0x0001E0, "Member 'GrowingPlant_C_GetData::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_GetData, K2Node_MakeArray_Array_2) == 0x0001F0, "Member 'GrowingPlant_C_GetData::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_GetData, CallFunc_Array_Get_Item_2) == 0x000200, "Member 'GrowingPlant_C_GetData::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_GetData, K2Node_MakeArray_Array_3) == 0x000210, "Member 'GrowingPlant_C_GetData::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_GetData, K2Node_SetFieldsInStruct_StructOut) == 0x000220, "Member 'GrowingPlant_C_GetData::K2Node_SetFieldsInStruct_StructOut' has a wrong offset!");

// Function growingPlant.growingPlant_C.processKeys
// 0x0028 (0x0028 - 0x0000)
struct GrowingPlant_C_ProcessKeys final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_getObjectFromKey_Output;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_processKeys_return;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AProp_farmPot_C*                        K2Node_DynamicCast_AsProp_Farm_Pot;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GrowingPlant_C_ProcessKeys) == 0x000008, "Wrong alignment on GrowingPlant_C_ProcessKeys");
static_assert(sizeof(GrowingPlant_C_ProcessKeys) == 0x000028, "Wrong size on GrowingPlant_C_ProcessKeys");
static_assert(offsetof(GrowingPlant_C_ProcessKeys, Return) == 0x000000, "Member 'GrowingPlant_C_ProcessKeys::Return' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ProcessKeys, CallFunc_getObjectFromKey_Output) == 0x000008, "Member 'GrowingPlant_C_ProcessKeys::CallFunc_getObjectFromKey_Output' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ProcessKeys, CallFunc_processKeys_return) == 0x000010, "Member 'GrowingPlant_C_ProcessKeys::CallFunc_processKeys_return' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ProcessKeys, K2Node_DynamicCast_AsProp_Farm_Pot) == 0x000018, "Member 'GrowingPlant_C_ProcessKeys::K2Node_DynamicCast_AsProp_Farm_Pot' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_ProcessKeys, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'GrowingPlant_C_ProcessKeys::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function growingPlant.growingPlant_C.upd
// 0x0090 (0x0090 - 0x0000)
struct GrowingPlant_C_Upd final
{
public:
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_farmPlant                      CallFunc_GetDataTableRowFromName_OutRow;           // 0x0008(0x0080)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue_1;              // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue_2;              // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GrowingPlant_C_Upd) == 0x000008, "Wrong alignment on GrowingPlant_C_Upd");
static_assert(sizeof(GrowingPlant_C_Upd) == 0x000090, "Wrong size on GrowingPlant_C_Upd");
static_assert(offsetof(GrowingPlant_C_Upd, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000000, "Member 'GrowingPlant_C_Upd::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_Upd, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000001, "Member 'GrowingPlant_C_Upd::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_Upd, CallFunc_GetDataTableRowFromName_OutRow) == 0x000008, "Member 'GrowingPlant_C_Upd::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_Upd, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000088, "Member 'GrowingPlant_C_Upd::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_Upd, CallFunc_BooleanAND_ReturnValue) == 0x000089, "Member 'GrowingPlant_C_Upd::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_Upd, CallFunc_SetStaticMesh_ReturnValue) == 0x00008A, "Member 'GrowingPlant_C_Upd::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_Upd, CallFunc_SetStaticMesh_ReturnValue_1) == 0x00008B, "Member 'GrowingPlant_C_Upd::CallFunc_SetStaticMesh_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_Upd, CallFunc_SetStaticMesh_ReturnValue_2) == 0x00008C, "Member 'GrowingPlant_C_Upd::CallFunc_SetStaticMesh_ReturnValue_2' has a wrong offset!");

// Function growingPlant.growingPlant_C.addFruit
// 0x0380 (0x0380 - 0x0000)
struct GrowingPlant_C_AddFruit final
{
public:
	struct FTransform                             RandTr;                                            // 0x0000(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Variable;                                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0048(0x0010)(ConstParm, ReferenceParm)
	int32                                         Temp_int_Variable_2;                               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_2;           // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RandomUnitVector_ReturnValue;             // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0080(0x0030)(IsPlainOldData, NoDestructor)
	TArray<EObjectTypeQuery>                      CallFunc_obj_statDynPhys_obj;                      // 0x00B0(0x0010)(ReferenceParm)
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue;            // 0x00C0(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_SphereTraceSingleForObjects_OutHit;       // 0x012C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_SphereTraceSingleForObjects_ReturnValue;  // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B5[0x3];                                      // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x01B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_3;         // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_propToObject_ReturnValue;                 // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C9[0x3];                                      // 0x01C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_food                           CallFunc_propToObject_foodData;                    // 0x01CC(0x001C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_propToObject_object;                      // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_propToObject_isFood;                      // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_prop3                          CallFunc_propToObject_fuckYouRetard;               // 0x01F8(0x0080)(HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0278(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0284(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0290(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1; // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_FinishSpawningActor_ReturnValue;          // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IInt_player_C>         K2Node_DynamicCast_AsInt_Player;                   // 0x02D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AProp_C*                                CallFunc_FinishSpawningActor_ReturnValue_1;        // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AProp_C*                                CallFunc_asProp_return;                            // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2; // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AProp_food_C*                           CallFunc_FinishSpawningActor_ReturnValue_2;        // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Select_Default;                             // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0318(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TScriptInterface<class IInt_objects_C>        K2Node_DynamicCast_AsInt_Objects;                  // 0x0328(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0339(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33A[0x6];                                      // 0x033A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Array_Random_OutItem;                     // 0x0340(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Random_OutIndex;                    // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GrowingPlant_C_AddFruit) == 0x000010, "Wrong alignment on GrowingPlant_C_AddFruit");
static_assert(sizeof(GrowingPlant_C_AddFruit) == 0x000380, "Wrong size on GrowingPlant_C_AddFruit");
static_assert(offsetof(GrowingPlant_C_AddFruit, RandTr) == 0x000000, "Member 'GrowingPlant_C_AddFruit::RandTr' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, Temp_int_Variable) == 0x000030, "Member 'GrowingPlant_C_AddFruit::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000034, "Member 'GrowingPlant_C_AddFruit::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'GrowingPlant_C_AddFruit::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, Temp_int_Variable_1) == 0x00003C, "Member 'GrowingPlant_C_AddFruit::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000040, "Member 'GrowingPlant_C_AddFruit::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_Add_IntInt_ReturnValue_1) == 0x000044, "Member 'GrowingPlant_C_AddFruit::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, Temp_object_Variable) == 0x000048, "Member 'GrowingPlant_C_AddFruit::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, Temp_int_Variable_2) == 0x000058, "Member 'GrowingPlant_C_AddFruit::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, Temp_int_Variable_3) == 0x00005C, "Member 'GrowingPlant_C_AddFruit::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, Temp_int_Variable_4) == 0x000060, "Member 'GrowingPlant_C_AddFruit::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_LessEqual_IntInt_ReturnValue_2) == 0x000064, "Member 'GrowingPlant_C_AddFruit::CallFunc_LessEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_Add_IntInt_ReturnValue_2) == 0x000068, "Member 'GrowingPlant_C_AddFruit::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_RandomUnitVector_ReturnValue) == 0x00006C, "Member 'GrowingPlant_C_AddFruit::CallFunc_RandomUnitVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000080, "Member 'GrowingPlant_C_AddFruit::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_obj_statDynPhys_obj) == 0x0000B0, "Member 'GrowingPlant_C_AddFruit::CallFunc_obj_statDynPhys_obj' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_ComposeTransforms_ReturnValue) == 0x0000C0, "Member 'GrowingPlant_C_AddFruit::CallFunc_ComposeTransforms_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_RandomFloatInRange_ReturnValue) == 0x0000F0, "Member 'GrowingPlant_C_AddFruit::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_BreakTransform_Location) == 0x0000F4, "Member 'GrowingPlant_C_AddFruit::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_BreakTransform_Rotation) == 0x000100, "Member 'GrowingPlant_C_AddFruit::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_BreakTransform_Scale) == 0x00010C, "Member 'GrowingPlant_C_AddFruit::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000118, "Member 'GrowingPlant_C_AddFruit::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_Add_VectorVector_ReturnValue) == 0x00011C, "Member 'GrowingPlant_C_AddFruit::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x000128, "Member 'GrowingPlant_C_AddFruit::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_SphereTraceSingleForObjects_OutHit) == 0x00012C, "Member 'GrowingPlant_C_AddFruit::CallFunc_SphereTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_SphereTraceSingleForObjects_ReturnValue) == 0x0001B4, "Member 'GrowingPlant_C_AddFruit::CallFunc_SphereTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_MakeRotator_ReturnValue) == 0x0001B8, "Member 'GrowingPlant_C_AddFruit::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_RandomFloatInRange_ReturnValue_3) == 0x0001C4, "Member 'GrowingPlant_C_AddFruit::CallFunc_RandomFloatInRange_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_propToObject_ReturnValue) == 0x0001C8, "Member 'GrowingPlant_C_AddFruit::CallFunc_propToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_propToObject_foodData) == 0x0001CC, "Member 'GrowingPlant_C_AddFruit::CallFunc_propToObject_foodData' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_propToObject_object) == 0x0001E8, "Member 'GrowingPlant_C_AddFruit::CallFunc_propToObject_object' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_propToObject_isFood) == 0x0001F0, "Member 'GrowingPlant_C_AddFruit::CallFunc_propToObject_isFood' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_propToObject_fuckYouRetard) == 0x0001F8, "Member 'GrowingPlant_C_AddFruit::CallFunc_propToObject_fuckYouRetard' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_MakeRotator_ReturnValue_1) == 0x000278, "Member 'GrowingPlant_C_AddFruit::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_ComposeRotators_ReturnValue) == 0x000284, "Member 'GrowingPlant_C_AddFruit::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_MakeTransform_ReturnValue) == 0x000290, "Member 'GrowingPlant_C_AddFruit::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0002C0, "Member 'GrowingPlant_C_AddFruit::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1) == 0x0002C8, "Member 'GrowingPlant_C_AddFruit::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_FinishSpawningActor_ReturnValue) == 0x0002D0, "Member 'GrowingPlant_C_AddFruit::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, K2Node_DynamicCast_AsInt_Player) == 0x0002D8, "Member 'GrowingPlant_C_AddFruit::K2Node_DynamicCast_AsInt_Player' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, K2Node_DynamicCast_bSuccess) == 0x0002E8, "Member 'GrowingPlant_C_AddFruit::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_FinishSpawningActor_ReturnValue_1) == 0x0002F0, "Member 'GrowingPlant_C_AddFruit::CallFunc_FinishSpawningActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_asProp_return) == 0x0002F8, "Member 'GrowingPlant_C_AddFruit::CallFunc_asProp_return' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2) == 0x000300, "Member 'GrowingPlant_C_AddFruit::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_FinishSpawningActor_ReturnValue_2) == 0x000308, "Member 'GrowingPlant_C_AddFruit::CallFunc_FinishSpawningActor_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, K2Node_Select_Default) == 0x000310, "Member 'GrowingPlant_C_AddFruit::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_Conv_NameToString_ReturnValue) == 0x000318, "Member 'GrowingPlant_C_AddFruit::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, K2Node_DynamicCast_AsInt_Objects) == 0x000328, "Member 'GrowingPlant_C_AddFruit::K2Node_DynamicCast_AsInt_Objects' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, K2Node_DynamicCast_bSuccess_1) == 0x000338, "Member 'GrowingPlant_C_AddFruit::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_IsValidClass_ReturnValue) == 0x000339, "Member 'GrowingPlant_C_AddFruit::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_Array_Random_OutItem) == 0x000340, "Member 'GrowingPlant_C_AddFruit::CallFunc_Array_Random_OutItem' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_AddFruit, CallFunc_Array_Random_OutIndex) == 0x000370, "Member 'GrowingPlant_C_AddFruit::CallFunc_Array_Random_OutIndex' has a wrong offset!");

// Function growingPlant.growingPlant_C.canBePutInContainer
// 0x0001 (0x0001 - 0x0000)
struct GrowingPlant_C_CanBePutInContainer final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GrowingPlant_C_CanBePutInContainer) == 0x000001, "Wrong alignment on GrowingPlant_C_CanBePutInContainer");
static_assert(sizeof(GrowingPlant_C_CanBePutInContainer) == 0x000001, "Wrong size on GrowingPlant_C_CanBePutInContainer");
static_assert(offsetof(GrowingPlant_C_CanBePutInContainer, Return) == 0x000000, "Member 'GrowingPlant_C_CanBePutInContainer::Return' has a wrong offset!");

// Function growingPlant.growingPlant_C.asProp
// 0x0008 (0x0008 - 0x0000)
struct GrowingPlant_C_AsProp final
{
public:
	class AProp_C*                                Return;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GrowingPlant_C_AsProp) == 0x000008, "Wrong alignment on GrowingPlant_C_AsProp");
static_assert(sizeof(GrowingPlant_C_AsProp) == 0x000008, "Wrong size on GrowingPlant_C_AsProp");
static_assert(offsetof(GrowingPlant_C_AsProp, Return) == 0x000000, "Member 'GrowingPlant_C_AsProp::Return' has a wrong offset!");

// Function growingPlant.growingPlant_C.canPickup
// 0x0001 (0x0001 - 0x0000)
struct GrowingPlant_C_CanPickup final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GrowingPlant_C_CanPickup) == 0x000001, "Wrong alignment on GrowingPlant_C_CanPickup");
static_assert(sizeof(GrowingPlant_C_CanPickup) == 0x000001, "Wrong size on GrowingPlant_C_CanPickup");
static_assert(offsetof(GrowingPlant_C_CanPickup, Return) == 0x000000, "Member 'GrowingPlant_C_CanPickup::Return' has a wrong offset!");

// Function growingPlant.growingPlant_C.noRespawn
// 0x0002 (0x0002 - 0x0000)
struct GrowingPlant_C_NoRespawn final
{
public:
	bool                                          NoRespawn_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Return;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GrowingPlant_C_NoRespawn) == 0x000001, "Wrong alignment on GrowingPlant_C_NoRespawn");
static_assert(sizeof(GrowingPlant_C_NoRespawn) == 0x000002, "Wrong size on GrowingPlant_C_NoRespawn");
static_assert(offsetof(GrowingPlant_C_NoRespawn, NoRespawn_0) == 0x000000, "Member 'GrowingPlant_C_NoRespawn::NoRespawn_0' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_NoRespawn, Return) == 0x000001, "Member 'GrowingPlant_C_NoRespawn::Return' has a wrong offset!");

// Function growingPlant.growingPlant_C.lookAt
// 0x00B8 (0x00B8 - 0x0000)
struct GrowingPlant_C_LookAt final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Return;                                            // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    boundObjectReplace;                                // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Number;                                            // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GrowingPlant_C_LookAt) == 0x000008, "Wrong alignment on GrowingPlant_C_LookAt");
static_assert(sizeof(GrowingPlant_C_LookAt) == 0x0000B8, "Wrong size on GrowingPlant_C_LookAt");
static_assert(offsetof(GrowingPlant_C_LookAt, Player) == 0x000000, "Member 'GrowingPlant_C_LookAt::Player' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_LookAt, Hit) == 0x000008, "Member 'GrowingPlant_C_LookAt::Hit' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_LookAt, Return) == 0x000090, "Member 'GrowingPlant_C_LookAt::Return' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_LookAt, Text) == 0x000098, "Member 'GrowingPlant_C_LookAt::Text' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_LookAt, boundObjectReplace) == 0x0000A8, "Member 'GrowingPlant_C_LookAt::boundObjectReplace' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_LookAt, Number) == 0x0000B0, "Member 'GrowingPlant_C_LookAt::Number' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_LookAt, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000B1, "Member 'GrowingPlant_C_LookAt::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_LookAt, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000B2, "Member 'GrowingPlant_C_LookAt::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_LookAt, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000B3, "Member 'GrowingPlant_C_LookAt::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_LookAt, CallFunc_BooleanAND_ReturnValue) == 0x0000B4, "Member 'GrowingPlant_C_LookAt::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function growingPlant.growingPlant_C.isButtonUsed
// 0x0001 (0x0001 - 0x0000)
struct GrowingPlant_C_IsButtonUsed final
{
public:
	bool                                          Failed;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GrowingPlant_C_IsButtonUsed) == 0x000001, "Wrong alignment on GrowingPlant_C_IsButtonUsed");
static_assert(sizeof(GrowingPlant_C_IsButtonUsed) == 0x000001, "Wrong size on GrowingPlant_C_IsButtonUsed");
static_assert(offsetof(GrowingPlant_C_IsButtonUsed, Failed) == 0x000000, "Member 'GrowingPlant_C_IsButtonUsed::Failed' has a wrong offset!");

// Function growingPlant.growingPlant_C.landedOn
// 0x0010 (0x0010 - 0x0000)
struct GrowingPlant_C_LandedOn final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreFallDamage;                                  // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GrowingPlant_C_LandedOn) == 0x000008, "Wrong alignment on GrowingPlant_C_LandedOn");
static_assert(sizeof(GrowingPlant_C_LandedOn) == 0x000010, "Wrong size on GrowingPlant_C_LandedOn");
static_assert(offsetof(GrowingPlant_C_LandedOn, Player) == 0x000000, "Member 'GrowingPlant_C_LandedOn::Player' has a wrong offset!");
static_assert(offsetof(GrowingPlant_C_LandedOn, IgnoreFallDamage) == 0x000008, "Member 'GrowingPlant_C_LandedOn::IgnoreFallDamage' has a wrong offset!");

}

