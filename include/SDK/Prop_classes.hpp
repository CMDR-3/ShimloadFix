#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Prop

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Struct_prop3_structs.hpp"
#include "Enum_interactionActions_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass prop.prop_C
// 0x0138 (0x0358 - 0x0220)
class AProp_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPropThrown_C*                          PropThrown;                                        // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UComp_physicsImpact_C*                  PhysicsImpact;                                     // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AMainGamemode_C*                        GameMode;                                          // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Name_0;                                            // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FStruct_prop3                          PropData;                                          // 0x0250(0x0080)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          Static;                                            // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          RemoveWOrespawn;                                   // 0x02D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Frozen;                                            // 0x02D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          IgnoreSav;                                         // 0x02D3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IngoreFix;                                         // 0x02D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Sleep;                                             // 0x02D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D6[0x2];                                      // 0x02D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Key;                                               // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Hit;                                               // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Unhooked;                                          // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UFlammable_C*                           FlameBase;                                         // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CustomShadows;                                     // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Nametag;                                           // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class UComp_nametag_C*                        NametagComponent;                                  // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             TakenByPlayer;                                     // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          ReturnLookAt;                                      // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DoCastShadow;                                      // 0x0341(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_342[0x6];                                      // 0x0342(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             Awoken;                                            // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void Hit__DelegateSignature();
	void Unhooked__DelegateSignature();
	void TakenByPlayer__DelegateSignature(class AProp_C* Prop);
	void Awoken__DelegateSignature();
	void ExecuteUbergraph_prop(int32 EntryPoint);
	void Awake();
	void ImpactDamageCPP(float Damage, const struct FHitResult& Hit_0, class AActor* Actor, const struct FVector& Impact);
	void ExtinguishFire();
	void ActionOptionIndex(class AMainPlayer_C* Player, const struct FHitResult& Hit_0, Enum_interactionActions Action);
	void EnteredTheWater();
	void ExitTheWater();
	void Ignite(float Fuel);
	void FireDamage(float Damage);
	void Hittedd123(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit_0);
	void SetKey(const class FString& Key_0);
	void SetIgnoreSave(bool Ignore);
	void ImpactSquishCPP(class UPrimitiveComponent* Component);
	void AddDamage(class AActor* Actor, float Damage, const struct FHitResult& Hit_0, const struct FVector& Impact, bool SkipSetting);
	void SetPropProps(bool Static_0, bool Frozen_0, bool Active);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void GamemodeBeginPlay();
	void SettingsApplied(const struct FStruct_settings& Settings);
	void PlayerR(class AMainPlayer_C* Player);
	void PlayerHold(class AMainPlayer_C* Player);
	void PlayerUnequip(class AMainPlayer_C* Player);
	void UpdateStrAgl();
	void DamageByPlayer(class AMainPlayer_C* Player, const struct FHitResult& Hit_0, float Damage);
	void Thrown(class AMainPlayer_C* Player);
	void broken_fire();
	void broken();
	void SendName(class FName Name_0);
	void Kicked(bool Kick);
	void Player_use(class AMainPlayer_C* Player, const struct FHitResult& Hit_0);
	void DriveDetached();
	void GamemodePostKeys();
	void NewFunction_3();
	void NewFunction_2();
	void TexturePickerApply(class UUmg_texturePicker_C* Picker, class UTexture2D* Texture, int32 Index_0);
	void ApplyColor(const struct FLinearColor& Color);
	void PropRenderer_finishProps();
	void GamemodeMakeKeys();
	void AnyKey(const struct FKey& Key_0, bool Pressed);
	void GamemodePreLoad();
	void Unfocused();
	void Unfoc();
	void StuffUpgraded(class AMainGamemode_C* GameMode_0);
	void SignalSaved();
	void SignalDeleted();
	void HookTension(class AHook_C* Hook);
	void CleanSponge(float Clean, class AMainPlayer_C* Player);
	void Crafted();
	void Hooked(class AHook_C* Hook);
	void AttemptIgnite();
	void PlayerUsedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit_0);
	void Slice(bool Clean);
	void bitten();
	void ReachedByExplosion(const struct FVector& Location, float Damage);
	void PlayerLookAway(class AMainPlayer_C* Player);
	void Stepped(float Volume);
	void ActionName(class AMainPlayer_C* Player, const struct FHitResult& Hit_0, const class FString& Name_0);
	void AccumulateTemperature(float Temperature, float Speed);
	void AddTemperature(float Temperature);
	void MicrowaveElec();
	void PlayerHandAnyKey(class AMainPlayer_C* Player, const struct FKey& Key_0, bool Pressed);
	void PlayerHandMouse(class AMainPlayer_C* Player, const struct FVector2D& Mouse);
	void PlayerHandMouseWheel(class AMainPlayer_C* Player, float WheelDelta);
	void PlayerHandRelease_LMB(class AMainPlayer_C* Player);
	void PlayerHandRelease_RMB(class AMainPlayer_C* Player);
	void Exploded(float Damage, const struct FVector& Location);
	void PlayerHandUse_LMB(class AMainPlayer_C* Player);
	void PlayerHandUse_RMB(class AMainPlayer_C* Player);
	void ReceivedPhyiscsDamage(float Damage, const struct FHitResult& Hot);
	void Microwave();
	void SteppedOn(class AMainPlayer_C* Player, const struct FHitResult& Hit_0);
	void Unhook();
	void DigUp();
	void PhysPreDestroyed();
	void PhysDestroyed();
	void Virus(bool Activate);
	void Eaten();
	void LeaveWaterOrigin(class AWaterVolume_C* Water);
	void EnterWaterOrigin(class AWaterVolume_C* Water);
	void LeaveWater(class AWaterVolume_C* Water);
	void EnterWater(class AWaterVolume_C* Water);
	void ImpactDamage(float Damage, const struct FHitResult& Hit_0, class AActor* Actor, const struct FVector& Impact);
	void UserConstructionScript();
	void Init();
	void Afterplay();
	void Shadows(bool Shads);
	void SetNametag();
	void GetName(class FText* Name_0);
	void GetData(struct FStruct_save* Data);
	void LoadData(const struct FStruct_save& Data, bool* Return);
	void IgnoreSave(bool* IgnoreSave_0);
	void SkipPreDelete(bool* Skip);
	void GatherDataFromKey(bool* Gather);
	void LookAt(class AMainPlayer_C* Player, const struct FHitResult& Hit_0, bool* Return, class FString* Text, class UPrimitiveComponent** boundObjectReplace, uint8* Number);
	void IsButtonUsed(bool* Failed);
	void NoRespawn(bool NoRespawn_0, bool* Return);
	void CanPickup(bool* Return);
	void AsProp(class AProp_C** Return);
	void CanBePutInContainer(bool* Return);
	void LandedOn(class AMainPlayer_C* Player, bool* IgnoreFallDamage);
	void DreamInv(TArray<struct FStruct_save>& Invv, class ADreamBase_C** Base);
	void GetKey(class FString* Key_0);
	void ToolboxFix(class AProp_toolbox_C* Toolbox, bool* Return);
	void CanBeUsedHold(bool* Return);
	void ProcessKeys(bool* Return);
	void GetOnlyKey(class FString* Key_0);
	void SetPath(const TArray<struct FVector>& Path, bool* Return);
	void GetActionOptions(class AMainPlayer_C* Player, class UPrimitiveComponent* Component, class AActor* Actor, TArray<class FString>* Options, TArray<Enum_interactionActions>* Options_enum, TArray<class FText>* OptionsNamesOverlay, uint8* Number);
	void GascanFuel(class AProp_gascan_C* Gascan, bool* Fueled);
	void SkipRadial(bool* Skip);
	void GetPriceMultiplier(float* PriceMult);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"prop_C">();
	}
	static class AProp_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProp_C>();
	}
};
static_assert(alignof(AProp_C) == 0x000008, "Wrong alignment on AProp_C");
static_assert(sizeof(AProp_C) == 0x000358, "Wrong size on AProp_C");
static_assert(offsetof(AProp_C, UberGraphFrame) == 0x000220, "Member 'AProp_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AProp_C, PropThrown) == 0x000228, "Member 'AProp_C::PropThrown' has a wrong offset!");
static_assert(offsetof(AProp_C, PhysicsImpact) == 0x000230, "Member 'AProp_C::PhysicsImpact' has a wrong offset!");
static_assert(offsetof(AProp_C, StaticMesh) == 0x000238, "Member 'AProp_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(AProp_C, GameMode) == 0x000240, "Member 'AProp_C::GameMode' has a wrong offset!");
static_assert(offsetof(AProp_C, Name_0) == 0x000248, "Member 'AProp_C::Name_0' has a wrong offset!");
static_assert(offsetof(AProp_C, PropData) == 0x000250, "Member 'AProp_C::PropData' has a wrong offset!");
static_assert(offsetof(AProp_C, Static) == 0x0002D0, "Member 'AProp_C::Static' has a wrong offset!");
static_assert(offsetof(AProp_C, RemoveWOrespawn) == 0x0002D1, "Member 'AProp_C::RemoveWOrespawn' has a wrong offset!");
static_assert(offsetof(AProp_C, Frozen) == 0x0002D2, "Member 'AProp_C::Frozen' has a wrong offset!");
static_assert(offsetof(AProp_C, IgnoreSav) == 0x0002D3, "Member 'AProp_C::IgnoreSav' has a wrong offset!");
static_assert(offsetof(AProp_C, IngoreFix) == 0x0002D4, "Member 'AProp_C::IngoreFix' has a wrong offset!");
static_assert(offsetof(AProp_C, Sleep) == 0x0002D5, "Member 'AProp_C::Sleep' has a wrong offset!");
static_assert(offsetof(AProp_C, Key) == 0x0002D8, "Member 'AProp_C::Key' has a wrong offset!");
static_assert(offsetof(AProp_C, Hit) == 0x0002E8, "Member 'AProp_C::Hit' has a wrong offset!");
static_assert(offsetof(AProp_C, Unhooked) == 0x0002F8, "Member 'AProp_C::Unhooked' has a wrong offset!");
static_assert(offsetof(AProp_C, FlameBase) == 0x000308, "Member 'AProp_C::FlameBase' has a wrong offset!");
static_assert(offsetof(AProp_C, CustomShadows) == 0x000310, "Member 'AProp_C::CustomShadows' has a wrong offset!");
static_assert(offsetof(AProp_C, Nametag) == 0x000318, "Member 'AProp_C::Nametag' has a wrong offset!");
static_assert(offsetof(AProp_C, NametagComponent) == 0x000328, "Member 'AProp_C::NametagComponent' has a wrong offset!");
static_assert(offsetof(AProp_C, TakenByPlayer) == 0x000330, "Member 'AProp_C::TakenByPlayer' has a wrong offset!");
static_assert(offsetof(AProp_C, ReturnLookAt) == 0x000340, "Member 'AProp_C::ReturnLookAt' has a wrong offset!");
static_assert(offsetof(AProp_C, DoCastShadow) == 0x000341, "Member 'AProp_C::DoCastShadow' has a wrong offset!");
static_assert(offsetof(AProp_C, Awoken) == 0x000348, "Member 'AProp_C::Awoken' has a wrong offset!");

}

