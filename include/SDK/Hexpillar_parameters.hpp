#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hexpillar

#include "Basic.hpp"

#include "Struct_settings_structs.hpp"
#include "Struct_save_structs.hpp"
#include "Struct_mBool_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"
#include "Struct_mInt_structs.hpp"
#include "Engine_structs.hpp"
#include "Struct_mFloat_structs.hpp"


namespace SDK::Params
{

// Function hexpillar.hexpillar_C.dreamInv
// 0x0018 (0x0018 - 0x0000)
struct Hexpillar_C_DreamInv final
{
public:
	TArray<struct FStruct_save>                   Invv;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class ADreamBase_C*                           Base;                                              // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Hexpillar_C_DreamInv) == 0x000008, "Wrong alignment on Hexpillar_C_DreamInv");
static_assert(sizeof(Hexpillar_C_DreamInv) == 0x000018, "Wrong size on Hexpillar_C_DreamInv");
static_assert(offsetof(Hexpillar_C_DreamInv, Invv) == 0x000000, "Member 'Hexpillar_C_DreamInv::Invv' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_DreamInv, Base) == 0x000010, "Member 'Hexpillar_C_DreamInv::Base' has a wrong offset!");

// Function hexpillar.hexpillar_C.setPath
// 0x0018 (0x0018 - 0x0000)
struct Hexpillar_C_SetPath final
{
public:
	TArray<struct FVector>                        Path;                                              // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Hexpillar_C_SetPath) == 0x000008, "Wrong alignment on Hexpillar_C_SetPath");
static_assert(sizeof(Hexpillar_C_SetPath) == 0x000018, "Wrong size on Hexpillar_C_SetPath");
static_assert(offsetof(Hexpillar_C_SetPath, Path) == 0x000000, "Member 'Hexpillar_C_SetPath::Path' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_SetPath, Return) == 0x000010, "Member 'Hexpillar_C_SetPath::Return' has a wrong offset!");

// Function hexpillar.hexpillar_C.toolboxFix
// 0x0010 (0x0010 - 0x0000)
struct Hexpillar_C_ToolboxFix final
{
public:
	class AProp_toolbox_C*                        Toolbox;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Hexpillar_C_ToolboxFix) == 0x000008, "Wrong alignment on Hexpillar_C_ToolboxFix");
static_assert(sizeof(Hexpillar_C_ToolboxFix) == 0x000010, "Wrong size on Hexpillar_C_ToolboxFix");
static_assert(offsetof(Hexpillar_C_ToolboxFix, Toolbox) == 0x000000, "Member 'Hexpillar_C_ToolboxFix::Toolbox' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ToolboxFix, Return) == 0x000008, "Member 'Hexpillar_C_ToolboxFix::Return' has a wrong offset!");

// Function hexpillar.hexpillar_C.GetKey
// 0x0010 (0x0010 - 0x0000)
struct Hexpillar_C_GetKey final
{
public:
	class FString                                 Key_0;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Hexpillar_C_GetKey) == 0x000008, "Wrong alignment on Hexpillar_C_GetKey");
static_assert(sizeof(Hexpillar_C_GetKey) == 0x000010, "Wrong size on Hexpillar_C_GetKey");
static_assert(offsetof(Hexpillar_C_GetKey, Key_0) == 0x000000, "Member 'Hexpillar_C_GetKey::Key_0' has a wrong offset!");

// Function hexpillar.hexpillar_C.canBeUsedHold
// 0x0001 (0x0001 - 0x0000)
struct Hexpillar_C_CanBeUsedHold final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Hexpillar_C_CanBeUsedHold) == 0x000001, "Wrong alignment on Hexpillar_C_CanBeUsedHold");
static_assert(sizeof(Hexpillar_C_CanBeUsedHold) == 0x000001, "Wrong size on Hexpillar_C_CanBeUsedHold");
static_assert(offsetof(Hexpillar_C_CanBeUsedHold, Return) == 0x000000, "Member 'Hexpillar_C_CanBeUsedHold::Return' has a wrong offset!");

// Function hexpillar.hexpillar_C.processKeys
// 0x0001 (0x0001 - 0x0000)
struct Hexpillar_C_ProcessKeys final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Hexpillar_C_ProcessKeys) == 0x000001, "Wrong alignment on Hexpillar_C_ProcessKeys");
static_assert(sizeof(Hexpillar_C_ProcessKeys) == 0x000001, "Wrong size on Hexpillar_C_ProcessKeys");
static_assert(offsetof(Hexpillar_C_ProcessKeys, Return) == 0x000000, "Member 'Hexpillar_C_ProcessKeys::Return' has a wrong offset!");

// Function hexpillar.hexpillar_C.getOnlyKey
// 0x0010 (0x0010 - 0x0000)
struct Hexpillar_C_GetOnlyKey final
{
public:
	class FString                                 Key_0;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Hexpillar_C_GetOnlyKey) == 0x000008, "Wrong alignment on Hexpillar_C_GetOnlyKey");
static_assert(sizeof(Hexpillar_C_GetOnlyKey) == 0x000010, "Wrong size on Hexpillar_C_GetOnlyKey");
static_assert(offsetof(Hexpillar_C_GetOnlyKey, Key_0) == 0x000000, "Member 'Hexpillar_C_GetOnlyKey::Key_0' has a wrong offset!");

// Function hexpillar.hexpillar_C.getData
// 0x02D0 (0x02D0 - 0x0000)
struct Hexpillar_C_GetData final
{
public:
	struct FStruct_save                           Data;                                              // 0x0000(0x00C0)(Parm, OutParm, HasGetValueTypeHash)
	TArray<bool>                                  K2Node_MakeArray_Array;                            // 0x00C0(0x0010)(ReferenceParm)
	TArray<int32>                                 K2Node_MakeArray_Array_1;                          // 0x00D0(0x0010)(ReferenceParm)
	struct FStruct_mBool                          K2Node_MakeStruct_struct_mBool;                    // 0x00E0(0x0010)(HasGetValueTypeHash)
	struct FStruct_mInt                           K2Node_MakeStruct_struct_mInt;                     // 0x00F0(0x0010)(HasGetValueTypeHash)
	TArray<struct FStruct_mBool>                  K2Node_MakeArray_Array_2;                          // 0x0100(0x0010)(ReferenceParm)
	TArray<struct FStruct_mInt>                   K2Node_MakeArray_Array_3;                          // 0x0110(0x0010)(ReferenceParm)
	struct FStruct_save                           CallFunc_getData_data;                             // 0x0120(0x00C0)(HasGetValueTypeHash)
	TArray<float>                                 K2Node_MakeArray_Array_4;                          // 0x01E0(0x0010)(ReferenceParm)
	struct FStruct_mFloat                         K2Node_MakeStruct_struct_mFloat;                   // 0x01F0(0x0010)(HasGetValueTypeHash)
	TArray<struct FStruct_mFloat>                 K2Node_MakeArray_Array_5;                          // 0x0200(0x0010)(ReferenceParm)
	struct FStruct_save                           K2Node_SetFieldsInStruct_StructOut;                // 0x0210(0x00C0)(HasGetValueTypeHash)
};
static_assert(alignof(Hexpillar_C_GetData) == 0x000010, "Wrong alignment on Hexpillar_C_GetData");
static_assert(sizeof(Hexpillar_C_GetData) == 0x0002D0, "Wrong size on Hexpillar_C_GetData");
static_assert(offsetof(Hexpillar_C_GetData, Data) == 0x000000, "Member 'Hexpillar_C_GetData::Data' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_GetData, K2Node_MakeArray_Array) == 0x0000C0, "Member 'Hexpillar_C_GetData::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_GetData, K2Node_MakeArray_Array_1) == 0x0000D0, "Member 'Hexpillar_C_GetData::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_GetData, K2Node_MakeStruct_struct_mBool) == 0x0000E0, "Member 'Hexpillar_C_GetData::K2Node_MakeStruct_struct_mBool' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_GetData, K2Node_MakeStruct_struct_mInt) == 0x0000F0, "Member 'Hexpillar_C_GetData::K2Node_MakeStruct_struct_mInt' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_GetData, K2Node_MakeArray_Array_2) == 0x000100, "Member 'Hexpillar_C_GetData::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_GetData, K2Node_MakeArray_Array_3) == 0x000110, "Member 'Hexpillar_C_GetData::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_GetData, CallFunc_getData_data) == 0x000120, "Member 'Hexpillar_C_GetData::CallFunc_getData_data' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_GetData, K2Node_MakeArray_Array_4) == 0x0001E0, "Member 'Hexpillar_C_GetData::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_GetData, K2Node_MakeStruct_struct_mFloat) == 0x0001F0, "Member 'Hexpillar_C_GetData::K2Node_MakeStruct_struct_mFloat' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_GetData, K2Node_MakeArray_Array_5) == 0x000200, "Member 'Hexpillar_C_GetData::K2Node_MakeArray_Array_5' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_GetData, K2Node_SetFieldsInStruct_StructOut) == 0x000210, "Member 'Hexpillar_C_GetData::K2Node_SetFieldsInStruct_StructOut' has a wrong offset!");

// Function hexpillar.hexpillar_C.loadData
// 0x0110 (0x0110 - 0x0000)
struct Hexpillar_C_LoadData final
{
public:
	struct FStruct_save                           Data;                                              // 0x0000(0x00C0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_mInt                           CallFunc_Array_Get_Item;                           // 0x00C8(0x0010)(HasGetValueTypeHash)
	struct FStruct_mFloat                         CallFunc_Array_Get_Item_1;                         // 0x00D8(0x0010)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_2;                         // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_3;                         // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_mBool                          CallFunc_Array_Get_Item_4;                         // 0x00F0(0x0010)(HasGetValueTypeHash)
	bool                                          CallFunc_loadData_return;                          // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Get_Item_5;                         // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Hexpillar_C_LoadData) == 0x000010, "Wrong alignment on Hexpillar_C_LoadData");
static_assert(sizeof(Hexpillar_C_LoadData) == 0x000110, "Wrong size on Hexpillar_C_LoadData");
static_assert(offsetof(Hexpillar_C_LoadData, Data) == 0x000000, "Member 'Hexpillar_C_LoadData::Data' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_LoadData, Return) == 0x0000C0, "Member 'Hexpillar_C_LoadData::Return' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_LoadData, CallFunc_Array_Get_Item) == 0x0000C8, "Member 'Hexpillar_C_LoadData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_LoadData, CallFunc_Array_Get_Item_1) == 0x0000D8, "Member 'Hexpillar_C_LoadData::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_LoadData, CallFunc_Array_Get_Item_2) == 0x0000E8, "Member 'Hexpillar_C_LoadData::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_LoadData, CallFunc_Array_Get_Item_3) == 0x0000EC, "Member 'Hexpillar_C_LoadData::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_LoadData, CallFunc_Array_Get_Item_4) == 0x0000F0, "Member 'Hexpillar_C_LoadData::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_LoadData, CallFunc_loadData_return) == 0x000100, "Member 'Hexpillar_C_LoadData::CallFunc_loadData_return' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_LoadData, CallFunc_Array_Get_Item_5) == 0x000101, "Member 'Hexpillar_C_LoadData::CallFunc_Array_Get_Item_5' has a wrong offset!");

// Function hexpillar.hexpillar_C.upd
// 0x0154 (0x0154 - 0x0000)
struct Hexpillar_C_Upd final
{
public:
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0038(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_1;  // 0x00CC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Hexpillar_C_Upd) == 0x000004, "Wrong alignment on Hexpillar_C_Upd");
static_assert(sizeof(Hexpillar_C_Upd) == 0x000154, "Wrong size on Hexpillar_C_Upd");
static_assert(offsetof(Hexpillar_C_Upd, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000000, "Member 'Hexpillar_C_Upd::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_Upd, CallFunc_FClamp_ReturnValue) == 0x000004, "Member 'Hexpillar_C_Upd::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_Upd, CallFunc_Lerp_ReturnValue) == 0x000008, "Member 'Hexpillar_C_Upd::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_Upd, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'Hexpillar_C_Upd::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_Upd, CallFunc_MakeVector_ReturnValue) == 0x000010, "Member 'Hexpillar_C_Upd::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_Upd, CallFunc_Lerp_ReturnValue_1) == 0x00001C, "Member 'Hexpillar_C_Upd::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_Upd, CallFunc_MakeVector_ReturnValue_1) == 0x000020, "Member 'Hexpillar_C_Upd::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_Upd, CallFunc_MakeVector_ReturnValue_2) == 0x00002C, "Member 'Hexpillar_C_Upd::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_Upd, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000038, "Member 'Hexpillar_C_Upd::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_Upd, CallFunc_VLerp_ReturnValue) == 0x0000C0, "Member 'Hexpillar_C_Upd::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_Upd, CallFunc_K2_SetRelativeLocation_SweepHitResult_1) == 0x0000CC, "Member 'Hexpillar_C_Upd::CallFunc_K2_SetRelativeLocation_SweepHitResult_1' has a wrong offset!");

// Function hexpillar.hexpillar_C.stuffUpgraded
// 0x0008 (0x0008 - 0x0000)
struct Hexpillar_C_StuffUpgraded final
{
public:
	class AMainGamemode_C*                        GameMode_0;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Hexpillar_C_StuffUpgraded) == 0x000008, "Wrong alignment on Hexpillar_C_StuffUpgraded");
static_assert(sizeof(Hexpillar_C_StuffUpgraded) == 0x000008, "Wrong size on Hexpillar_C_StuffUpgraded");
static_assert(offsetof(Hexpillar_C_StuffUpgraded, GameMode_0) == 0x000000, "Member 'Hexpillar_C_StuffUpgraded::GameMode_0' has a wrong offset!");

// Function hexpillar.hexpillar_C.settingsApplied
// 0x0100 (0x0100 - 0x0000)
struct Hexpillar_C_SettingsApplied final
{
public:
	struct FStruct_settings                       Settings;                                          // 0x0000(0x0100)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Hexpillar_C_SettingsApplied) == 0x000008, "Wrong alignment on Hexpillar_C_SettingsApplied");
static_assert(sizeof(Hexpillar_C_SettingsApplied) == 0x000100, "Wrong size on Hexpillar_C_SettingsApplied");
static_assert(offsetof(Hexpillar_C_SettingsApplied, Settings) == 0x000000, "Member 'Hexpillar_C_SettingsApplied::Settings' has a wrong offset!");

// Function hexpillar.hexpillar_C.AnyKey
// 0x0020 (0x0020 - 0x0000)
struct Hexpillar_C_AnyKey final
{
public:
	struct FKey                                   Key_0;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Pressed;                                           // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Hexpillar_C_AnyKey) == 0x000008, "Wrong alignment on Hexpillar_C_AnyKey");
static_assert(sizeof(Hexpillar_C_AnyKey) == 0x000020, "Wrong size on Hexpillar_C_AnyKey");
static_assert(offsetof(Hexpillar_C_AnyKey, Key_0) == 0x000000, "Member 'Hexpillar_C_AnyKey::Key_0' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_AnyKey, Pressed) == 0x000018, "Member 'Hexpillar_C_AnyKey::Pressed' has a wrong offset!");

// Function hexpillar.hexpillar_C.applyColor
// 0x0010 (0x0010 - 0x0000)
struct Hexpillar_C_ApplyColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Hexpillar_C_ApplyColor) == 0x000004, "Wrong alignment on Hexpillar_C_ApplyColor");
static_assert(sizeof(Hexpillar_C_ApplyColor) == 0x000010, "Wrong size on Hexpillar_C_ApplyColor");
static_assert(offsetof(Hexpillar_C_ApplyColor, Color) == 0x000000, "Member 'Hexpillar_C_ApplyColor::Color' has a wrong offset!");

// Function hexpillar.hexpillar_C.texturePickerApply
// 0x0018 (0x0018 - 0x0000)
struct Hexpillar_C_TexturePickerApply final
{
public:
	class UUmg_texturePicker_C*                   Picker;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Texture;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Hexpillar_C_TexturePickerApply) == 0x000008, "Wrong alignment on Hexpillar_C_TexturePickerApply");
static_assert(sizeof(Hexpillar_C_TexturePickerApply) == 0x000018, "Wrong size on Hexpillar_C_TexturePickerApply");
static_assert(offsetof(Hexpillar_C_TexturePickerApply, Picker) == 0x000000, "Member 'Hexpillar_C_TexturePickerApply::Picker' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_TexturePickerApply, Texture) == 0x000008, "Member 'Hexpillar_C_TexturePickerApply::Texture' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_TexturePickerApply, Index_0) == 0x000010, "Member 'Hexpillar_C_TexturePickerApply::Index_0' has a wrong offset!");

// Function hexpillar.hexpillar_C.addDamage
// 0x00A8 (0x00A8 - 0x0000)
struct Hexpillar_C_AddDamage final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x000C(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                Impact;                                            // 0x0094(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipSetting;                                       // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Hexpillar_C_AddDamage) == 0x000008, "Wrong alignment on Hexpillar_C_AddDamage");
static_assert(sizeof(Hexpillar_C_AddDamage) == 0x0000A8, "Wrong size on Hexpillar_C_AddDamage");
static_assert(offsetof(Hexpillar_C_AddDamage, Actor) == 0x000000, "Member 'Hexpillar_C_AddDamage::Actor' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_AddDamage, Damage) == 0x000008, "Member 'Hexpillar_C_AddDamage::Damage' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_AddDamage, Hit) == 0x00000C, "Member 'Hexpillar_C_AddDamage::Hit' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_AddDamage, Impact) == 0x000094, "Member 'Hexpillar_C_AddDamage::Impact' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_AddDamage, SkipSetting) == 0x0000A0, "Member 'Hexpillar_C_AddDamage::SkipSetting' has a wrong offset!");

// Function hexpillar.hexpillar_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Hexpillar_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Hexpillar_C_ReceiveTick) == 0x000004, "Wrong alignment on Hexpillar_C_ReceiveTick");
static_assert(sizeof(Hexpillar_C_ReceiveTick) == 0x000004, "Wrong size on Hexpillar_C_ReceiveTick");
static_assert(offsetof(Hexpillar_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Hexpillar_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function hexpillar.hexpillar_C.reachedByExplosion
// 0x0010 (0x0010 - 0x0000)
struct Hexpillar_C_ReachedByExplosion final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Hexpillar_C_ReachedByExplosion) == 0x000004, "Wrong alignment on Hexpillar_C_ReachedByExplosion");
static_assert(sizeof(Hexpillar_C_ReachedByExplosion) == 0x000010, "Wrong size on Hexpillar_C_ReachedByExplosion");
static_assert(offsetof(Hexpillar_C_ReachedByExplosion, Location) == 0x000000, "Member 'Hexpillar_C_ReachedByExplosion::Location' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ReachedByExplosion, Damage) == 0x00000C, "Member 'Hexpillar_C_ReachedByExplosion::Damage' has a wrong offset!");

// Function hexpillar.hexpillar_C.exploded
// 0x0010 (0x0010 - 0x0000)
struct Hexpillar_C_Exploded final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Hexpillar_C_Exploded) == 0x000004, "Wrong alignment on Hexpillar_C_Exploded");
static_assert(sizeof(Hexpillar_C_Exploded) == 0x000010, "Wrong size on Hexpillar_C_Exploded");
static_assert(offsetof(Hexpillar_C_Exploded, Damage) == 0x000000, "Member 'Hexpillar_C_Exploded::Damage' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_Exploded, Location) == 0x000004, "Member 'Hexpillar_C_Exploded::Location' has a wrong offset!");

// Function hexpillar.hexpillar_C.ExecuteUbergraph_hexpillar
// 0x05A0 (0x05A0 - 0x0000)
struct Hexpillar_C_ExecuteUbergraph_hexpillar final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainGamemode_C*                        K2Node_Event_gamemode;                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_settings                       K2Node_Event_settings;                             // 0x0010(0x0100)(HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_key;                                  // 0x0110(0x0018)(HasGetValueTypeHash)
	bool                                          K2Node_Event_pressed;                              // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Event_color;                                // 0x012C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUmg_texturePicker_C*                   K2Node_Event_picker;                               // 0x0140(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Event_texture;                              // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_index;                                // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloat_ReturnValue;                  // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue;                         // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VictoryFloatPlusEquals_FloatOut;          // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x016C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0178(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0194(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x01B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      CallFunc_obj_triggerStat_obj;                      // 0x01C0(0x0010)(ReferenceParm)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D1[0x3];                                      // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBoolWithWeight_ReturnValue;         // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x01DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1DB[0x1];                                      // 0x01DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloat_ReturnValue_1;                // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_actor;                                // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_2;                             // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x01EC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_Event_impact;                               // 0x0274(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_skipSetting;                          // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_281[0x3];                                      // 0x0281(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x0284(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IInt_objects_C>        CallFunc_impactDamage_self_CastInput;              // 0x0290(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x02A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A5[0x3];                                      // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGlobalTimeDilation_ReturnValue;        // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WasRecentlyRendered_ReturnValue;          // 0x02B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x02B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B2[0x2];                                      // 0x02B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x02B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x02CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x02D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x02E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x02F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloat_ReturnValue_2;                // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Ease_ReturnValue_1;                       // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0304(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_305[0x3];                                      // 0x0305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x030C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30D[0x3];                                      // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloat_ReturnValue_3;                // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0318(0x0010)(ConstParm, ReferenceParm)
	float                                         CallFunc_Ease_ReturnValue_2;                       // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingleForObjects_OutHit;         // 0x032C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingleForObjects_ReturnValue;    // 0x03B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B5[0x3];                                      // 0x03B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x03B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x03C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x03C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C6[0x2];                                      // 0x03C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x03CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x03D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x03DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x03E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x03F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0400(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0408(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0410(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0418(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0424(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x042C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0438(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0444(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0450(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_451[0x3];                                      // 0x0451(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0454(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0458(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x045C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0460(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_461[0x3];                                      // 0x0461(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GridSnap_Float_ReturnValue;               // 0x0464(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0468(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_469[0x3];                                      // 0x0469(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x046C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0478(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_479[0x3];                                      // 0x0479(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x047C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_504[0xC];                                      // 0x0504(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0510(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                K2Node_Event_location_1;                           // 0x0540(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage_1;                             // 0x054C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0550(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0558(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55C[0x4];                                      // 0x055C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHexpillar_C*                           CallFunc_FinishSpawningActor_ReturnValue;          // 0x0560(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_damage;                               // 0x0568(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_location;                             // 0x056C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0578(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57C[0x4];                                      // 0x057C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IInt_objects_C>        CallFunc_impactDamage_self_CastInput_1;            // 0x0580(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IInt_objects_C>        CallFunc_impactDamage_self_CastInput_2;            // 0x0590(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Hexpillar_C_ExecuteUbergraph_hexpillar) == 0x000010, "Wrong alignment on Hexpillar_C_ExecuteUbergraph_hexpillar");
static_assert(sizeof(Hexpillar_C_ExecuteUbergraph_hexpillar) == 0x0005A0, "Wrong size on Hexpillar_C_ExecuteUbergraph_hexpillar");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, EntryPoint) == 0x000000, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::EntryPoint' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, K2Node_Event_gamemode) == 0x000008, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::K2Node_Event_gamemode' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, K2Node_Event_settings) == 0x000010, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::K2Node_Event_settings' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, K2Node_Event_key) == 0x000110, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::K2Node_Event_key' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, K2Node_Event_pressed) == 0x000128, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::K2Node_Event_pressed' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, K2Node_Event_color) == 0x00012C, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::K2Node_Event_color' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, K2Node_Event_picker) == 0x000140, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::K2Node_Event_picker' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, K2Node_Event_texture) == 0x000148, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::K2Node_Event_texture' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, K2Node_Event_index) == 0x000150, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::K2Node_Event_index' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_RandomFloat_ReturnValue) == 0x000154, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_RandomFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_Ease_ReturnValue) == 0x000158, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_VictoryFloatPlusEquals_FloatOut) == 0x00015C, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_VictoryFloatPlusEquals_FloatOut' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_GetForwardVector_ReturnValue) == 0x000160, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00016C, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000178, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_Add_VectorVector_ReturnValue) == 0x000184, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, Temp_int_Variable) == 0x000190, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000194, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, Temp_int_Variable_1) == 0x0001A0, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_RandomIntegerInRange_ReturnValue) == 0x0001A4, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_Multiply_IntFloat_ReturnValue) == 0x0001A8, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_Add_IntInt_ReturnValue) == 0x0001AC, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_MakeRotator_ReturnValue) == 0x0001B0, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_obj_triggerStat_obj) == 0x0001C0, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_obj_triggerStat_obj' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0001D0, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x0001D4, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_RandomBoolWithWeight_ReturnValue) == 0x0001D8, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_RandomBoolWithWeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_BooleanAND_ReturnValue) == 0x0001D9, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0001DA, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_RandomFloat_ReturnValue_1) == 0x0001DC, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_RandomFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, K2Node_Event_actor) == 0x0001E0, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::K2Node_Event_actor' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, K2Node_Event_damage_2) == 0x0001E8, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::K2Node_Event_damage_2' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, K2Node_Event_hit) == 0x0001EC, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, K2Node_Event_impact) == 0x000274, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::K2Node_Event_impact' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, K2Node_Event_skipSetting) == 0x000280, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::K2Node_Event_skipSetting' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_Divide_VectorFloat_ReturnValue) == 0x000284, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_impactDamage_self_CastInput) == 0x000290, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_impactDamage_self_CastInput' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, K2Node_Event_DeltaSeconds) == 0x0002A0, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0002A4, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_GetGlobalTimeDilation_ReturnValue) == 0x0002A8, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_GetGlobalTimeDilation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_FTrunc_ReturnValue) == 0x0002AC, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_WasRecentlyRendered_ReturnValue) == 0x0002B0, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_WasRecentlyRendered_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x0002B1, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0002B4, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_GetPlayerCharacter_ReturnValue) == 0x0002C0, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_RandomFloatInRange_ReturnValue) == 0x0002C8, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0002CC, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_RotateAngleAxis_ReturnValue) == 0x0002D8, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x0002E4, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_Normal_ReturnValue) == 0x0002F0, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_RandomFloat_ReturnValue_2) == 0x0002FC, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_RandomFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_Ease_ReturnValue_1) == 0x000300, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_Ease_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_Less_FloatFloat_ReturnValue) == 0x000304, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_Subtract_IntInt_ReturnValue) == 0x000308, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_BooleanAND_ReturnValue_1) == 0x00030C, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_RandomFloat_ReturnValue_3) == 0x000310, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_RandomFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, Temp_object_Variable) == 0x000318, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_Ease_ReturnValue_2) == 0x000328, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_Ease_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_LineTraceSingleForObjects_OutHit) == 0x00032C, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_LineTraceSingleForObjects_OutHit' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_LineTraceSingleForObjects_ReturnValue) == 0x0003B4, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_LineTraceSingleForObjects_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_VLerp_ReturnValue) == 0x0003B8, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_BreakHitResult_bBlockingHit) == 0x0003C4, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_BreakHitResult_bInitialOverlap) == 0x0003C5, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_BreakHitResult_Time) == 0x0003C8, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_BreakHitResult_Distance) == 0x0003CC, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_BreakHitResult_Location) == 0x0003D0, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_BreakHitResult_ImpactPoint) == 0x0003DC, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_BreakHitResult_Normal) == 0x0003E8, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_BreakHitResult_ImpactNormal) == 0x0003F4, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_BreakHitResult_PhysMat) == 0x000400, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_BreakHitResult_HitActor) == 0x000408, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_BreakHitResult_HitComponent) == 0x000410, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_BreakHitResult_HitBoneName) == 0x000418, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_BreakHitResult_HitItem) == 0x000420, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_BreakHitResult_ElementIndex) == 0x000424, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_BreakHitResult_FaceIndex) == 0x000428, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_BreakHitResult_TraceStart) == 0x00042C, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_BreakHitResult_TraceEnd) == 0x000438, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000444, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000450, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_BreakRotator_Roll) == 0x000454, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_BreakRotator_Pitch) == 0x000458, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_BreakRotator_Yaw) == 0x00045C, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000460, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_GridSnap_Float_ReturnValue) == 0x000464, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_GridSnap_Float_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_BooleanOR_ReturnValue) == 0x000468, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_MakeRotator_ReturnValue_1) == 0x00046C, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_BooleanAND_ReturnValue_2) == 0x000478, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x00047C, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_MakeTransform_ReturnValue) == 0x000510, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, K2Node_Event_location_1) == 0x000540, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::K2Node_Event_location_1' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, K2Node_Event_damage_1) == 0x00054C, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::K2Node_Event_damage_1' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000550, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000558, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_FinishSpawningActor_ReturnValue) == 0x000560, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, K2Node_Event_damage) == 0x000568, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::K2Node_Event_damage' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, K2Node_Event_location) == 0x00056C, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::K2Node_Event_location' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000578, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_impactDamage_self_CastInput_1) == 0x000580, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_impactDamage_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(Hexpillar_C_ExecuteUbergraph_hexpillar, CallFunc_impactDamage_self_CastInput_2) == 0x000590, "Member 'Hexpillar_C_ExecuteUbergraph_hexpillar::CallFunc_impactDamage_self_CastInput_2' has a wrong offset!");

}

