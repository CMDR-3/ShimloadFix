#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Prop_poster

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Struct_settings_structs.hpp"
#include "Struct_save_structs.hpp"
#include "Struct_mInt_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function prop_poster.prop_poster_C.ExecuteUbergraph_prop_poster
// 0x0288 (0x0288 - 0x0000)
struct Prop_poster_C_ExecuteUbergraph_prop_poster final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_settings                       K2Node_Event_settings;                             // 0x0008(0x0100)(HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_2;                             // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11A[0x2];                                      // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0124(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0168(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player_1;                             // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_normalRot_ReturnValue;                    // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GridSnap_ReturnValue;                     // 0x01B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectPointOnToPlane_ReturnValue;        // 0x01CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GridSnap_Float_ReturnValue;               // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GridSnap_Float_ReturnValue_1;             // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GridSnap_Float_ReturnValue_2;             // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x01F0(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_poster_C_ExecuteUbergraph_prop_poster) == 0x000008, "Wrong alignment on Prop_poster_C_ExecuteUbergraph_prop_poster");
static_assert(sizeof(Prop_poster_C_ExecuteUbergraph_prop_poster) == 0x000288, "Wrong size on Prop_poster_C_ExecuteUbergraph_prop_poster");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, EntryPoint) == 0x000000, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::EntryPoint' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, K2Node_Event_settings) == 0x000008, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::K2Node_Event_settings' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, K2Node_Event_DeltaSeconds) == 0x000108, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, K2Node_Event_player_2) == 0x000110, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_BreakHitResult_bBlockingHit) == 0x000118, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_BreakHitResult_bInitialOverlap) == 0x000119, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_BreakHitResult_Time) == 0x00011C, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_BreakHitResult_Distance) == 0x000120, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_BreakHitResult_Location) == 0x000124, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_BreakHitResult_ImpactPoint) == 0x000130, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_BreakHitResult_Normal) == 0x00013C, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_BreakHitResult_ImpactNormal) == 0x000148, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_BreakHitResult_PhysMat) == 0x000158, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_BreakHitResult_HitActor) == 0x000160, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_BreakHitResult_HitComponent) == 0x000168, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_BreakHitResult_HitBoneName) == 0x000170, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_BreakHitResult_HitItem) == 0x000178, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_BreakHitResult_ElementIndex) == 0x00017C, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_BreakHitResult_FaceIndex) == 0x000180, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_BreakHitResult_TraceStart) == 0x000184, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_BreakHitResult_TraceEnd) == 0x000190, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, K2Node_Event_player_1) == 0x0001A0, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_normalRot_ReturnValue) == 0x0001A8, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_normalRot_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_GridSnap_ReturnValue) == 0x0001B4, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_GridSnap_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_BreakRotator_Roll) == 0x0001C0, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_BreakRotator_Pitch) == 0x0001C4, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_BreakRotator_Yaw) == 0x0001C8, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_ProjectPointOnToPlane_ReturnValue) == 0x0001CC, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_ProjectPointOnToPlane_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_GridSnap_Float_ReturnValue) == 0x0001D8, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_GridSnap_Float_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_GridSnap_Float_ReturnValue_1) == 0x0001DC, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_GridSnap_Float_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_GridSnap_Float_ReturnValue_2) == 0x0001E0, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_GridSnap_Float_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_MakeRotator_ReturnValue) == 0x0001E4, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x0001F0, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000278, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_ExecuteUbergraph_prop_poster, K2Node_Event_player) == 0x000280, "Member 'Prop_poster_C_ExecuteUbergraph_prop_poster::K2Node_Event_player' has a wrong offset!");

// Function prop_poster.prop_poster_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Prop_poster_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_poster_C_ReceiveTick) == 0x000004, "Wrong alignment on Prop_poster_C_ReceiveTick");
static_assert(sizeof(Prop_poster_C_ReceiveTick) == 0x000004, "Wrong size on Prop_poster_C_ReceiveTick");
static_assert(offsetof(Prop_poster_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Prop_poster_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function prop_poster.prop_poster_C.put
// 0x00E0 (0x00E0 - 0x0000)
struct Prop_poster_C_Put final
{
public:
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_85[0xB];                                       // 0x0085(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0090(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APoster_c*                              CallFunc_FinishSpawningActor_ReturnValue;          // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_poster_C_Put) == 0x000010, "Wrong alignment on Prop_poster_C_Put");
static_assert(sizeof(Prop_poster_C_Put) == 0x0000E0, "Wrong size on Prop_poster_C_Put");
static_assert(offsetof(Prop_poster_C_Put, CallFunc_BreakHitResult_bBlockingHit) == 0x000000, "Member 'Prop_poster_C_Put::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_Put, CallFunc_BreakHitResult_bInitialOverlap) == 0x000001, "Member 'Prop_poster_C_Put::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_Put, CallFunc_BreakHitResult_Time) == 0x000004, "Member 'Prop_poster_C_Put::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_Put, CallFunc_BreakHitResult_Distance) == 0x000008, "Member 'Prop_poster_C_Put::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_Put, CallFunc_BreakHitResult_Location) == 0x00000C, "Member 'Prop_poster_C_Put::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_Put, CallFunc_BreakHitResult_ImpactPoint) == 0x000018, "Member 'Prop_poster_C_Put::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_Put, CallFunc_BreakHitResult_Normal) == 0x000024, "Member 'Prop_poster_C_Put::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_Put, CallFunc_BreakHitResult_ImpactNormal) == 0x000030, "Member 'Prop_poster_C_Put::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_Put, CallFunc_BreakHitResult_PhysMat) == 0x000040, "Member 'Prop_poster_C_Put::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_Put, CallFunc_BreakHitResult_HitActor) == 0x000048, "Member 'Prop_poster_C_Put::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_Put, CallFunc_BreakHitResult_HitComponent) == 0x000050, "Member 'Prop_poster_C_Put::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_Put, CallFunc_BreakHitResult_HitBoneName) == 0x000058, "Member 'Prop_poster_C_Put::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_Put, CallFunc_BreakHitResult_HitItem) == 0x000060, "Member 'Prop_poster_C_Put::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_Put, CallFunc_BreakHitResult_ElementIndex) == 0x000064, "Member 'Prop_poster_C_Put::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_Put, CallFunc_BreakHitResult_FaceIndex) == 0x000068, "Member 'Prop_poster_C_Put::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_Put, CallFunc_BreakHitResult_TraceStart) == 0x00006C, "Member 'Prop_poster_C_Put::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_Put, CallFunc_BreakHitResult_TraceEnd) == 0x000078, "Member 'Prop_poster_C_Put::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_Put, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x000084, "Member 'Prop_poster_C_Put::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_Put, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000090, "Member 'Prop_poster_C_Put::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_Put, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0000C0, "Member 'Prop_poster_C_Put::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_Put, CallFunc_FinishSpawningActor_ReturnValue) == 0x0000C8, "Member 'Prop_poster_C_Put::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_Put, CallFunc_Less_IntInt_ReturnValue) == 0x0000D0, "Member 'Prop_poster_C_Put::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_Put, CallFunc_SelectInt_ReturnValue) == 0x0000D4, "Member 'Prop_poster_C_Put::CallFunc_SelectInt_ReturnValue' has a wrong offset!");

// Function prop_poster.prop_poster_C.setTex
// 0x0028 (0x0028 - 0x0000)
struct Prop_poster_C_SetTex final
{
public:
	class UTexture2D*                             CallFunc_getPosters_Output;                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Prop_poster_C_SetTex) == 0x000008, "Wrong alignment on Prop_poster_C_SetTex");
static_assert(sizeof(Prop_poster_C_SetTex) == 0x000028, "Wrong size on Prop_poster_C_SetTex");
static_assert(offsetof(Prop_poster_C_SetTex, CallFunc_getPosters_Output) == 0x000000, "Member 'Prop_poster_C_SetTex::CallFunc_getPosters_Output' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_SetTex, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'Prop_poster_C_SetTex::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_SetTex, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000010, "Member 'Prop_poster_C_SetTex::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_SetTex, CallFunc_Array_Get_Item) == 0x000018, "Member 'Prop_poster_C_SetTex::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_SetTex, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000020, "Member 'Prop_poster_C_SetTex::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function prop_poster.prop_poster_C.normalRot
// 0x00A0 (0x00A0 - 0x0000)
struct Prop_poster_C_NormalRot final
{
public:
	struct FVector                                InputPin;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignOfFloat_ReturnValue;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotationFromAxes_ReturnValue;         // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue_1;         // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotationFromAxes_ReturnValue_1;       // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_SelectRotator_ReturnValue;                // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Prop_poster_C_NormalRot) == 0x000008, "Wrong alignment on Prop_poster_C_NormalRot");
static_assert(sizeof(Prop_poster_C_NormalRot) == 0x0000A0, "Wrong size on Prop_poster_C_NormalRot");
static_assert(offsetof(Prop_poster_C_NormalRot, InputPin) == 0x000000, "Member 'Prop_poster_C_NormalRot::InputPin' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_NormalRot, ReturnValue) == 0x00000C, "Member 'Prop_poster_C_NormalRot::ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_NormalRot, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000018, "Member 'Prop_poster_C_NormalRot::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_NormalRot, CallFunc_Dot_VectorVector_ReturnValue) == 0x000020, "Member 'Prop_poster_C_NormalRot::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_NormalRot, CallFunc_GetActorForwardVector_ReturnValue) == 0x000024, "Member 'Prop_poster_C_NormalRot::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_NormalRot, CallFunc_SignOfFloat_ReturnValue) == 0x000030, "Member 'Prop_poster_C_NormalRot::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_NormalRot, CallFunc_Abs_ReturnValue) == 0x000034, "Member 'Prop_poster_C_NormalRot::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_NormalRot, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000038, "Member 'Prop_poster_C_NormalRot::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_NormalRot, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000044, "Member 'Prop_poster_C_NormalRot::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_NormalRot, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000048, "Member 'Prop_poster_C_NormalRot::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_NormalRot, CallFunc_Cross_VectorVector_ReturnValue) == 0x00004C, "Member 'Prop_poster_C_NormalRot::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_NormalRot, CallFunc_MakeVector_ReturnValue) == 0x000058, "Member 'Prop_poster_C_NormalRot::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_NormalRot, CallFunc_MakeRotationFromAxes_ReturnValue) == 0x000064, "Member 'Prop_poster_C_NormalRot::CallFunc_MakeRotationFromAxes_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_NormalRot, CallFunc_Cross_VectorVector_ReturnValue_1) == 0x000070, "Member 'Prop_poster_C_NormalRot::CallFunc_Cross_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_NormalRot, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x00007C, "Member 'Prop_poster_C_NormalRot::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_NormalRot, CallFunc_MakeRotationFromAxes_ReturnValue_1) == 0x000088, "Member 'Prop_poster_C_NormalRot::CallFunc_MakeRotationFromAxes_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_NormalRot, CallFunc_SelectRotator_ReturnValue) == 0x000094, "Member 'Prop_poster_C_NormalRot::CallFunc_SelectRotator_ReturnValue' has a wrong offset!");

// Function prop_poster.prop_poster_C.playerHold
// 0x0008 (0x0008 - 0x0000)
struct Prop_poster_C_PlayerHold final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_poster_C_PlayerHold) == 0x000008, "Wrong alignment on Prop_poster_C_PlayerHold");
static_assert(sizeof(Prop_poster_C_PlayerHold) == 0x000008, "Wrong size on Prop_poster_C_PlayerHold");
static_assert(offsetof(Prop_poster_C_PlayerHold, Player) == 0x000000, "Member 'Prop_poster_C_PlayerHold::Player' has a wrong offset!");

// Function prop_poster.prop_poster_C.settingsApplied
// 0x0100 (0x0100 - 0x0000)
struct Prop_poster_C_SettingsApplied final
{
public:
	struct FStruct_settings                       Settings;                                          // 0x0000(0x0100)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(Prop_poster_C_SettingsApplied) == 0x000008, "Wrong alignment on Prop_poster_C_SettingsApplied");
static_assert(sizeof(Prop_poster_C_SettingsApplied) == 0x000100, "Wrong size on Prop_poster_C_SettingsApplied");
static_assert(offsetof(Prop_poster_C_SettingsApplied, Settings) == 0x000000, "Member 'Prop_poster_C_SettingsApplied::Settings' has a wrong offset!");

// Function prop_poster.prop_poster_C.playerHandUse_RMB
// 0x0008 (0x0008 - 0x0000)
struct Prop_poster_C_PlayerHandUse_RMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_poster_C_PlayerHandUse_RMB) == 0x000008, "Wrong alignment on Prop_poster_C_PlayerHandUse_RMB");
static_assert(sizeof(Prop_poster_C_PlayerHandUse_RMB) == 0x000008, "Wrong size on Prop_poster_C_PlayerHandUse_RMB");
static_assert(offsetof(Prop_poster_C_PlayerHandUse_RMB, Player) == 0x000000, "Member 'Prop_poster_C_PlayerHandUse_RMB::Player' has a wrong offset!");

// Function prop_poster.prop_poster_C.playerHandUse_LMB
// 0x0008 (0x0008 - 0x0000)
struct Prop_poster_C_PlayerHandUse_LMB final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_poster_C_PlayerHandUse_LMB) == 0x000008, "Wrong alignment on Prop_poster_C_PlayerHandUse_LMB");
static_assert(sizeof(Prop_poster_C_PlayerHandUse_LMB) == 0x000008, "Wrong size on Prop_poster_C_PlayerHandUse_LMB");
static_assert(offsetof(Prop_poster_C_PlayerHandUse_LMB, Player) == 0x000000, "Member 'Prop_poster_C_PlayerHandUse_LMB::Player' has a wrong offset!");

// Function prop_poster.prop_poster_C.UserConstructionScript
// 0x0020 (0x0020 - 0x0000)
struct Prop_poster_C_UserConstructionScript final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CallFunc_getPosters_Output;                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_poster_C_UserConstructionScript) == 0x000008, "Wrong alignment on Prop_poster_C_UserConstructionScript");
static_assert(sizeof(Prop_poster_C_UserConstructionScript) == 0x000020, "Wrong size on Prop_poster_C_UserConstructionScript");
static_assert(offsetof(Prop_poster_C_UserConstructionScript, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000000, "Member 'Prop_poster_C_UserConstructionScript::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_UserConstructionScript, CallFunc_getPosters_Output) == 0x000008, "Member 'Prop_poster_C_UserConstructionScript::CallFunc_getPosters_Output' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_UserConstructionScript, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000010, "Member 'Prop_poster_C_UserConstructionScript::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_UserConstructionScript, CallFunc_Array_Get_Item) == 0x000018, "Member 'Prop_poster_C_UserConstructionScript::CallFunc_Array_Get_Item' has a wrong offset!");

// Function prop_poster.prop_poster_C.loadData
// 0x00E0 (0x00E0 - 0x0000)
struct Prop_poster_C_LoadData final
{
public:
	struct FStruct_save                           Data;                                              // 0x0000(0x00C0)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_loadData_return;                          // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_mInt                           CallFunc_Array_Get_Item;                           // 0x00C8(0x0010)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_2;                         // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_poster_C_LoadData) == 0x000010, "Wrong alignment on Prop_poster_C_LoadData");
static_assert(sizeof(Prop_poster_C_LoadData) == 0x0000E0, "Wrong size on Prop_poster_C_LoadData");
static_assert(offsetof(Prop_poster_C_LoadData, Data) == 0x000000, "Member 'Prop_poster_C_LoadData::Data' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_LoadData, Return) == 0x0000C0, "Member 'Prop_poster_C_LoadData::Return' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_LoadData, CallFunc_loadData_return) == 0x0000C1, "Member 'Prop_poster_C_LoadData::CallFunc_loadData_return' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_LoadData, CallFunc_Array_Get_Item) == 0x0000C8, "Member 'Prop_poster_C_LoadData::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_LoadData, CallFunc_Array_Get_Item_1) == 0x0000D8, "Member 'Prop_poster_C_LoadData::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_LoadData, CallFunc_Array_Get_Item_2) == 0x0000DC, "Member 'Prop_poster_C_LoadData::CallFunc_Array_Get_Item_2' has a wrong offset!");

// Function prop_poster.prop_poster_C.getData
// 0x0270 (0x0270 - 0x0000)
struct Prop_poster_C_GetData final
{
public:
	struct FStruct_save                           Data;                                              // 0x0000(0x00C0)(Parm, OutParm, HasGetValueTypeHash)
	struct FStruct_save                           CallFunc_getData_data;                             // 0x00C0(0x00C0)(HasGetValueTypeHash)
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0180(0x0010)(ReferenceParm)
	struct FStruct_mInt                           K2Node_MakeStruct_struct_mInt;                     // 0x0190(0x0010)(HasGetValueTypeHash)
	TArray<struct FStruct_mInt>                   K2Node_MakeArray_Array_1;                          // 0x01A0(0x0010)(ReferenceParm)
	struct FStruct_save                           K2Node_SetFieldsInStruct_StructOut;                // 0x01B0(0x00C0)(HasGetValueTypeHash)
};
static_assert(alignof(Prop_poster_C_GetData) == 0x000010, "Wrong alignment on Prop_poster_C_GetData");
static_assert(sizeof(Prop_poster_C_GetData) == 0x000270, "Wrong size on Prop_poster_C_GetData");
static_assert(offsetof(Prop_poster_C_GetData, Data) == 0x000000, "Member 'Prop_poster_C_GetData::Data' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_GetData, CallFunc_getData_data) == 0x0000C0, "Member 'Prop_poster_C_GetData::CallFunc_getData_data' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_GetData, K2Node_MakeArray_Array) == 0x000180, "Member 'Prop_poster_C_GetData::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_GetData, K2Node_MakeStruct_struct_mInt) == 0x000190, "Member 'Prop_poster_C_GetData::K2Node_MakeStruct_struct_mInt' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_GetData, K2Node_MakeArray_Array_1) == 0x0001A0, "Member 'Prop_poster_C_GetData::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(Prop_poster_C_GetData, K2Node_SetFieldsInStruct_StructOut) == 0x0001B0, "Member 'Prop_poster_C_GetData::K2Node_SetFieldsInStruct_StructOut' has a wrong offset!");

}

