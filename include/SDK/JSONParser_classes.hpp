#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JSONParser

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "JSONParser_structs.hpp"


namespace SDK
{

// Class JSONParser.JSONParserAsyncObjectToString
// 0x00F0 (0x0120 - 0x0030)
class UJSONParserAsyncObjectToString final : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFail;                                            // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0xD0];                                      // 0x0050(0x00D0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UJSONParserAsyncObjectToString* JsonObjectToFileAsync(const struct FSJsonObject& MainObject, EJSONDirectoryType DirectoryType, const class FString& FilePath, bool RemoveLineBreaks, bool AddPadding);
	static class UJSONParserAsyncObjectToString* JsonObjectToStringAsync(const struct FSJsonObject& MainObject, bool RemoveLineBreaks, bool AddPadding);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JSONParserAsyncObjectToString">();
	}
	static class UJSONParserAsyncObjectToString* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJSONParserAsyncObjectToString>();
	}
};
static_assert(alignof(UJSONParserAsyncObjectToString) == 0x000008, "Wrong alignment on UJSONParserAsyncObjectToString");
static_assert(sizeof(UJSONParserAsyncObjectToString) == 0x000120, "Wrong size on UJSONParserAsyncObjectToString");
static_assert(offsetof(UJSONParserAsyncObjectToString, OnSuccess) == 0x000030, "Member 'UJSONParserAsyncObjectToString::OnSuccess' has a wrong offset!");
static_assert(offsetof(UJSONParserAsyncObjectToString, OnFail) == 0x000040, "Member 'UJSONParserAsyncObjectToString::OnFail' has a wrong offset!");

// Class JSONParser.JSONParserAsyncStringToObject
// 0x00F0 (0x0120 - 0x0030)
class UJSONParserAsyncStringToObject final : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFail;                                            // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0xD0];                                      // 0x0050(0x00D0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UJSONParserAsyncStringToObject* JsonFileToObjectAsync(EJSONDirectoryType DirectoryType, const class FString& FilePath, bool RemoveAndSavePadding);
	static class UJSONParserAsyncStringToObject* JsonStringToObjectAsync(const class FString& Json, bool RemoveAndSavePadding);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JSONParserAsyncStringToObject">();
	}
	static class UJSONParserAsyncStringToObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJSONParserAsyncStringToObject>();
	}
};
static_assert(alignof(UJSONParserAsyncStringToObject) == 0x000008, "Wrong alignment on UJSONParserAsyncStringToObject");
static_assert(sizeof(UJSONParserAsyncStringToObject) == 0x000120, "Wrong size on UJSONParserAsyncStringToObject");
static_assert(offsetof(UJSONParserAsyncStringToObject, OnSuccess) == 0x000030, "Member 'UJSONParserAsyncStringToObject::OnSuccess' has a wrong offset!");
static_assert(offsetof(UJSONParserAsyncStringToObject, OnFail) == 0x000040, "Member 'UJSONParserAsyncStringToObject::OnFail' has a wrong offset!");

// Class JSONParser.JSONParserBPLibrary
// 0x00A8 (0x00D0 - 0x0028)
class UJSONParserBPLibrary final : public UBlueprintFunctionLibrary
{
public:
	uint8                                         Pad_28[0xA8];                                      // 0x0028(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static TMap<class FString, bool> AddMapBool(const TMap<class FString, bool>& Map, const class FString& Key, bool Value);
	static TMap<class FString, float> AddMapNumber(const TMap<class FString, float>& Map, const class FString& Key, float Value);
	static TMap<class FString, struct FSJsonObject> AddMapObject(const TMap<class FString, struct FSJsonObject>& Map, const class FString& Key, const struct FSJsonObject& Value);
	static TMap<class FString, class FString> AddMapString(const TMap<class FString, class FString>& Map, const class FString& Key, const class FString& Value);
	static bool base64StringToFile(EJSONDirectoryType DirectoryType, const class FString& base64String, const class FString& FilePath);
	static void BreakJson_Object(const struct FSJsonObject& JsonObject, TMap<class FString, struct FSJsonObject>* ObjectMap, TMap<class FString, bool>* BoolMap, TMap<class FString, float>* NumberMap, TMap<class FString, class FString>* StringMap, TArray<struct FSJsonObject>* ObjectArray, TArray<bool>* BoolArray, TArray<float>* NumberArray, TArray<class FString>* StringArray);
	static void BreakMixedJSONArray(const int32 Index_0, const struct FSJsonObject& JsonObject, int32* LastIndex, EJsonDataType* Type, struct FSJsonObject* Object, bool* Bool, float* Number, class FString* String);
	static class FString byteArrayToString(const TArray<uint8>& ByteArray);
	static TMap<class FString, bool> ChangeMapBool(const TMap<class FString, bool>& Map, const class FString& Key, bool Value);
	static TMap<class FString, float> ChangeMapNumber(const TMap<class FString, float>& Map, const class FString& Key, float Value);
	static TMap<class FString, struct FSJsonObject> ChangeMapObject(const TMap<class FString, struct FSJsonObject>& Map, const class FString& Key, const struct FSJsonObject& Value);
	static TMap<class FString, class FString> ChangeMapString(const TMap<class FString, class FString>& Map, const class FString& Key, const class FString& Value);
	static void CompressData(EJsonCompressFormat Format, const TArray<uint8>& UncompressedData, TArray<uint8>* CompressedData, int32* CompressedDataSize, int32* UncompressedDataSize, bool* Success);
	static bool CreateFile(EJSONDirectoryType DirectoryType, const class FString& FilePath);
	static bool DeleteFile(EJSONDirectoryType DirectoryType, const class FString& FilePath);
	static bool DirExists(EJSONDirectoryType DirectoryType, const class FString& FilePath);
	static bool FileExists(EJSONDirectoryType DirectoryType, const class FString& FilePath);
	static void FileToBase64String(EJSONDirectoryType DirectoryType, const class FString& FilePath, class FString* base64String, class FString* Filename);
	static void FillStructWithJson(const class FString& StructID, const struct FSJsonObject& Json);
	static struct FRotator JsonObjectToRotator(const struct FSJsonObject& JsonObject);
	static class FString JsonObjectToString(bool* Successful, const struct FSJsonObject& MainObject, bool RemoveLineBreaks, bool AddPadding);
	static struct FTransform JsonObjectToTransform(const struct FSJsonObject& JsonObject);
	static struct FVector JsonObjectToVector(const struct FSJsonObject& JsonObject);
	static struct FSJsonObject JsonStringToObject(const class FString& Json, bool RemoveAndSavePadding, bool* Successful);
	static bool MakeBool(bool Value);
	static struct FSJsonObject MakeJson_Object(const TMap<class FString, struct FSJsonObject>& ObjectMap, const TMap<class FString, bool>& BoolMap, const TMap<class FString, float>& NumberMap, const TMap<class FString, class FString>& StringMap, const TArray<struct FSJsonObject>& ObjectArray, const TArray<bool>& BoolArray, const TArray<float>& NumberArray, const TArray<class FString>& StringArray);
	static TMap<class FString, bool> MakeMapBool(const class FString& Key, bool Value);
	static TMap<class FString, float> MakeMapNumber(const class FString& Key, float Value);
	static TMap<class FString, struct FSJsonObject> MakeMapObject(const class FString& Key, const struct FSJsonObject& Value);
	static TMap<class FString, class FString> MakeMapString(const class FString& Key, const class FString& Value);
	static struct FSJsonObject MakeMixedJSONArray(const struct FSJsonObject& OldJSONMixedArray, EJsonDataType ChooseOneType, const struct FSJsonObject& Object, bool Bool, float Number, const class FString& String);
	static float MakeNumber(float Value);
	static class FString MakeString(const class FString& Value);
	static class FString PrepareStructToFillItWithJson(class UStruct* Struct);
	static void ReadBytesFromFile(EJSONDirectoryType DirectoryType, const class FString& FilePath, TArray<uint8>* bytes);
	static bool ReadStringFromFile(EJSONDirectoryType DirectoryType, const class FString& FilePath, class FString* JSON_String);
	static struct FSJsonObject RotatorToJsonObject(const struct FRotator& Rotator);
	static void SetStructJsonSettings(EJSONJsonStructMapSetting Map);
	static TArray<uint8> StringToByteArray(const class FString& String);
	static struct FSJsonObject StructToJsonObject(class UStruct* Struct);
	static struct FSJsonObject TransformToJsonObject(const struct FTransform& Transform);
	static void UncompressData(EJsonCompressFormat Format, int32 UncompressedDataSize, const TArray<uint8>& CompressedData, TArray<uint8>* UncompressedData, bool* Success);
	static struct FSJsonObject VectorToJsonObject(const struct FVector& Vector);
	static bool WriteBytesToFile(EJSONDirectoryType DirectoryType, const TArray<uint8>& bytes, const class FString& FilePath);
	static bool WriteStringToFile(EJSONDirectoryType DirectoryType, const class FString& JSON_String, const class FString& FilePath);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JSONParserBPLibrary">();
	}
	static class UJSONParserBPLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJSONParserBPLibrary>();
	}
};
static_assert(alignof(UJSONParserBPLibrary) == 0x000008, "Wrong alignment on UJSONParserBPLibrary");
static_assert(sizeof(UJSONParserBPLibrary) == 0x0000D0, "Wrong size on UJSONParserBPLibrary");

}

