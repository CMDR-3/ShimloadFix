#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Prop_radio

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function prop_radio.prop_radio_C.ExecuteUbergraph_prop_radio
// 0x00B8 (0x00B8 - 0x0000)
struct Prop_radio_C_ExecuteUbergraph_prop_radio final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMainPlayer_C*                          K2Node_Event_player;                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_hit;                                  // 0x0010(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FString                                 K2Node_CustomEvent_FailedUrl;                      // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_OpenedUrl;                      // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_radio_C_ExecuteUbergraph_prop_radio) == 0x000008, "Wrong alignment on Prop_radio_C_ExecuteUbergraph_prop_radio");
static_assert(sizeof(Prop_radio_C_ExecuteUbergraph_prop_radio) == 0x0000B8, "Wrong size on Prop_radio_C_ExecuteUbergraph_prop_radio");
static_assert(offsetof(Prop_radio_C_ExecuteUbergraph_prop_radio, EntryPoint) == 0x000000, "Member 'Prop_radio_C_ExecuteUbergraph_prop_radio::EntryPoint' has a wrong offset!");
static_assert(offsetof(Prop_radio_C_ExecuteUbergraph_prop_radio, K2Node_Event_player) == 0x000008, "Member 'Prop_radio_C_ExecuteUbergraph_prop_radio::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(Prop_radio_C_ExecuteUbergraph_prop_radio, K2Node_Event_hit) == 0x000010, "Member 'Prop_radio_C_ExecuteUbergraph_prop_radio::K2Node_Event_hit' has a wrong offset!");
static_assert(offsetof(Prop_radio_C_ExecuteUbergraph_prop_radio, K2Node_CustomEvent_FailedUrl) == 0x000098, "Member 'Prop_radio_C_ExecuteUbergraph_prop_radio::K2Node_CustomEvent_FailedUrl' has a wrong offset!");
static_assert(offsetof(Prop_radio_C_ExecuteUbergraph_prop_radio, K2Node_CustomEvent_OpenedUrl) == 0x0000A8, "Member 'Prop_radio_C_ExecuteUbergraph_prop_radio::K2Node_CustomEvent_OpenedUrl' has a wrong offset!");

// Function prop_radio.prop_radio_C.openMedia
// 0x0010 (0x0010 - 0x0000)
struct Prop_radio_C_OpenMedia final
{
public:
	class FString                                 OpenedUrl;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_radio_C_OpenMedia) == 0x000008, "Wrong alignment on Prop_radio_C_OpenMedia");
static_assert(sizeof(Prop_radio_C_OpenMedia) == 0x000010, "Wrong size on Prop_radio_C_OpenMedia");
static_assert(offsetof(Prop_radio_C_OpenMedia, OpenedUrl) == 0x000000, "Member 'Prop_radio_C_OpenMedia::OpenedUrl' has a wrong offset!");

// Function prop_radio.prop_radio_C.fail
// 0x0010 (0x0010 - 0x0000)
struct Prop_radio_C_Fail final
{
public:
	class FString                                 FailedUrl;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Prop_radio_C_Fail) == 0x000008, "Wrong alignment on Prop_radio_C_Fail");
static_assert(sizeof(Prop_radio_C_Fail) == 0x000010, "Wrong size on Prop_radio_C_Fail");
static_assert(offsetof(Prop_radio_C_Fail, FailedUrl) == 0x000000, "Member 'Prop_radio_C_Fail::FailedUrl' has a wrong offset!");

// Function prop_radio.prop_radio_C.player_use
// 0x0090 (0x0090 - 0x0000)
struct Prop_radio_C_Player_use final
{
public:
	class AMainPlayer_C*                          Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit_0;                                             // 0x0008(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Prop_radio_C_Player_use) == 0x000008, "Wrong alignment on Prop_radio_C_Player_use");
static_assert(sizeof(Prop_radio_C_Player_use) == 0x000090, "Wrong size on Prop_radio_C_Player_use");
static_assert(offsetof(Prop_radio_C_Player_use, Player) == 0x000000, "Member 'Prop_radio_C_Player_use::Player' has a wrong offset!");
static_assert(offsetof(Prop_radio_C_Player_use, Hit_0) == 0x000008, "Member 'Prop_radio_C_Player_use::Hit_0' has a wrong offset!");

}

