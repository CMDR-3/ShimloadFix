#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VoidMod_Config

#include "Basic.hpp"

#include "VoidMod_Config_classes.hpp"
#include "VoidMod_Config_parameters.hpp"


namespace SDK
{

// Function VoidMod_Config.VoidMod_Config_C.Get Config Variable Default Value
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           Mod_Id                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Variable_Id                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Default_Value                                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Exists                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UVoidMod_Config_C::Get_Config_Variable_Default_Value(const class FString& Mod_Id, const class FString& Variable_Id, class UObject* __WorldContext, class FString* Default_Value, bool* Exists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VoidMod_Config_C", "Get Config Variable Default Value");

	Params::VoidMod_Config_C_Get_Config_Variable_Default_Value Parms{};

	Parms.Mod_Id = std::move(Mod_Id);
	Parms.Variable_Id = std::move(Variable_Id);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Default_Value != nullptr)
		*Default_Value = std::move(Parms.Default_Value);

	if (Exists != nullptr)
		*Exists = Parms.Exists;
}


// Function VoidMod_Config.VoidMod_Config_C.Get Config Variable Description
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           Mod_Id                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Variable_Id                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Description                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Exists                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UVoidMod_Config_C::Get_Config_Variable_Description(const class FString& Mod_Id, const class FString& Variable_Id, class UObject* __WorldContext, class FString* Description, bool* Exists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VoidMod_Config_C", "Get Config Variable Description");

	Params::VoidMod_Config_C_Get_Config_Variable_Description Parms{};

	Parms.Mod_Id = std::move(Mod_Id);
	Parms.Variable_Id = std::move(Variable_Id);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Description != nullptr)
		*Description = std::move(Parms.Description);

	if (Exists != nullptr)
		*Exists = Parms.Exists;
}


// Function VoidMod_Config.VoidMod_Config_C.Get Config Variable Pure
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           ModID                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           VariableId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Value                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Exists                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UVoidMod_Config_C::Get_Config_Variable_Pure(const class FString& ModID, const class FString& VariableId, class UObject* __WorldContext, class FString* Value, bool* Exists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VoidMod_Config_C", "Get Config Variable Pure");

	Params::VoidMod_Config_C_Get_Config_Variable_Pure Parms{};

	Parms.ModID = std::move(ModID);
	Parms.VariableId = std::move(VariableId);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = std::move(Parms.Value);

	if (Exists != nullptr)
		*Exists = Parms.Exists;
}


// Function VoidMod_Config.VoidMod_Config_C.Get Config Variable
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ModID                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           VariableId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Value                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Exists                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UVoidMod_Config_C::Get_Config_Variable(const class FString& ModID, const class FString& VariableId, class UObject* __WorldContext, class FString* Value, bool* Exists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VoidMod_Config_C", "Get Config Variable");

	Params::VoidMod_Config_C_Get_Config_Variable Parms{};

	Parms.ModID = std::move(ModID);
	Parms.VariableId = std::move(VariableId);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = std::move(Parms.Value);

	if (Exists != nullptr)
		*Exists = Parms.Exists;
}


// Function VoidMod_Config.VoidMod_Config_C.Set Config Variable
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ModID                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           VariableId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVoidMod_Config_C::Set_Config_Variable(const class FString& ModID, const class FString& VariableId, const class FString& Value, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VoidMod_Config_C", "Set Config Variable");

	Params::VoidMod_Config_C_Set_Config_Variable Parms{};

	Parms.ModID = std::move(ModID);
	Parms.VariableId = std::move(VariableId);
	Parms.Value = std::move(Value);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function VoidMod_Config.VoidMod_Config_C.Write Config Variables
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVoidMod_Config_C::Write_Config_Variables(class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VoidMod_Config_C", "Write Config Variables");

	Params::VoidMod_Config_C_Write_Config_Variables Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function VoidMod_Config.VoidMod_Config_C.Reload Config Variables
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FVoidMod_ConfigVariable>  LoadedConfigVars                                       (Parm, OutParm)

void UVoidMod_Config_C::Reload_Config_Variables(class UObject* __WorldContext, TArray<struct FVoidMod_ConfigVariable>* LoadedConfigVars)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VoidMod_Config_C", "Reload Config Variables");

	Params::VoidMod_Config_C_Reload_Config_Variables Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (LoadedConfigVars != nullptr)
		*LoadedConfigVars = std::move(Parms.LoadedConfigVars);
}


// Function VoidMod_Config.VoidMod_Config_C.Set Config Default
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ModID                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           VariableId                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Default_Value                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Description                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AlreadyExists                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UVoidMod_Config_C::Set_Config_Default(const class FString& ModID, const class FString& VariableId, const class FString& Default_Value, const class FString& Description, class UObject* __WorldContext, bool* AlreadyExists)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VoidMod_Config_C", "Set Config Default");

	Params::VoidMod_Config_C_Set_Config_Default Parms{};

	Parms.ModID = std::move(ModID);
	Parms.VariableId = std::move(VariableId);
	Parms.Default_Value = std::move(Default_Value);
	Parms.Description = std::move(Description);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (AlreadyExists != nullptr)
		*AlreadyExists = Parms.AlreadyExists;
}

}

