#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EasyWebsockets

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class EasyWebsockets.WebSocket
// 0x0060 (0x0088 - 0x0028)
class UWebSocket final : public UObject
{
public:
	FMulticastInlineDelegateProperty_             OnWebSocketConnected;                              // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnWebSocketConnectionError;                        // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnWebSocketClosed;                                 // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnWebSocketMessageReceived;                        // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnWebSocketMessageSent;                            // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x10];                                      // 0x0078(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Close(int32 StatusCode, const class FString& Reason);
	void Connect();
	void OnWebSocketClosed_Internal(int32 StatusCode, const class FString& Reason, bool bWasClean);
	void OnWebSocketConnected_Internal();
	void OnWebSocketConnectionError_Internal(const class FString& Error);
	void OnWebSocketMessageReceived_Internal(const class FString& Message);
	void OnWebSocketMessageSent_Internal(const class FString& Message);
	void SendMessage(const class FString& Message);

	bool IsConnected() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebSocket">();
	}
	static class UWebSocket* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebSocket>();
	}
};
static_assert(alignof(UWebSocket) == 0x000008, "Wrong alignment on UWebSocket");
static_assert(sizeof(UWebSocket) == 0x000088, "Wrong size on UWebSocket");
static_assert(offsetof(UWebSocket, OnWebSocketConnected) == 0x000028, "Member 'UWebSocket::OnWebSocketConnected' has a wrong offset!");
static_assert(offsetof(UWebSocket, OnWebSocketConnectionError) == 0x000038, "Member 'UWebSocket::OnWebSocketConnectionError' has a wrong offset!");
static_assert(offsetof(UWebSocket, OnWebSocketClosed) == 0x000048, "Member 'UWebSocket::OnWebSocketClosed' has a wrong offset!");
static_assert(offsetof(UWebSocket, OnWebSocketMessageReceived) == 0x000058, "Member 'UWebSocket::OnWebSocketMessageReceived' has a wrong offset!");
static_assert(offsetof(UWebSocket, OnWebSocketMessageSent) == 0x000068, "Member 'UWebSocket::OnWebSocketMessageSent' has a wrong offset!");

// Class EasyWebsockets.WebSocketFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UWebSocketFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UWebSocket* CreateWebSocket(const class FString& ServerUrl, const class FString& ServerProtocol);
	static class UWebSocket* CreateWebSocketWithHeaders(const class FString& ServerUrl, const TMap<class FString, class FString>& UpgradeHeaders, const class FString& ServerProtocol);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WebSocketFunctionLibrary">();
	}
	static class UWebSocketFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWebSocketFunctionLibrary>();
	}
};
static_assert(alignof(UWebSocketFunctionLibrary) == 0x000008, "Wrong alignment on UWebSocketFunctionLibrary");
static_assert(sizeof(UWebSocketFunctionLibrary) == 0x000028, "Wrong size on UWebSocketFunctionLibrary");

}

