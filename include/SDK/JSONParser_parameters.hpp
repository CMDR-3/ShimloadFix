#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JSONParser

#include "Basic.hpp"

#include "JSONParser_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function JSONParser.JSONParserAsyncObjectToString.JsonObjectToFileAsync
// 0x00A8 (0x00A8 - 0x0000)
struct JSONParserAsyncObjectToString_JsonObjectToFileAsync final
{
public:
	struct FSJsonObject                           MainObject;                                        // 0x0000(0x0080)(Parm, NativeAccessSpecifierPublic)
	EJSONDirectoryType                            DirectoryType;                                     // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0088(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RemoveLineBreaks;                                  // 0x0098(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddPadding;                                        // 0x0099(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSONParserAsyncObjectToString*         ReturnValue;                                       // 0x00A0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserAsyncObjectToString_JsonObjectToFileAsync) == 0x000008, "Wrong alignment on JSONParserAsyncObjectToString_JsonObjectToFileAsync");
static_assert(sizeof(JSONParserAsyncObjectToString_JsonObjectToFileAsync) == 0x0000A8, "Wrong size on JSONParserAsyncObjectToString_JsonObjectToFileAsync");
static_assert(offsetof(JSONParserAsyncObjectToString_JsonObjectToFileAsync, MainObject) == 0x000000, "Member 'JSONParserAsyncObjectToString_JsonObjectToFileAsync::MainObject' has a wrong offset!");
static_assert(offsetof(JSONParserAsyncObjectToString_JsonObjectToFileAsync, DirectoryType) == 0x000080, "Member 'JSONParserAsyncObjectToString_JsonObjectToFileAsync::DirectoryType' has a wrong offset!");
static_assert(offsetof(JSONParserAsyncObjectToString_JsonObjectToFileAsync, FilePath) == 0x000088, "Member 'JSONParserAsyncObjectToString_JsonObjectToFileAsync::FilePath' has a wrong offset!");
static_assert(offsetof(JSONParserAsyncObjectToString_JsonObjectToFileAsync, RemoveLineBreaks) == 0x000098, "Member 'JSONParserAsyncObjectToString_JsonObjectToFileAsync::RemoveLineBreaks' has a wrong offset!");
static_assert(offsetof(JSONParserAsyncObjectToString_JsonObjectToFileAsync, AddPadding) == 0x000099, "Member 'JSONParserAsyncObjectToString_JsonObjectToFileAsync::AddPadding' has a wrong offset!");
static_assert(offsetof(JSONParserAsyncObjectToString_JsonObjectToFileAsync, ReturnValue) == 0x0000A0, "Member 'JSONParserAsyncObjectToString_JsonObjectToFileAsync::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserAsyncObjectToString.JsonObjectToStringAsync
// 0x0090 (0x0090 - 0x0000)
struct JSONParserAsyncObjectToString_JsonObjectToStringAsync final
{
public:
	struct FSJsonObject                           MainObject;                                        // 0x0000(0x0080)(Parm, NativeAccessSpecifierPublic)
	bool                                          RemoveLineBreaks;                                  // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddPadding;                                        // 0x0081(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSONParserAsyncObjectToString*         ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserAsyncObjectToString_JsonObjectToStringAsync) == 0x000008, "Wrong alignment on JSONParserAsyncObjectToString_JsonObjectToStringAsync");
static_assert(sizeof(JSONParserAsyncObjectToString_JsonObjectToStringAsync) == 0x000090, "Wrong size on JSONParserAsyncObjectToString_JsonObjectToStringAsync");
static_assert(offsetof(JSONParserAsyncObjectToString_JsonObjectToStringAsync, MainObject) == 0x000000, "Member 'JSONParserAsyncObjectToString_JsonObjectToStringAsync::MainObject' has a wrong offset!");
static_assert(offsetof(JSONParserAsyncObjectToString_JsonObjectToStringAsync, RemoveLineBreaks) == 0x000080, "Member 'JSONParserAsyncObjectToString_JsonObjectToStringAsync::RemoveLineBreaks' has a wrong offset!");
static_assert(offsetof(JSONParserAsyncObjectToString_JsonObjectToStringAsync, AddPadding) == 0x000081, "Member 'JSONParserAsyncObjectToString_JsonObjectToStringAsync::AddPadding' has a wrong offset!");
static_assert(offsetof(JSONParserAsyncObjectToString_JsonObjectToStringAsync, ReturnValue) == 0x000088, "Member 'JSONParserAsyncObjectToString_JsonObjectToStringAsync::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserAsyncStringToObject.JsonFileToObjectAsync
// 0x0028 (0x0028 - 0x0000)
struct JSONParserAsyncStringToObject_JsonFileToObjectAsync final
{
public:
	EJSONDirectoryType                            DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RemoveAndSavePadding;                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSONParserAsyncStringToObject*         ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserAsyncStringToObject_JsonFileToObjectAsync) == 0x000008, "Wrong alignment on JSONParserAsyncStringToObject_JsonFileToObjectAsync");
static_assert(sizeof(JSONParserAsyncStringToObject_JsonFileToObjectAsync) == 0x000028, "Wrong size on JSONParserAsyncStringToObject_JsonFileToObjectAsync");
static_assert(offsetof(JSONParserAsyncStringToObject_JsonFileToObjectAsync, DirectoryType) == 0x000000, "Member 'JSONParserAsyncStringToObject_JsonFileToObjectAsync::DirectoryType' has a wrong offset!");
static_assert(offsetof(JSONParserAsyncStringToObject_JsonFileToObjectAsync, FilePath) == 0x000008, "Member 'JSONParserAsyncStringToObject_JsonFileToObjectAsync::FilePath' has a wrong offset!");
static_assert(offsetof(JSONParserAsyncStringToObject_JsonFileToObjectAsync, RemoveAndSavePadding) == 0x000018, "Member 'JSONParserAsyncStringToObject_JsonFileToObjectAsync::RemoveAndSavePadding' has a wrong offset!");
static_assert(offsetof(JSONParserAsyncStringToObject_JsonFileToObjectAsync, ReturnValue) == 0x000020, "Member 'JSONParserAsyncStringToObject_JsonFileToObjectAsync::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserAsyncStringToObject.JsonStringToObjectAsync
// 0x0020 (0x0020 - 0x0000)
struct JSONParserAsyncStringToObject_JsonStringToObjectAsync final
{
public:
	class FString                                 Json;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RemoveAndSavePadding;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSONParserAsyncStringToObject*         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserAsyncStringToObject_JsonStringToObjectAsync) == 0x000008, "Wrong alignment on JSONParserAsyncStringToObject_JsonStringToObjectAsync");
static_assert(sizeof(JSONParserAsyncStringToObject_JsonStringToObjectAsync) == 0x000020, "Wrong size on JSONParserAsyncStringToObject_JsonStringToObjectAsync");
static_assert(offsetof(JSONParserAsyncStringToObject_JsonStringToObjectAsync, Json) == 0x000000, "Member 'JSONParserAsyncStringToObject_JsonStringToObjectAsync::Json' has a wrong offset!");
static_assert(offsetof(JSONParserAsyncStringToObject_JsonStringToObjectAsync, RemoveAndSavePadding) == 0x000010, "Member 'JSONParserAsyncStringToObject_JsonStringToObjectAsync::RemoveAndSavePadding' has a wrong offset!");
static_assert(offsetof(JSONParserAsyncStringToObject_JsonStringToObjectAsync, ReturnValue) == 0x000018, "Member 'JSONParserAsyncStringToObject_JsonStringToObjectAsync::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.AddMapBool
// 0x00B8 (0x00B8 - 0x0000)
struct JSONParserBPLibrary_AddMapBool final
{
public:
	TMap<class FString, bool>                     Map;                                               // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, bool>                     ReturnValue;                                       // 0x0068(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_AddMapBool) == 0x000008, "Wrong alignment on JSONParserBPLibrary_AddMapBool");
static_assert(sizeof(JSONParserBPLibrary_AddMapBool) == 0x0000B8, "Wrong size on JSONParserBPLibrary_AddMapBool");
static_assert(offsetof(JSONParserBPLibrary_AddMapBool, Map) == 0x000000, "Member 'JSONParserBPLibrary_AddMapBool::Map' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_AddMapBool, Key) == 0x000050, "Member 'JSONParserBPLibrary_AddMapBool::Key' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_AddMapBool, Value) == 0x000060, "Member 'JSONParserBPLibrary_AddMapBool::Value' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_AddMapBool, ReturnValue) == 0x000068, "Member 'JSONParserBPLibrary_AddMapBool::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.AddMapNumber
// 0x00B8 (0x00B8 - 0x0000)
struct JSONParserBPLibrary_AddMapNumber final
{
public:
	TMap<class FString, float>                    Map;                                               // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, float>                    ReturnValue;                                       // 0x0068(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_AddMapNumber) == 0x000008, "Wrong alignment on JSONParserBPLibrary_AddMapNumber");
static_assert(sizeof(JSONParserBPLibrary_AddMapNumber) == 0x0000B8, "Wrong size on JSONParserBPLibrary_AddMapNumber");
static_assert(offsetof(JSONParserBPLibrary_AddMapNumber, Map) == 0x000000, "Member 'JSONParserBPLibrary_AddMapNumber::Map' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_AddMapNumber, Key) == 0x000050, "Member 'JSONParserBPLibrary_AddMapNumber::Key' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_AddMapNumber, Value) == 0x000060, "Member 'JSONParserBPLibrary_AddMapNumber::Value' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_AddMapNumber, ReturnValue) == 0x000068, "Member 'JSONParserBPLibrary_AddMapNumber::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.AddMapObject
// 0x0130 (0x0130 - 0x0000)
struct JSONParserBPLibrary_AddMapObject final
{
public:
	TMap<class FString, struct FSJsonObject>      Map;                                               // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSJsonObject                           Value;                                             // 0x0060(0x0080)(Parm, NativeAccessSpecifierPublic)
	TMap<class FString, struct FSJsonObject>      ReturnValue;                                       // 0x00E0(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_AddMapObject) == 0x000008, "Wrong alignment on JSONParserBPLibrary_AddMapObject");
static_assert(sizeof(JSONParserBPLibrary_AddMapObject) == 0x000130, "Wrong size on JSONParserBPLibrary_AddMapObject");
static_assert(offsetof(JSONParserBPLibrary_AddMapObject, Map) == 0x000000, "Member 'JSONParserBPLibrary_AddMapObject::Map' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_AddMapObject, Key) == 0x000050, "Member 'JSONParserBPLibrary_AddMapObject::Key' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_AddMapObject, Value) == 0x000060, "Member 'JSONParserBPLibrary_AddMapObject::Value' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_AddMapObject, ReturnValue) == 0x0000E0, "Member 'JSONParserBPLibrary_AddMapObject::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.AddMapString
// 0x00C0 (0x00C0 - 0x0000)
struct JSONParserBPLibrary_AddMapString final
{
public:
	TMap<class FString, class FString>            Map;                                               // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ReturnValue;                                       // 0x0070(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_AddMapString) == 0x000008, "Wrong alignment on JSONParserBPLibrary_AddMapString");
static_assert(sizeof(JSONParserBPLibrary_AddMapString) == 0x0000C0, "Wrong size on JSONParserBPLibrary_AddMapString");
static_assert(offsetof(JSONParserBPLibrary_AddMapString, Map) == 0x000000, "Member 'JSONParserBPLibrary_AddMapString::Map' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_AddMapString, Key) == 0x000050, "Member 'JSONParserBPLibrary_AddMapString::Key' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_AddMapString, Value) == 0x000060, "Member 'JSONParserBPLibrary_AddMapString::Value' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_AddMapString, ReturnValue) == 0x000070, "Member 'JSONParserBPLibrary_AddMapString::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.base64StringToFile
// 0x0030 (0x0030 - 0x0000)
struct JSONParserBPLibrary_base64StringToFile final
{
public:
	EJSONDirectoryType                            DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 base64String;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilePath;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JSONParserBPLibrary_base64StringToFile) == 0x000008, "Wrong alignment on JSONParserBPLibrary_base64StringToFile");
static_assert(sizeof(JSONParserBPLibrary_base64StringToFile) == 0x000030, "Wrong size on JSONParserBPLibrary_base64StringToFile");
static_assert(offsetof(JSONParserBPLibrary_base64StringToFile, DirectoryType) == 0x000000, "Member 'JSONParserBPLibrary_base64StringToFile::DirectoryType' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_base64StringToFile, base64String) == 0x000008, "Member 'JSONParserBPLibrary_base64StringToFile::base64String' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_base64StringToFile, FilePath) == 0x000018, "Member 'JSONParserBPLibrary_base64StringToFile::FilePath' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_base64StringToFile, ReturnValue) == 0x000028, "Member 'JSONParserBPLibrary_base64StringToFile::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.BreakJson_Object
// 0x0200 (0x0200 - 0x0000)
struct JSONParserBPLibrary_BreakJson_Object final
{
public:
	struct FSJsonObject                           JsonObject;                                        // 0x0000(0x0080)(ConstParm, Parm, NativeAccessSpecifierPublic)
	TMap<class FString, struct FSJsonObject>      ObjectMap;                                         // 0x0080(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	TMap<class FString, bool>                     BoolMap;                                           // 0x00D0(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	TMap<class FString, float>                    NumberMap;                                         // 0x0120(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            StringMap;                                         // 0x0170(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	TArray<struct FSJsonObject>                   ObjectArray;                                       // 0x01C0(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<bool>                                  BoolArray;                                         // 0x01D0(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 NumberArray;                                       // 0x01E0(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         StringArray;                                       // 0x01F0(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_BreakJson_Object) == 0x000008, "Wrong alignment on JSONParserBPLibrary_BreakJson_Object");
static_assert(sizeof(JSONParserBPLibrary_BreakJson_Object) == 0x000200, "Wrong size on JSONParserBPLibrary_BreakJson_Object");
static_assert(offsetof(JSONParserBPLibrary_BreakJson_Object, JsonObject) == 0x000000, "Member 'JSONParserBPLibrary_BreakJson_Object::JsonObject' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_BreakJson_Object, ObjectMap) == 0x000080, "Member 'JSONParserBPLibrary_BreakJson_Object::ObjectMap' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_BreakJson_Object, BoolMap) == 0x0000D0, "Member 'JSONParserBPLibrary_BreakJson_Object::BoolMap' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_BreakJson_Object, NumberMap) == 0x000120, "Member 'JSONParserBPLibrary_BreakJson_Object::NumberMap' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_BreakJson_Object, StringMap) == 0x000170, "Member 'JSONParserBPLibrary_BreakJson_Object::StringMap' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_BreakJson_Object, ObjectArray) == 0x0001C0, "Member 'JSONParserBPLibrary_BreakJson_Object::ObjectArray' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_BreakJson_Object, BoolArray) == 0x0001D0, "Member 'JSONParserBPLibrary_BreakJson_Object::BoolArray' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_BreakJson_Object, NumberArray) == 0x0001E0, "Member 'JSONParserBPLibrary_BreakJson_Object::NumberArray' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_BreakJson_Object, StringArray) == 0x0001F0, "Member 'JSONParserBPLibrary_BreakJson_Object::StringArray' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.BreakMixedJSONArray
// 0x0128 (0x0128 - 0x0000)
struct JSONParserBPLibrary_BreakMixedJSONArray final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSJsonObject                           JsonObject;                                        // 0x0008(0x0080)(ConstParm, Parm, NativeAccessSpecifierPublic)
	int32                                         LastIndex;                                         // 0x0088(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJsonDataType                                 Type;                                              // 0x008C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSJsonObject                           Object;                                            // 0x0090(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          Bool;                                              // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Number;                                            // 0x0114(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 String;                                            // 0x0118(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_BreakMixedJSONArray) == 0x000008, "Wrong alignment on JSONParserBPLibrary_BreakMixedJSONArray");
static_assert(sizeof(JSONParserBPLibrary_BreakMixedJSONArray) == 0x000128, "Wrong size on JSONParserBPLibrary_BreakMixedJSONArray");
static_assert(offsetof(JSONParserBPLibrary_BreakMixedJSONArray, Index_0) == 0x000000, "Member 'JSONParserBPLibrary_BreakMixedJSONArray::Index_0' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_BreakMixedJSONArray, JsonObject) == 0x000008, "Member 'JSONParserBPLibrary_BreakMixedJSONArray::JsonObject' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_BreakMixedJSONArray, LastIndex) == 0x000088, "Member 'JSONParserBPLibrary_BreakMixedJSONArray::LastIndex' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_BreakMixedJSONArray, Type) == 0x00008C, "Member 'JSONParserBPLibrary_BreakMixedJSONArray::Type' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_BreakMixedJSONArray, Object) == 0x000090, "Member 'JSONParserBPLibrary_BreakMixedJSONArray::Object' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_BreakMixedJSONArray, Bool) == 0x000110, "Member 'JSONParserBPLibrary_BreakMixedJSONArray::Bool' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_BreakMixedJSONArray, Number) == 0x000114, "Member 'JSONParserBPLibrary_BreakMixedJSONArray::Number' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_BreakMixedJSONArray, String) == 0x000118, "Member 'JSONParserBPLibrary_BreakMixedJSONArray::String' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.byteArrayToString
// 0x0020 (0x0020 - 0x0000)
struct JSONParserBPLibrary_byteArrayToString final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_byteArrayToString) == 0x000008, "Wrong alignment on JSONParserBPLibrary_byteArrayToString");
static_assert(sizeof(JSONParserBPLibrary_byteArrayToString) == 0x000020, "Wrong size on JSONParserBPLibrary_byteArrayToString");
static_assert(offsetof(JSONParserBPLibrary_byteArrayToString, ByteArray) == 0x000000, "Member 'JSONParserBPLibrary_byteArrayToString::ByteArray' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_byteArrayToString, ReturnValue) == 0x000010, "Member 'JSONParserBPLibrary_byteArrayToString::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.ChangeMapBool
// 0x00B8 (0x00B8 - 0x0000)
struct JSONParserBPLibrary_ChangeMapBool final
{
public:
	TMap<class FString, bool>                     Map;                                               // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, bool>                     ReturnValue;                                       // 0x0068(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_ChangeMapBool) == 0x000008, "Wrong alignment on JSONParserBPLibrary_ChangeMapBool");
static_assert(sizeof(JSONParserBPLibrary_ChangeMapBool) == 0x0000B8, "Wrong size on JSONParserBPLibrary_ChangeMapBool");
static_assert(offsetof(JSONParserBPLibrary_ChangeMapBool, Map) == 0x000000, "Member 'JSONParserBPLibrary_ChangeMapBool::Map' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_ChangeMapBool, Key) == 0x000050, "Member 'JSONParserBPLibrary_ChangeMapBool::Key' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_ChangeMapBool, Value) == 0x000060, "Member 'JSONParserBPLibrary_ChangeMapBool::Value' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_ChangeMapBool, ReturnValue) == 0x000068, "Member 'JSONParserBPLibrary_ChangeMapBool::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.ChangeMapNumber
// 0x00B8 (0x00B8 - 0x0000)
struct JSONParserBPLibrary_ChangeMapNumber final
{
public:
	TMap<class FString, float>                    Map;                                               // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, float>                    ReturnValue;                                       // 0x0068(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_ChangeMapNumber) == 0x000008, "Wrong alignment on JSONParserBPLibrary_ChangeMapNumber");
static_assert(sizeof(JSONParserBPLibrary_ChangeMapNumber) == 0x0000B8, "Wrong size on JSONParserBPLibrary_ChangeMapNumber");
static_assert(offsetof(JSONParserBPLibrary_ChangeMapNumber, Map) == 0x000000, "Member 'JSONParserBPLibrary_ChangeMapNumber::Map' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_ChangeMapNumber, Key) == 0x000050, "Member 'JSONParserBPLibrary_ChangeMapNumber::Key' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_ChangeMapNumber, Value) == 0x000060, "Member 'JSONParserBPLibrary_ChangeMapNumber::Value' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_ChangeMapNumber, ReturnValue) == 0x000068, "Member 'JSONParserBPLibrary_ChangeMapNumber::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.ChangeMapObject
// 0x0130 (0x0130 - 0x0000)
struct JSONParserBPLibrary_ChangeMapObject final
{
public:
	TMap<class FString, struct FSJsonObject>      Map;                                               // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSJsonObject                           Value;                                             // 0x0060(0x0080)(Parm, NativeAccessSpecifierPublic)
	TMap<class FString, struct FSJsonObject>      ReturnValue;                                       // 0x00E0(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_ChangeMapObject) == 0x000008, "Wrong alignment on JSONParserBPLibrary_ChangeMapObject");
static_assert(sizeof(JSONParserBPLibrary_ChangeMapObject) == 0x000130, "Wrong size on JSONParserBPLibrary_ChangeMapObject");
static_assert(offsetof(JSONParserBPLibrary_ChangeMapObject, Map) == 0x000000, "Member 'JSONParserBPLibrary_ChangeMapObject::Map' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_ChangeMapObject, Key) == 0x000050, "Member 'JSONParserBPLibrary_ChangeMapObject::Key' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_ChangeMapObject, Value) == 0x000060, "Member 'JSONParserBPLibrary_ChangeMapObject::Value' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_ChangeMapObject, ReturnValue) == 0x0000E0, "Member 'JSONParserBPLibrary_ChangeMapObject::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.ChangeMapString
// 0x00C0 (0x00C0 - 0x0000)
struct JSONParserBPLibrary_ChangeMapString final
{
public:
	TMap<class FString, class FString>            Map;                                               // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ReturnValue;                                       // 0x0070(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_ChangeMapString) == 0x000008, "Wrong alignment on JSONParserBPLibrary_ChangeMapString");
static_assert(sizeof(JSONParserBPLibrary_ChangeMapString) == 0x0000C0, "Wrong size on JSONParserBPLibrary_ChangeMapString");
static_assert(offsetof(JSONParserBPLibrary_ChangeMapString, Map) == 0x000000, "Member 'JSONParserBPLibrary_ChangeMapString::Map' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_ChangeMapString, Key) == 0x000050, "Member 'JSONParserBPLibrary_ChangeMapString::Key' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_ChangeMapString, Value) == 0x000060, "Member 'JSONParserBPLibrary_ChangeMapString::Value' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_ChangeMapString, ReturnValue) == 0x000070, "Member 'JSONParserBPLibrary_ChangeMapString::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.compressData
// 0x0038 (0x0038 - 0x0000)
struct JSONParserBPLibrary_CompressData final
{
public:
	EJsonCompressFormat                           Format;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 UncompressedData;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 CompressedData;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CompressedDataSize;                                // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UncompressedDataSize;                              // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JSONParserBPLibrary_CompressData) == 0x000008, "Wrong alignment on JSONParserBPLibrary_CompressData");
static_assert(sizeof(JSONParserBPLibrary_CompressData) == 0x000038, "Wrong size on JSONParserBPLibrary_CompressData");
static_assert(offsetof(JSONParserBPLibrary_CompressData, Format) == 0x000000, "Member 'JSONParserBPLibrary_CompressData::Format' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_CompressData, UncompressedData) == 0x000008, "Member 'JSONParserBPLibrary_CompressData::UncompressedData' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_CompressData, CompressedData) == 0x000018, "Member 'JSONParserBPLibrary_CompressData::CompressedData' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_CompressData, CompressedDataSize) == 0x000028, "Member 'JSONParserBPLibrary_CompressData::CompressedDataSize' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_CompressData, UncompressedDataSize) == 0x00002C, "Member 'JSONParserBPLibrary_CompressData::UncompressedDataSize' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_CompressData, Success) == 0x000030, "Member 'JSONParserBPLibrary_CompressData::Success' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.CreateFile
// 0x0020 (0x0020 - 0x0000)
struct JSONParserBPLibrary_CreateFile final
{
public:
	EJSONDirectoryType                            DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JSONParserBPLibrary_CreateFile) == 0x000008, "Wrong alignment on JSONParserBPLibrary_CreateFile");
static_assert(sizeof(JSONParserBPLibrary_CreateFile) == 0x000020, "Wrong size on JSONParserBPLibrary_CreateFile");
static_assert(offsetof(JSONParserBPLibrary_CreateFile, DirectoryType) == 0x000000, "Member 'JSONParserBPLibrary_CreateFile::DirectoryType' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_CreateFile, FilePath) == 0x000008, "Member 'JSONParserBPLibrary_CreateFile::FilePath' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_CreateFile, ReturnValue) == 0x000018, "Member 'JSONParserBPLibrary_CreateFile::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.DeleteFile
// 0x0020 (0x0020 - 0x0000)
struct JSONParserBPLibrary_DeleteFile final
{
public:
	EJSONDirectoryType                            DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JSONParserBPLibrary_DeleteFile) == 0x000008, "Wrong alignment on JSONParserBPLibrary_DeleteFile");
static_assert(sizeof(JSONParserBPLibrary_DeleteFile) == 0x000020, "Wrong size on JSONParserBPLibrary_DeleteFile");
static_assert(offsetof(JSONParserBPLibrary_DeleteFile, DirectoryType) == 0x000000, "Member 'JSONParserBPLibrary_DeleteFile::DirectoryType' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_DeleteFile, FilePath) == 0x000008, "Member 'JSONParserBPLibrary_DeleteFile::FilePath' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_DeleteFile, ReturnValue) == 0x000018, "Member 'JSONParserBPLibrary_DeleteFile::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.dirExists
// 0x0020 (0x0020 - 0x0000)
struct JSONParserBPLibrary_DirExists final
{
public:
	EJSONDirectoryType                            DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JSONParserBPLibrary_DirExists) == 0x000008, "Wrong alignment on JSONParserBPLibrary_DirExists");
static_assert(sizeof(JSONParserBPLibrary_DirExists) == 0x000020, "Wrong size on JSONParserBPLibrary_DirExists");
static_assert(offsetof(JSONParserBPLibrary_DirExists, DirectoryType) == 0x000000, "Member 'JSONParserBPLibrary_DirExists::DirectoryType' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_DirExists, FilePath) == 0x000008, "Member 'JSONParserBPLibrary_DirExists::FilePath' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_DirExists, ReturnValue) == 0x000018, "Member 'JSONParserBPLibrary_DirExists::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.fileExists
// 0x0020 (0x0020 - 0x0000)
struct JSONParserBPLibrary_FileExists final
{
public:
	EJSONDirectoryType                            DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JSONParserBPLibrary_FileExists) == 0x000008, "Wrong alignment on JSONParserBPLibrary_FileExists");
static_assert(sizeof(JSONParserBPLibrary_FileExists) == 0x000020, "Wrong size on JSONParserBPLibrary_FileExists");
static_assert(offsetof(JSONParserBPLibrary_FileExists, DirectoryType) == 0x000000, "Member 'JSONParserBPLibrary_FileExists::DirectoryType' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_FileExists, FilePath) == 0x000008, "Member 'JSONParserBPLibrary_FileExists::FilePath' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_FileExists, ReturnValue) == 0x000018, "Member 'JSONParserBPLibrary_FileExists::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.fileToBase64String
// 0x0038 (0x0038 - 0x0000)
struct JSONParserBPLibrary_FileToBase64String final
{
public:
	EJSONDirectoryType                            DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 base64String;                                      // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_FileToBase64String) == 0x000008, "Wrong alignment on JSONParserBPLibrary_FileToBase64String");
static_assert(sizeof(JSONParserBPLibrary_FileToBase64String) == 0x000038, "Wrong size on JSONParserBPLibrary_FileToBase64String");
static_assert(offsetof(JSONParserBPLibrary_FileToBase64String, DirectoryType) == 0x000000, "Member 'JSONParserBPLibrary_FileToBase64String::DirectoryType' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_FileToBase64String, FilePath) == 0x000008, "Member 'JSONParserBPLibrary_FileToBase64String::FilePath' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_FileToBase64String, base64String) == 0x000018, "Member 'JSONParserBPLibrary_FileToBase64String::base64String' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_FileToBase64String, Filename) == 0x000028, "Member 'JSONParserBPLibrary_FileToBase64String::Filename' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.FillStructWithJson
// 0x0090 (0x0090 - 0x0000)
struct JSONParserBPLibrary_FillStructWithJson final
{
public:
	class FString                                 StructID;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSJsonObject                           Json;                                              // 0x0010(0x0080)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_FillStructWithJson) == 0x000008, "Wrong alignment on JSONParserBPLibrary_FillStructWithJson");
static_assert(sizeof(JSONParserBPLibrary_FillStructWithJson) == 0x000090, "Wrong size on JSONParserBPLibrary_FillStructWithJson");
static_assert(offsetof(JSONParserBPLibrary_FillStructWithJson, StructID) == 0x000000, "Member 'JSONParserBPLibrary_FillStructWithJson::StructID' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_FillStructWithJson, Json) == 0x000010, "Member 'JSONParserBPLibrary_FillStructWithJson::Json' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.JsonObjectToRotator
// 0x0090 (0x0090 - 0x0000)
struct JSONParserBPLibrary_JsonObjectToRotator final
{
public:
	struct FSJsonObject                           JsonObject;                                        // 0x0000(0x0080)(Parm, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0080(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JSONParserBPLibrary_JsonObjectToRotator) == 0x000008, "Wrong alignment on JSONParserBPLibrary_JsonObjectToRotator");
static_assert(sizeof(JSONParserBPLibrary_JsonObjectToRotator) == 0x000090, "Wrong size on JSONParserBPLibrary_JsonObjectToRotator");
static_assert(offsetof(JSONParserBPLibrary_JsonObjectToRotator, JsonObject) == 0x000000, "Member 'JSONParserBPLibrary_JsonObjectToRotator::JsonObject' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_JsonObjectToRotator, ReturnValue) == 0x000080, "Member 'JSONParserBPLibrary_JsonObjectToRotator::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.JsonObjectToString
// 0x00A0 (0x00A0 - 0x0000)
struct JSONParserBPLibrary_JsonObjectToString final
{
public:
	bool                                          Successful;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSJsonObject                           MainObject;                                        // 0x0008(0x0080)(Parm, NativeAccessSpecifierPublic)
	bool                                          RemoveLineBreaks;                                  // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddPadding;                                        // 0x0089(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0090(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_JsonObjectToString) == 0x000008, "Wrong alignment on JSONParserBPLibrary_JsonObjectToString");
static_assert(sizeof(JSONParserBPLibrary_JsonObjectToString) == 0x0000A0, "Wrong size on JSONParserBPLibrary_JsonObjectToString");
static_assert(offsetof(JSONParserBPLibrary_JsonObjectToString, Successful) == 0x000000, "Member 'JSONParserBPLibrary_JsonObjectToString::Successful' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_JsonObjectToString, MainObject) == 0x000008, "Member 'JSONParserBPLibrary_JsonObjectToString::MainObject' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_JsonObjectToString, RemoveLineBreaks) == 0x000088, "Member 'JSONParserBPLibrary_JsonObjectToString::RemoveLineBreaks' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_JsonObjectToString, AddPadding) == 0x000089, "Member 'JSONParserBPLibrary_JsonObjectToString::AddPadding' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_JsonObjectToString, ReturnValue) == 0x000090, "Member 'JSONParserBPLibrary_JsonObjectToString::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.JsonObjectToTransform
// 0x00B0 (0x00B0 - 0x0000)
struct JSONParserBPLibrary_JsonObjectToTransform final
{
public:
	struct FSJsonObject                           JsonObject;                                        // 0x0000(0x0080)(Parm, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0080(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_JsonObjectToTransform) == 0x000010, "Wrong alignment on JSONParserBPLibrary_JsonObjectToTransform");
static_assert(sizeof(JSONParserBPLibrary_JsonObjectToTransform) == 0x0000B0, "Wrong size on JSONParserBPLibrary_JsonObjectToTransform");
static_assert(offsetof(JSONParserBPLibrary_JsonObjectToTransform, JsonObject) == 0x000000, "Member 'JSONParserBPLibrary_JsonObjectToTransform::JsonObject' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_JsonObjectToTransform, ReturnValue) == 0x000080, "Member 'JSONParserBPLibrary_JsonObjectToTransform::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.JsonObjectToVector
// 0x0090 (0x0090 - 0x0000)
struct JSONParserBPLibrary_JsonObjectToVector final
{
public:
	struct FSJsonObject                           JsonObject;                                        // 0x0000(0x0080)(Parm, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0080(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JSONParserBPLibrary_JsonObjectToVector) == 0x000008, "Wrong alignment on JSONParserBPLibrary_JsonObjectToVector");
static_assert(sizeof(JSONParserBPLibrary_JsonObjectToVector) == 0x000090, "Wrong size on JSONParserBPLibrary_JsonObjectToVector");
static_assert(offsetof(JSONParserBPLibrary_JsonObjectToVector, JsonObject) == 0x000000, "Member 'JSONParserBPLibrary_JsonObjectToVector::JsonObject' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_JsonObjectToVector, ReturnValue) == 0x000080, "Member 'JSONParserBPLibrary_JsonObjectToVector::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.JsonStringToObject
// 0x0098 (0x0098 - 0x0000)
struct JSONParserBPLibrary_JsonStringToObject final
{
public:
	class FString                                 Json;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RemoveAndSavePadding;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Successful;                                        // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSJsonObject                           ReturnValue;                                       // 0x0018(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_JsonStringToObject) == 0x000008, "Wrong alignment on JSONParserBPLibrary_JsonStringToObject");
static_assert(sizeof(JSONParserBPLibrary_JsonStringToObject) == 0x000098, "Wrong size on JSONParserBPLibrary_JsonStringToObject");
static_assert(offsetof(JSONParserBPLibrary_JsonStringToObject, Json) == 0x000000, "Member 'JSONParserBPLibrary_JsonStringToObject::Json' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_JsonStringToObject, RemoveAndSavePadding) == 0x000010, "Member 'JSONParserBPLibrary_JsonStringToObject::RemoveAndSavePadding' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_JsonStringToObject, Successful) == 0x000011, "Member 'JSONParserBPLibrary_JsonStringToObject::Successful' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_JsonStringToObject, ReturnValue) == 0x000018, "Member 'JSONParserBPLibrary_JsonStringToObject::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.MakeBool
// 0x0002 (0x0002 - 0x0000)
struct JSONParserBPLibrary_MakeBool final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_MakeBool) == 0x000001, "Wrong alignment on JSONParserBPLibrary_MakeBool");
static_assert(sizeof(JSONParserBPLibrary_MakeBool) == 0x000002, "Wrong size on JSONParserBPLibrary_MakeBool");
static_assert(offsetof(JSONParserBPLibrary_MakeBool, Value) == 0x000000, "Member 'JSONParserBPLibrary_MakeBool::Value' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_MakeBool, ReturnValue) == 0x000001, "Member 'JSONParserBPLibrary_MakeBool::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.MakeJson_Object
// 0x0200 (0x0200 - 0x0000)
struct JSONParserBPLibrary_MakeJson_Object final
{
public:
	TMap<class FString, struct FSJsonObject>      ObjectMap;                                         // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	TMap<class FString, bool>                     BoolMap;                                           // 0x0050(0x0050)(Parm, NativeAccessSpecifierPublic)
	TMap<class FString, float>                    NumberMap;                                         // 0x00A0(0x0050)(Parm, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            StringMap;                                         // 0x00F0(0x0050)(Parm, NativeAccessSpecifierPublic)
	TArray<struct FSJsonObject>                   ObjectArray;                                       // 0x0140(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<bool>                                  BoolArray;                                         // 0x0150(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 NumberArray;                                       // 0x0160(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         StringArray;                                       // 0x0170(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSJsonObject                           ReturnValue;                                       // 0x0180(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_MakeJson_Object) == 0x000008, "Wrong alignment on JSONParserBPLibrary_MakeJson_Object");
static_assert(sizeof(JSONParserBPLibrary_MakeJson_Object) == 0x000200, "Wrong size on JSONParserBPLibrary_MakeJson_Object");
static_assert(offsetof(JSONParserBPLibrary_MakeJson_Object, ObjectMap) == 0x000000, "Member 'JSONParserBPLibrary_MakeJson_Object::ObjectMap' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_MakeJson_Object, BoolMap) == 0x000050, "Member 'JSONParserBPLibrary_MakeJson_Object::BoolMap' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_MakeJson_Object, NumberMap) == 0x0000A0, "Member 'JSONParserBPLibrary_MakeJson_Object::NumberMap' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_MakeJson_Object, StringMap) == 0x0000F0, "Member 'JSONParserBPLibrary_MakeJson_Object::StringMap' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_MakeJson_Object, ObjectArray) == 0x000140, "Member 'JSONParserBPLibrary_MakeJson_Object::ObjectArray' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_MakeJson_Object, BoolArray) == 0x000150, "Member 'JSONParserBPLibrary_MakeJson_Object::BoolArray' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_MakeJson_Object, NumberArray) == 0x000160, "Member 'JSONParserBPLibrary_MakeJson_Object::NumberArray' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_MakeJson_Object, StringArray) == 0x000170, "Member 'JSONParserBPLibrary_MakeJson_Object::StringArray' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_MakeJson_Object, ReturnValue) == 0x000180, "Member 'JSONParserBPLibrary_MakeJson_Object::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.MakeMapBool
// 0x0068 (0x0068 - 0x0000)
struct JSONParserBPLibrary_MakeMapBool final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, bool>                     ReturnValue;                                       // 0x0018(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_MakeMapBool) == 0x000008, "Wrong alignment on JSONParserBPLibrary_MakeMapBool");
static_assert(sizeof(JSONParserBPLibrary_MakeMapBool) == 0x000068, "Wrong size on JSONParserBPLibrary_MakeMapBool");
static_assert(offsetof(JSONParserBPLibrary_MakeMapBool, Key) == 0x000000, "Member 'JSONParserBPLibrary_MakeMapBool::Key' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_MakeMapBool, Value) == 0x000010, "Member 'JSONParserBPLibrary_MakeMapBool::Value' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_MakeMapBool, ReturnValue) == 0x000018, "Member 'JSONParserBPLibrary_MakeMapBool::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.MakeMapNumber
// 0x0068 (0x0068 - 0x0000)
struct JSONParserBPLibrary_MakeMapNumber final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, float>                    ReturnValue;                                       // 0x0018(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_MakeMapNumber) == 0x000008, "Wrong alignment on JSONParserBPLibrary_MakeMapNumber");
static_assert(sizeof(JSONParserBPLibrary_MakeMapNumber) == 0x000068, "Wrong size on JSONParserBPLibrary_MakeMapNumber");
static_assert(offsetof(JSONParserBPLibrary_MakeMapNumber, Key) == 0x000000, "Member 'JSONParserBPLibrary_MakeMapNumber::Key' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_MakeMapNumber, Value) == 0x000010, "Member 'JSONParserBPLibrary_MakeMapNumber::Value' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_MakeMapNumber, ReturnValue) == 0x000018, "Member 'JSONParserBPLibrary_MakeMapNumber::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.MakeMapObject
// 0x00E0 (0x00E0 - 0x0000)
struct JSONParserBPLibrary_MakeMapObject final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSJsonObject                           Value;                                             // 0x0010(0x0080)(Parm, NativeAccessSpecifierPublic)
	TMap<class FString, struct FSJsonObject>      ReturnValue;                                       // 0x0090(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_MakeMapObject) == 0x000008, "Wrong alignment on JSONParserBPLibrary_MakeMapObject");
static_assert(sizeof(JSONParserBPLibrary_MakeMapObject) == 0x0000E0, "Wrong size on JSONParserBPLibrary_MakeMapObject");
static_assert(offsetof(JSONParserBPLibrary_MakeMapObject, Key) == 0x000000, "Member 'JSONParserBPLibrary_MakeMapObject::Key' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_MakeMapObject, Value) == 0x000010, "Member 'JSONParserBPLibrary_MakeMapObject::Value' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_MakeMapObject, ReturnValue) == 0x000090, "Member 'JSONParserBPLibrary_MakeMapObject::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.MakeMapString
// 0x0070 (0x0070 - 0x0000)
struct JSONParserBPLibrary_MakeMapString final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            ReturnValue;                                       // 0x0020(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_MakeMapString) == 0x000008, "Wrong alignment on JSONParserBPLibrary_MakeMapString");
static_assert(sizeof(JSONParserBPLibrary_MakeMapString) == 0x000070, "Wrong size on JSONParserBPLibrary_MakeMapString");
static_assert(offsetof(JSONParserBPLibrary_MakeMapString, Key) == 0x000000, "Member 'JSONParserBPLibrary_MakeMapString::Key' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_MakeMapString, Value) == 0x000010, "Member 'JSONParserBPLibrary_MakeMapString::Value' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_MakeMapString, ReturnValue) == 0x000020, "Member 'JSONParserBPLibrary_MakeMapString::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.MakeMixedJSONArray
// 0x01A0 (0x01A0 - 0x0000)
struct JSONParserBPLibrary_MakeMixedJSONArray final
{
public:
	struct FSJsonObject                           OldJSONMixedArray;                                 // 0x0000(0x0080)(ConstParm, Parm, NativeAccessSpecifierPublic)
	EJsonDataType                                 ChooseOneType;                                     // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSJsonObject                           Object;                                            // 0x0088(0x0080)(Parm, NativeAccessSpecifierPublic)
	bool                                          Bool;                                              // 0x0108(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Number;                                            // 0x010C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 String;                                            // 0x0110(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSJsonObject                           ReturnValue;                                       // 0x0120(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_MakeMixedJSONArray) == 0x000008, "Wrong alignment on JSONParserBPLibrary_MakeMixedJSONArray");
static_assert(sizeof(JSONParserBPLibrary_MakeMixedJSONArray) == 0x0001A0, "Wrong size on JSONParserBPLibrary_MakeMixedJSONArray");
static_assert(offsetof(JSONParserBPLibrary_MakeMixedJSONArray, OldJSONMixedArray) == 0x000000, "Member 'JSONParserBPLibrary_MakeMixedJSONArray::OldJSONMixedArray' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_MakeMixedJSONArray, ChooseOneType) == 0x000080, "Member 'JSONParserBPLibrary_MakeMixedJSONArray::ChooseOneType' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_MakeMixedJSONArray, Object) == 0x000088, "Member 'JSONParserBPLibrary_MakeMixedJSONArray::Object' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_MakeMixedJSONArray, Bool) == 0x000108, "Member 'JSONParserBPLibrary_MakeMixedJSONArray::Bool' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_MakeMixedJSONArray, Number) == 0x00010C, "Member 'JSONParserBPLibrary_MakeMixedJSONArray::Number' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_MakeMixedJSONArray, String) == 0x000110, "Member 'JSONParserBPLibrary_MakeMixedJSONArray::String' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_MakeMixedJSONArray, ReturnValue) == 0x000120, "Member 'JSONParserBPLibrary_MakeMixedJSONArray::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.MakeNumber
// 0x0008 (0x0008 - 0x0000)
struct JSONParserBPLibrary_MakeNumber final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_MakeNumber) == 0x000004, "Wrong alignment on JSONParserBPLibrary_MakeNumber");
static_assert(sizeof(JSONParserBPLibrary_MakeNumber) == 0x000008, "Wrong size on JSONParserBPLibrary_MakeNumber");
static_assert(offsetof(JSONParserBPLibrary_MakeNumber, Value) == 0x000000, "Member 'JSONParserBPLibrary_MakeNumber::Value' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_MakeNumber, ReturnValue) == 0x000004, "Member 'JSONParserBPLibrary_MakeNumber::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.MakeString
// 0x0020 (0x0020 - 0x0000)
struct JSONParserBPLibrary_MakeString final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_MakeString) == 0x000008, "Wrong alignment on JSONParserBPLibrary_MakeString");
static_assert(sizeof(JSONParserBPLibrary_MakeString) == 0x000020, "Wrong size on JSONParserBPLibrary_MakeString");
static_assert(offsetof(JSONParserBPLibrary_MakeString, Value) == 0x000000, "Member 'JSONParserBPLibrary_MakeString::Value' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_MakeString, ReturnValue) == 0x000010, "Member 'JSONParserBPLibrary_MakeString::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.PrepareStructToFillItWithJson
// 0x0018 (0x0018 - 0x0000)
struct JSONParserBPLibrary_PrepareStructToFillItWithJson final
{
public:
	class UStruct*                                Struct;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_PrepareStructToFillItWithJson) == 0x000008, "Wrong alignment on JSONParserBPLibrary_PrepareStructToFillItWithJson");
static_assert(sizeof(JSONParserBPLibrary_PrepareStructToFillItWithJson) == 0x000018, "Wrong size on JSONParserBPLibrary_PrepareStructToFillItWithJson");
static_assert(offsetof(JSONParserBPLibrary_PrepareStructToFillItWithJson, Struct) == 0x000000, "Member 'JSONParserBPLibrary_PrepareStructToFillItWithJson::Struct' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_PrepareStructToFillItWithJson, ReturnValue) == 0x000008, "Member 'JSONParserBPLibrary_PrepareStructToFillItWithJson::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.ReadBytesFromFile
// 0x0028 (0x0028 - 0x0000)
struct JSONParserBPLibrary_ReadBytesFromFile final
{
public:
	EJSONDirectoryType                            DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 bytes;                                             // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_ReadBytesFromFile) == 0x000008, "Wrong alignment on JSONParserBPLibrary_ReadBytesFromFile");
static_assert(sizeof(JSONParserBPLibrary_ReadBytesFromFile) == 0x000028, "Wrong size on JSONParserBPLibrary_ReadBytesFromFile");
static_assert(offsetof(JSONParserBPLibrary_ReadBytesFromFile, DirectoryType) == 0x000000, "Member 'JSONParserBPLibrary_ReadBytesFromFile::DirectoryType' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_ReadBytesFromFile, FilePath) == 0x000008, "Member 'JSONParserBPLibrary_ReadBytesFromFile::FilePath' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_ReadBytesFromFile, bytes) == 0x000018, "Member 'JSONParserBPLibrary_ReadBytesFromFile::bytes' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.ReadStringFromFile
// 0x0030 (0x0030 - 0x0000)
struct JSONParserBPLibrary_ReadStringFromFile final
{
public:
	EJSONDirectoryType                            DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JSON_String;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JSONParserBPLibrary_ReadStringFromFile) == 0x000008, "Wrong alignment on JSONParserBPLibrary_ReadStringFromFile");
static_assert(sizeof(JSONParserBPLibrary_ReadStringFromFile) == 0x000030, "Wrong size on JSONParserBPLibrary_ReadStringFromFile");
static_assert(offsetof(JSONParserBPLibrary_ReadStringFromFile, DirectoryType) == 0x000000, "Member 'JSONParserBPLibrary_ReadStringFromFile::DirectoryType' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_ReadStringFromFile, FilePath) == 0x000008, "Member 'JSONParserBPLibrary_ReadStringFromFile::FilePath' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_ReadStringFromFile, JSON_String) == 0x000018, "Member 'JSONParserBPLibrary_ReadStringFromFile::JSON_String' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_ReadStringFromFile, ReturnValue) == 0x000028, "Member 'JSONParserBPLibrary_ReadStringFromFile::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.RotatorToJsonObject
// 0x0090 (0x0090 - 0x0000)
struct JSONParserBPLibrary_RotatorToJsonObject final
{
public:
	struct FRotator                               Rotator;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSJsonObject                           ReturnValue;                                       // 0x0010(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_RotatorToJsonObject) == 0x000008, "Wrong alignment on JSONParserBPLibrary_RotatorToJsonObject");
static_assert(sizeof(JSONParserBPLibrary_RotatorToJsonObject) == 0x000090, "Wrong size on JSONParserBPLibrary_RotatorToJsonObject");
static_assert(offsetof(JSONParserBPLibrary_RotatorToJsonObject, Rotator) == 0x000000, "Member 'JSONParserBPLibrary_RotatorToJsonObject::Rotator' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_RotatorToJsonObject, ReturnValue) == 0x000010, "Member 'JSONParserBPLibrary_RotatorToJsonObject::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.setStructJsonSettings
// 0x0001 (0x0001 - 0x0000)
struct JSONParserBPLibrary_SetStructJsonSettings final
{
public:
	EJSONJsonStructMapSetting                     Map;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_SetStructJsonSettings) == 0x000001, "Wrong alignment on JSONParserBPLibrary_SetStructJsonSettings");
static_assert(sizeof(JSONParserBPLibrary_SetStructJsonSettings) == 0x000001, "Wrong size on JSONParserBPLibrary_SetStructJsonSettings");
static_assert(offsetof(JSONParserBPLibrary_SetStructJsonSettings, Map) == 0x000000, "Member 'JSONParserBPLibrary_SetStructJsonSettings::Map' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.stringToByteArray
// 0x0020 (0x0020 - 0x0000)
struct JSONParserBPLibrary_StringToByteArray final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_StringToByteArray) == 0x000008, "Wrong alignment on JSONParserBPLibrary_StringToByteArray");
static_assert(sizeof(JSONParserBPLibrary_StringToByteArray) == 0x000020, "Wrong size on JSONParserBPLibrary_StringToByteArray");
static_assert(offsetof(JSONParserBPLibrary_StringToByteArray, String) == 0x000000, "Member 'JSONParserBPLibrary_StringToByteArray::String' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_StringToByteArray, ReturnValue) == 0x000010, "Member 'JSONParserBPLibrary_StringToByteArray::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.StructToJsonObject
// 0x0088 (0x0088 - 0x0000)
struct JSONParserBPLibrary_StructToJsonObject final
{
public:
	class UStruct*                                Struct;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSJsonObject                           ReturnValue;                                       // 0x0008(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_StructToJsonObject) == 0x000008, "Wrong alignment on JSONParserBPLibrary_StructToJsonObject");
static_assert(sizeof(JSONParserBPLibrary_StructToJsonObject) == 0x000088, "Wrong size on JSONParserBPLibrary_StructToJsonObject");
static_assert(offsetof(JSONParserBPLibrary_StructToJsonObject, Struct) == 0x000000, "Member 'JSONParserBPLibrary_StructToJsonObject::Struct' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_StructToJsonObject, ReturnValue) == 0x000008, "Member 'JSONParserBPLibrary_StructToJsonObject::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.TransformToJsonObject
// 0x00B0 (0x00B0 - 0x0000)
struct JSONParserBPLibrary_TransformToJsonObject final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSJsonObject                           ReturnValue;                                       // 0x0030(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_TransformToJsonObject) == 0x000010, "Wrong alignment on JSONParserBPLibrary_TransformToJsonObject");
static_assert(sizeof(JSONParserBPLibrary_TransformToJsonObject) == 0x0000B0, "Wrong size on JSONParserBPLibrary_TransformToJsonObject");
static_assert(offsetof(JSONParserBPLibrary_TransformToJsonObject, Transform) == 0x000000, "Member 'JSONParserBPLibrary_TransformToJsonObject::Transform' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_TransformToJsonObject, ReturnValue) == 0x000030, "Member 'JSONParserBPLibrary_TransformToJsonObject::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.uncompressData
// 0x0030 (0x0030 - 0x0000)
struct JSONParserBPLibrary_UncompressData final
{
public:
	EJsonCompressFormat                           Format;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UncompressedDataSize;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 CompressedData;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 UncompressedData;                                  // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JSONParserBPLibrary_UncompressData) == 0x000008, "Wrong alignment on JSONParserBPLibrary_UncompressData");
static_assert(sizeof(JSONParserBPLibrary_UncompressData) == 0x000030, "Wrong size on JSONParserBPLibrary_UncompressData");
static_assert(offsetof(JSONParserBPLibrary_UncompressData, Format) == 0x000000, "Member 'JSONParserBPLibrary_UncompressData::Format' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_UncompressData, UncompressedDataSize) == 0x000004, "Member 'JSONParserBPLibrary_UncompressData::UncompressedDataSize' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_UncompressData, CompressedData) == 0x000008, "Member 'JSONParserBPLibrary_UncompressData::CompressedData' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_UncompressData, UncompressedData) == 0x000018, "Member 'JSONParserBPLibrary_UncompressData::UncompressedData' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_UncompressData, Success) == 0x000028, "Member 'JSONParserBPLibrary_UncompressData::Success' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.VectorToJsonObject
// 0x0090 (0x0090 - 0x0000)
struct JSONParserBPLibrary_VectorToJsonObject final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSJsonObject                           ReturnValue;                                       // 0x0010(0x0080)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JSONParserBPLibrary_VectorToJsonObject) == 0x000008, "Wrong alignment on JSONParserBPLibrary_VectorToJsonObject");
static_assert(sizeof(JSONParserBPLibrary_VectorToJsonObject) == 0x000090, "Wrong size on JSONParserBPLibrary_VectorToJsonObject");
static_assert(offsetof(JSONParserBPLibrary_VectorToJsonObject, Vector) == 0x000000, "Member 'JSONParserBPLibrary_VectorToJsonObject::Vector' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_VectorToJsonObject, ReturnValue) == 0x000010, "Member 'JSONParserBPLibrary_VectorToJsonObject::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.WriteBytesToFile
// 0x0030 (0x0030 - 0x0000)
struct JSONParserBPLibrary_WriteBytesToFile final
{
public:
	EJSONDirectoryType                            DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 bytes;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 FilePath;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JSONParserBPLibrary_WriteBytesToFile) == 0x000008, "Wrong alignment on JSONParserBPLibrary_WriteBytesToFile");
static_assert(sizeof(JSONParserBPLibrary_WriteBytesToFile) == 0x000030, "Wrong size on JSONParserBPLibrary_WriteBytesToFile");
static_assert(offsetof(JSONParserBPLibrary_WriteBytesToFile, DirectoryType) == 0x000000, "Member 'JSONParserBPLibrary_WriteBytesToFile::DirectoryType' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_WriteBytesToFile, bytes) == 0x000008, "Member 'JSONParserBPLibrary_WriteBytesToFile::bytes' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_WriteBytesToFile, FilePath) == 0x000018, "Member 'JSONParserBPLibrary_WriteBytesToFile::FilePath' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_WriteBytesToFile, ReturnValue) == 0x000028, "Member 'JSONParserBPLibrary_WriteBytesToFile::ReturnValue' has a wrong offset!");

// Function JSONParser.JSONParserBPLibrary.WriteStringToFile
// 0x0030 (0x0030 - 0x0000)
struct JSONParserBPLibrary_WriteStringToFile final
{
public:
	EJSONDirectoryType                            DirectoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 JSON_String;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilePath;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JSONParserBPLibrary_WriteStringToFile) == 0x000008, "Wrong alignment on JSONParserBPLibrary_WriteStringToFile");
static_assert(sizeof(JSONParserBPLibrary_WriteStringToFile) == 0x000030, "Wrong size on JSONParserBPLibrary_WriteStringToFile");
static_assert(offsetof(JSONParserBPLibrary_WriteStringToFile, DirectoryType) == 0x000000, "Member 'JSONParserBPLibrary_WriteStringToFile::DirectoryType' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_WriteStringToFile, JSON_String) == 0x000008, "Member 'JSONParserBPLibrary_WriteStringToFile::JSON_String' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_WriteStringToFile, FilePath) == 0x000018, "Member 'JSONParserBPLibrary_WriteStringToFile::FilePath' has a wrong offset!");
static_assert(offsetof(JSONParserBPLibrary_WriteStringToFile, ReturnValue) == 0x000028, "Member 'JSONParserBPLibrary_WriteStringToFile::ReturnValue' has a wrong offset!");

}

